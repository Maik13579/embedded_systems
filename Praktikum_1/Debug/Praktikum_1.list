
Praktikum_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000078  080049b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080049b0  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012005  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002217  00000000  00000000  000320ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00035198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fb7  00000000  00000000  00035fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa10  00000000  00000000  0005df57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f551f  00000000  00000000  0006d967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  00162edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004830 	.word	0x08004830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004830 	.word	0x08004830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc5c 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f840 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8e6 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8b4 	bl	80006e4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800057c:	f000 f88c 	bl	8000698 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <main+0x7c>)
 8000582:	f002 fb1d 	bl	8002bc0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	// turn on LEDs
	if(counter >= 5)HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <main+0x80>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b04      	cmp	r3, #4
 800058c:	d905      	bls.n	800059a <main+0x32>
 800058e:	2201      	movs	r2, #1
 8000590:	2101      	movs	r1, #1
 8000592:	4816      	ldr	r0, [pc, #88]	; (80005ec <main+0x84>)
 8000594:	f000 ff98 	bl	80014c8 <HAL_GPIO_WritePin>
 8000598:	e004      	b.n	80005a4 <main+0x3c>
	else HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	4813      	ldr	r0, [pc, #76]	; (80005ec <main+0x84>)
 80005a0:	f000 ff92 	bl	80014c8 <HAL_GPIO_WritePin>

	if(counter >= 10)HAL_GPIO_WritePin(LED_yellow_GPIO_Port, LED_yellow_Pin, GPIO_PIN_SET);
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0x80>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d905      	bls.n	80005b8 <main+0x50>
 80005ac:	2201      	movs	r2, #1
 80005ae:	2102      	movs	r1, #2
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x88>)
 80005b2:	f000 ff89 	bl	80014c8 <HAL_GPIO_WritePin>
 80005b6:	e004      	b.n	80005c2 <main+0x5a>
	else HAL_GPIO_WritePin(LED_yellow_GPIO_Port, LED_yellow_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0x88>)
 80005be:	f000 ff83 	bl	80014c8 <HAL_GPIO_WritePin>

	if(counter >= 25)HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <main+0x80>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b18      	cmp	r3, #24
 80005c8:	d905      	bls.n	80005d6 <main+0x6e>
 80005ca:	2201      	movs	r2, #1
 80005cc:	2101      	movs	r1, #1
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x88>)
 80005d0:	f000 ff7a 	bl	80014c8 <HAL_GPIO_WritePin>
 80005d4:	e7d7      	b.n	8000586 <main+0x1e>
	else HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0x88>)
 80005dc:	f000 ff74 	bl	80014c8 <HAL_GPIO_WritePin>
	if(counter >= 5)HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 80005e0:	e7d1      	b.n	8000586 <main+0x1e>
 80005e2:	bf00      	nop
 80005e4:	20000134 	.word	0x20000134
 80005e8:	200000a8 	.word	0x200000a8
 80005ec:	48000400 	.word	0x48000400
 80005f0:	48000800 	.word	0x48000800

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	; 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 f9b6 	bl	8003974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f000 ff7b 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 fa20 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000642:	230a      	movs	r3, #10
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ffb2 	bl	80015c0 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000662:	f000 fa01 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2303      	movs	r3, #3
 800066c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2104      	movs	r1, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fb84 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f9ed 	bl	8000a68 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	; 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

//80MHz / 8000 = 10 kHz -> 1 tick every 0.0001 sec
//0.0001 sec * 100 = 0.01 sec -> timer interrupt every 10 ms

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_TIM16_Init+0x44>)
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_TIM16_Init+0x48>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_TIM16_Init+0x44>)
 80006a4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_TIM16_Init+0x44>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_TIM16_Init+0x44>)
 80006b2:	2263      	movs	r2, #99	; 0x63
 80006b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_TIM16_Init+0x44>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_TIM16_Init+0x44>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_TIM16_Init+0x44>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_TIM16_Init+0x44>)
 80006ca:	f002 fa21 	bl	8002b10 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006d4:	f000 f9c8 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000134 	.word	0x20000134
 80006e0:	40014400 	.word	0x40014400

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART2_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000728:	f002 fcba 	bl	80030a0 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f999 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000ac 	.word	0x200000ac
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b44      	ldr	r3, [pc, #272]	; (800086c <MX_GPIO_Init+0x128>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a43      	ldr	r2, [pc, #268]	; (800086c <MX_GPIO_Init+0x128>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_GPIO_Init+0x128>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <MX_GPIO_Init+0x128>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a3d      	ldr	r2, [pc, #244]	; (800086c <MX_GPIO_Init+0x128>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_GPIO_Init+0x128>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <MX_GPIO_Init+0x128>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <MX_GPIO_Init+0x128>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <MX_GPIO_Init+0x128>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <MX_GPIO_Init+0x128>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a31      	ldr	r2, [pc, #196]	; (800086c <MX_GPIO_Init+0x128>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_GPIO_Init+0x128>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_green_Pin|LED_yellow_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2103      	movs	r1, #3
 80007be:	482c      	ldr	r0, [pc, #176]	; (8000870 <MX_GPIO_Init+0x12c>)
 80007c0:	f000 fe82 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2120      	movs	r1, #32
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 fe7c 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	4827      	ldr	r0, [pc, #156]	; (8000874 <MX_GPIO_Init+0x130>)
 80007d6:	f000 fe77 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x134>)
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4820      	ldr	r0, [pc, #128]	; (8000870 <MX_GPIO_Init+0x12c>)
 80007f0:	f000 fca8 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_green_Pin LED_yellow_Pin */
  GPIO_InitStruct.Pin = LED_green_Pin|LED_yellow_Pin;
 80007f4:	2303      	movs	r3, #3
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <MX_GPIO_Init+0x12c>)
 800080c:	f000 fc9a 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_down_Pin Button_up_Pin */
  GPIO_InitStruct.Pin = Button_down_Pin|Button_up_Pin;
 8000810:	2312      	movs	r3, #18
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f000 fc8d 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f000 fc7e 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_red_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_red_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_GPIO_Init+0x130>)
 8000860:	f000 fc70 	bl	8001144 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800
 8000874:	48000400 	.word	0x48000400
 8000878:	10210000 	.word	0x10210000

0800087c <HAL_TIM_PeriodElapsedCallback>:
uint16_t counter0_matrix =0xFF, counter1_matrix= 0xFF;
uint16_t matrix_state;
uint16_t matrix_pin;

//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a6c      	ldr	r2, [pc, #432]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	f040 80d1 	bne.w	8000a30 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		uint8_t button_changed;

		if(HAL_GPIO_ReadPin(Button_up_GPIO_Port, Button_up_Pin)) button_pin |= (1<<button_up);
 800088e:	2110      	movs	r1, #16
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fe00 	bl	8001498 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d007      	beq.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x32>
 800089e:	4b67      	ldr	r3, [pc, #412]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b64      	ldr	r3, [pc, #400]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e006      	b.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x40>
		else button_pin &= ~(1<<button_up);
 80008ae:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b60      	ldr	r3, [pc, #384]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008ba:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(Button_down_GPIO_Port, Button_down_Pin)) button_pin |= (1<<button_down);
 80008bc:	2102      	movs	r1, #2
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 fde9 	bl	8001498 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d007      	beq.n	80008dc <HAL_TIM_PeriodElapsedCallback+0x60>
 80008cc:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e006      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x6e>
		else button_pin &= ~(1<<button_down);
 80008dc:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f023 0302 	bic.w	r3, r3, #2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008e8:	701a      	strb	r2, [r3, #0]

		button_changed = button_state ^ button_pin; //bit = 1 -> button changed
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4053      	eors	r3, r2
 80008f4:	73fb      	strb	r3, [r7, #15]

		// count to 4 or reset if button_changed != 1	Round:	1	|	2	|	3	|	4	|
		counter0 = ~(counter0 & button_changed);		//0	|	1	|	0	|	1	|
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	4013      	ands	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000906:	701a      	strb	r2, [r3, #0]
		counter1 = counter0 ^ (counter1 & button_changed);	//1	|	0	|	0	|	1	|
 8000908:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	4013      	ands	r3, r2
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4053      	eors	r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800091c:	701a      	strb	r2, [r3, #0]

		button_changed &= counter0 & counter1; //change button state only if timer rolls over!
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b49      	ldr	r3, [pc, #292]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4013      	ands	r3, r2
 8000928:	b2da      	uxtb	r2, r3
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4013      	ands	r3, r2
 800092e:	73fb      	strb	r3, [r7, #15]
		button_state ^= button_changed; //toggle state
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	4053      	eors	r3, r2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800093c:	701a      	strb	r2, [r3, #0]

		//count how long button up is pressed in 10 ms
		if(button_state & (1<<button_up)) counter_up++;
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d005      	beq.n	8000956 <HAL_TIM_PeriodElapsedCallback+0xda>
 800094a:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000954:	701a      	strb	r2, [r3, #0]

		//count how long button down is pressed in 10 ms
		if(button_state & (1<<button_down)) counter_down++;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d005      	beq.n	800096e <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800096c:	701a      	strb	r2, [r3, #0]

		if(~button_state & button_changed & (1<<button_up)){// stopped pressing button up
 800096e:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	43da      	mvns	r2, r3
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4013      	ands	r3, r2
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00f      	beq.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x124>
			counter += (counter_up >= 100) ? 10 : 1; //increase counter with 10 if button is pressed longer than 1 sec, else increase 1
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	d901      	bls.n	800098c <HAL_TIM_PeriodElapsedCallback+0x110>
 8000988:	220a      	movs	r2, #10
 800098a:	e000      	b.n	800098e <HAL_TIM_PeriodElapsedCallback+0x112>
 800098c:	2201      	movs	r2, #1
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000998:	701a      	strb	r2, [r3, #0]
			counter_up = 0; //reset counter
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
		}

		if(~button_state & button_changed & (1<<button_down)){// stopped pressing button down
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	43da      	mvns	r2, r3
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4013      	ands	r3, r2
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00f      	beq.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x156>
			counter -= (counter_down >= 100) ? 10 : 1; //decrease counter with 10 if button is pressed longer than 1 sec, else decrease 1
 80009b2:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b63      	cmp	r3, #99	; 0x63
 80009bc:	d901      	bls.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x146>
 80009be:	230a      	movs	r3, #10
 80009c0:	e000      	b.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x148>
 80009c2:	2301      	movs	r3, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80009ca:	701a      	strb	r2, [r3, #0]
			counter_down = 0; //reset counter
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]

		uint16_t matrix_changed;

		//Todo: read matrix into matrix_pin

		matrix_changed = matrix_state ^ matrix_pin;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	4053      	eors	r3, r2
 80009dc:	81bb      	strh	r3, [r7, #12]
		counter0_matrix = ~(counter0_matrix & matrix_changed);
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	4013      	ands	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80009ee:	801a      	strh	r2, [r3, #0]
		counter1_matrix = counter0_matrix ^ (counter1_matrix & matrix_changed);
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80009f2:	881a      	ldrh	r2, [r3, #0]
 80009f4:	89bb      	ldrh	r3, [r7, #12]
 80009f6:	4013      	ands	r3, r2
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	4053      	eors	r3, r2
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a04:	801a      	strh	r2, [r3, #0]

		matrix_changed &= counter0_matrix & counter1_matrix;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a08:	881a      	ldrh	r2, [r3, #0]
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	89bb      	ldrh	r3, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	81bb      	strh	r3, [r7, #12]
		matrix_state ^= matrix_changed;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	89bb      	ldrh	r3, [r7, #12]
 8000a1e:	4053      	eors	r3, r2
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000a24:	801a      	strh	r2, [r3, #0]

		printf(matrix_state);
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 ffaa 	bl	8003984 <iprintf>
	}

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000134 	.word	0x20000134
 8000a3c:	200000a0 	.word	0x200000a0
 8000a40:	200000a9 	.word	0x200000a9
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000001 	.word	0x20000001
 8000a4c:	200000a2 	.word	0x200000a2
 8000a50:	20000130 	.word	0x20000130
 8000a54:	200000a8 	.word	0x200000a8
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	200000a6 	.word	0x200000a6
 8000a60:	20000002 	.word	0x20000002
 8000a64:	20000004 	.word	0x20000004

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_TIM_Base_MspInit+0x44>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 faf3 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 fb0c 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40014400 	.word	0x40014400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ac      	sub	sp, #176	; 0xb0
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2288      	movs	r2, #136	; 0x88
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 ff23 	bl	8003974 <memset>
  if(huart->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_UART_MspInit+0xb0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d13b      	bne.n	8000bb0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fb27 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff8a 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b84:	230c      	movs	r3, #12
 8000b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 faca 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	37b0      	adds	r7, #176	; 0xb0
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f968 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c1a:	f002 f841 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000134 	.word	0x20000134

08000c28 <_read>:
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f3af 8000 	nop.w
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
 8000d34:	f002 fdf4 	bl	8003920 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20018000 	.word	0x20018000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000094 	.word	0x20000094
 8000d6c:	20000198 	.word	0x20000198

08000d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <SystemInit+0x5c>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <SystemInit+0x5c>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <SystemInit+0x60>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <SystemInit+0x60>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <SystemInit+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <SystemInit+0x60>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <SystemInit+0x60>)
 8000d9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000da0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000da4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <SystemInit+0x60>)
 8000da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <SystemInit+0x60>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SystemInit+0x60>)
 8000db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SystemInit+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <Reset_Handler>:
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopForever+0x2>
 8000dd8:	f7ff ffca 	bl	8000d70 <SystemInit>
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e003      	b.n	8000de8 <LoopCopyDataInit>

08000de0 <CopyDataInit>:
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <LoopForever+0x6>)
 8000de2:	585b      	ldr	r3, [r3, r1]
 8000de4:	5043      	str	r3, [r0, r1]
 8000de6:	3104      	adds	r1, #4

08000de8 <LoopCopyDataInit>:
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <LoopForever+0xa>)
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <LoopForever+0xe>)
 8000dec:	1842      	adds	r2, r0, r1
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3f6      	bcc.n	8000de0 <CopyDataInit>
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopForever+0x12>)
 8000df4:	e002      	b.n	8000dfc <LoopFillZerobss>

08000df6 <FillZerobss>:
 8000df6:	2300      	movs	r3, #0
 8000df8:	f842 3b04 	str.w	r3, [r2], #4

08000dfc <LoopFillZerobss>:
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LoopForever+0x16>)
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3f9      	bcc.n	8000df6 <FillZerobss>
 8000e02:	f002 fd93 	bl	800392c <__libc_init_array>
 8000e06:	f7ff fbaf 	bl	8000568 <main>

08000e0a <LoopForever>:
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
 8000e0c:	20018000 	.word	0x20018000
 8000e10:	08004938 	.word	0x08004938
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000078 	.word	0x20000078
 8000e1c:	20000078 	.word	0x20000078
 8000e20:	20000194 	.word	0x20000194

08000e24 <ADC1_2_IRQHandler>:
 8000e24:	e7fe      	b.n	8000e24 <ADC1_2_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_Init+0x3c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_Init+0x3c>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f93e 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f80f 	bl	8000e68 <HAL_InitTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	e001      	b.n	8000e5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e56:	f7ff fe0d 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_InitTick+0x6c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d023      	beq.n	8000ec4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_InitTick+0x70>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f949 	bl	800112a <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d809      	bhi.n	8000eb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	f000 f913 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_InitTick+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e004      	b.n	8000ec8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e001      	b.n	8000ec8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000010 	.word	0x20000010
 8000f04:	20000180 	.word	0x20000180

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000180 	.word	0x20000180

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e17f      	b.n	8001454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8171 	beq.w	800144e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00b      	beq.n	800118c <HAL_GPIO_Init+0x48>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	2b11      	cmp	r3, #17
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b12      	cmp	r3, #18
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 0201 	and.w	r2, r3, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d118      	bne.n	800122c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001200:	2201      	movs	r2, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	f003 0201 	and.w	r2, r3, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x128>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80ac 	beq.w	800144e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x242>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x23a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x236>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x232>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x22a>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_GPIO_Init+0x334>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_GPIO_Init+0x350>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae78 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	48001800 	.word	0x48001800
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e001      	b.n	80014ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_PWREx_GetVoltageRange+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40007000 	.word	0x40007000

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001522:	d130      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800152c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001530:	d038      	beq.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2232      	movs	r2, #50	; 0x32
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0c9b      	lsrs	r3, r3, #18
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	e002      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156c:	d102      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f2      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001580:	d110      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e00f      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d007      	beq.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40007000 	.word	0x40007000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	431bde83 	.word	0x431bde83

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3d4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d2:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80e4 	beq.w	80017bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_RCC_OscConfig+0x4a>
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	f040 808b 	bne.w	8001718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b01      	cmp	r3, #1
 8001606:	f040 8087 	bne.w	8001718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160a:	4b93      	ldr	r3, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x62>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e3ac      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1a      	ldr	r2, [r3, #32]
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_RCC_OscConfig+0x7c>
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	e005      	b.n	8001648 <HAL_RCC_OscConfig+0x88>
 800163c:	4b86      	ldr	r3, [pc, #536]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001648:	4293      	cmp	r3, r2
 800164a:	d223      	bcs.n	8001694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd41 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e38d      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4977      	ldr	r1, [pc, #476]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4972      	ldr	r1, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e025      	b.n	80016e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	496a      	ldr	r1, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4965      	ldr	r1, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd01 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e34d      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e0:	f000 fc36 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	495a      	ldr	r1, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x29c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x2a0>)
 80016fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x2a4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fbaf 	bl	8000e68 <HAL_InitTick>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d052      	beq.n	80017ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	e331      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d032      	beq.n	8001786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001720:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172c:	f7ff fbec 	bl	8000f08 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fbe8 	bl	8000f08 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e31a      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001746:	4b44      	ldr	r3, [pc, #272]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a40      	ldr	r2, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	493b      	ldr	r1, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	4936      	ldr	r1, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e01a      	b.n	80017bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001792:	f7ff fbb9 	bl	8000f08 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179a:	f7ff fbb5 	bl	8000f08 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e2e7      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x1da>
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d074      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x21a>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d10e      	bne.n	80017f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d064      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d160      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e2c4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x24a>
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e01d      	b.n	8001846 <HAL_RCC_OscConfig+0x286>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x26e>
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x286>
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01c      	beq.n	8001888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fb5b 	bl	8000f08 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001854:	e011      	b.n	800187a <HAL_RCC_OscConfig+0x2ba>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	08004848 	.word	0x08004848
 8001860:	20000008 	.word	0x20000008
 8001864:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb4e 	bl	8000f08 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e280      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4baf      	ldr	r3, [pc, #700]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x2a8>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb3e 	bl	8000f08 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fb3a 	bl	8000f08 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e26c      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	4ba5      	ldr	r3, [pc, #660]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x2d0>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d060      	beq.n	8001980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x310>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	4b99      	ldr	r3, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x328>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e249      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b93      	ldr	r3, [pc, #588]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	4990      	ldr	r1, [pc, #576]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	e040      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d023      	beq.n	800194e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a8b      	ldr	r2, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff faf9 	bl	8000f08 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff faf5 	bl	8000f08 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e227      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	497c      	ldr	r1, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fad5 	bl	8000f08 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fad1 	bl	8000f08 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e203      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001974:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fab0 	bl	8000f08 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff faac 	bl	8000f08 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1de      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x3ec>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fa93 	bl	8000f08 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fa8f 	bl	8000f08 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1c1      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ef      	bne.n	80019e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a6 	beq.w	8001b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10d      	bne.n	8001a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d118      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a4c:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fa56 	bl	8000f08 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f7ff fa52 	bl	8000f08 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e184      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4d8>
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a96:	e024      	b.n	8001ae2 <HAL_RCC_OscConfig+0x522>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d110      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x502>
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac0:	e00f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x522>
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f023 0304 	bic.w	r3, r3, #4
 8001ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff fa0d 	bl	8000f08 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fa09 	bl	8000f08 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e139      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ed      	beq.n	8001af2 <HAL_RCC_OscConfig+0x532>
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f9f6 	bl	8000f08 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f9f2 	bl	8000f08 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d906      	bls.n	8001b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e122      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e8      	bne.n	8001b20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a8a      	ldr	r2, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8108 	beq.w	8001d7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	f040 80d0 	bne.w	8001d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b74:	4b83      	ldr	r3, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d130      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	3b01      	subs	r3, #1
 8001b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d127      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11f      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb4:	2a07      	cmp	r2, #7
 8001bb6:	bf14      	ite	ne
 8001bb8:	2201      	movne	r2, #1
 8001bba:	2200      	moveq	r2, #0
 8001bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d113      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d06e      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d069      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bfc:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b7      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c18:	f7ff f976 	bl	8000f08 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f972 	bl	8000f08 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0a4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <HAL_RCC_OscConfig+0x7c8>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c58:	0212      	lsls	r2, r2, #8
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c60:	0852      	lsrs	r2, r2, #1
 8001c62:	3a01      	subs	r2, #1
 8001c64:	0552      	lsls	r2, r2, #21
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c6c:	0852      	lsrs	r2, r2, #1
 8001c6e:	3a01      	subs	r2, #1
 8001c70:	0652      	lsls	r2, r2, #25
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c78:	0912      	lsrs	r2, r2, #4
 8001c7a:	0452      	lsls	r2, r2, #17
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4941      	ldr	r1, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c9c:	f7ff f934 	bl	8000f08 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f930 	bl	8000f08 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e062      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc2:	e05a      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e059      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d152      	bne.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cec:	f7ff f90c 	bl	8000f08 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f908 	bl	8000f08 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e03a      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x734>
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d02d      	beq.n	8001d76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d38:	f023 0303 	bic.w	r3, r3, #3
 8001d3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f8db 	bl	8000f08 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff f8d7 	bl	8000f08 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x796>
 8001d74:	e001      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	f99d808c 	.word	0xf99d808c

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0c8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4961      	ldr	r1, [pc, #388]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d04c      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d121      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e09e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d115      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e092      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e086      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e07e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e34:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 0203 	bic.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	493f      	ldr	r1, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e46:	f7ff f85f 	bl	8000f08 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f85b 	bl	8000f08 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e066      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 020c 	and.w	r2, r3, #12
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1eb      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	492c      	ldr	r1, [pc, #176]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4924      	ldr	r1, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e036      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4910      	ldr	r1, [pc, #64]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f02:	f000 f825 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490c      	ldr	r1, [pc, #48]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ff9e 	bl	8000e68 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08004848 	.word	0x08004848
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	2000000c 	.word	0x2000000c

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d11e      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e004      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d134      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0xac>
 8001ff4:	e005      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffe:	617b      	str	r3, [r7, #20]
      break;
 8002000:	e002      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	3301      	adds	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	fb02 f203 	mul.w	r2, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	0e5b      	lsrs	r3, r3, #25
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	3301      	adds	r3, #1
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002048:	69bb      	ldr	r3, [r7, #24]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	08004860 	.word	0x08004860
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08004858 	.word	0x08004858

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b0:	f7ff ffda 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0adb      	lsrs	r3, r3, #11
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004858 	.word	0x08004858

080020d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff fa02 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
 80020f6:	e014      	b.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9f2 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002128:	d10b      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d919      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2ba0      	cmp	r3, #160	; 0xa0
 8002134:	d902      	bls.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e013      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e010      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d902      	bls.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002148:	2303      	movs	r3, #3
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e00a      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d102      	bne.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e004      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b70      	cmp	r3, #112	; 0x70
 800215e:	d101      	bne.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0207 	bic.w	r2, r3, #7
 800216c:	4909      	ldr	r1, [pc, #36]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a0:	2300      	movs	r3, #0
 80021a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d041      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021bc:	d02a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c2:	d824      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c8:	d008      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ce:	d81e      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d8:	d010      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021da:	e018      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021dc:	4b86      	ldr	r3, [pc, #536]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a85      	ldr	r2, [pc, #532]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e8:	e015      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fabb 	bl	800276c <RCCEx_PLLSAI1_Config>
 80021f6:	4603      	mov	r3, r0
 80021f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021fa:	e00c      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3320      	adds	r3, #32
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fba6 	bl	8002954 <RCCEx_PLLSAI2_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220c:	e003      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	74fb      	strb	r3, [r7, #19]
      break;
 8002212:	e000      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800221c:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222a:	4973      	ldr	r1, [pc, #460]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002232:	e001      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d041      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002248:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224c:	d02a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800224e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002252:	d824      	bhi.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002258:	d008      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800225a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800225e:	d81e      	bhi.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d010      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800226a:	e018      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800226c:	4b62      	ldr	r3, [pc, #392]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a61      	ldr	r2, [pc, #388]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002278:	e015      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fa73 	bl	800276c <RCCEx_PLLSAI1_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800228a:	e00c      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3320      	adds	r3, #32
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fb5e 	bl	8002954 <RCCEx_PLLSAI2_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229c:	e003      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	74fb      	strb	r3, [r7, #19]
      break;
 80022a2:	e000      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ac:	4b52      	ldr	r3, [pc, #328]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ba:	494f      	ldr	r1, [pc, #316]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022c2:	e001      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a0 	beq.w	8002416 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	; 0x58
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002308:	2301      	movs	r3, #1
 800230a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3a      	ldr	r2, [pc, #232]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002318:	f7fe fdf6 	bl	8000f08 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800231e:	e009      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe fdf2 	bl	8000f08 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	74fb      	strb	r3, [r7, #19]
        break;
 8002332:	e005      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002350:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	d019      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002390:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fdb1 	bl	8000f08 <HAL_GetTick>
 80023a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a8:	e00b      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fdad 	bl	8000f08 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d902      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	74fb      	strb	r3, [r7, #19]
            break;
 80023c0:	e006      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ec      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e6:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ee:	e009      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
 80023f4:	e006      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002404:	7c7b      	ldrb	r3, [r7, #17]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d105      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240a:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a9d      	ldr	r2, [pc, #628]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002422:	4b98      	ldr	r3, [pc, #608]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 0203 	bic.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	4994      	ldr	r1, [pc, #592]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002444:	4b8f      	ldr	r3, [pc, #572]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 020c 	bic.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	498c      	ldr	r1, [pc, #560]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002466:	4b87      	ldr	r3, [pc, #540]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4983      	ldr	r1, [pc, #524]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	497b      	ldr	r1, [pc, #492]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	4972      	ldr	r1, [pc, #456]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	496a      	ldr	r1, [pc, #424]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	4961      	ldr	r1, [pc, #388]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002510:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	4959      	ldr	r1, [pc, #356]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002532:	4b54      	ldr	r3, [pc, #336]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	4950      	ldr	r1, [pc, #320]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	4948      	ldr	r1, [pc, #288]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	493f      	ldr	r1, [pc, #252]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d028      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a6:	4937      	ldr	r1, [pc, #220]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a31      	ldr	r2, [pc, #196]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e011      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ce:	d10c      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f8c8 	bl	800276c <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002614:	d106      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	e011      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800262c:	d10c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f899 	bl	800276c <RCCEx_PLLSAI1_Config>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02b      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002672:	d109      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a02      	ldr	r2, [pc, #8]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267e:	60d3      	str	r3, [r2, #12]
 8002680:	e014      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f867 	bl	800276c <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02f      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c6:	4928      	ldr	r1, [pc, #160]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f844 	bl	800276c <RCCEx_PLLSAI1_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	74bb      	strb	r3, [r7, #18]
 80026f2:	e011      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3320      	adds	r3, #32
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f925 	bl	8002954 <RCCEx_PLLSAI2_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002732:	490d      	ldr	r1, [pc, #52]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800275e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0203 	and.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d10d      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
       ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800279e:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
       ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d047      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e044      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d018      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x86>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d825      	bhi.n	8002810 <RCCEx_PLLSAI1_Config+0xa4>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0x62>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d009      	beq.n	80027e0 <RCCEx_PLLSAI1_Config+0x74>
 80027cc:	e020      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ce:	4b60      	ldr	r3, [pc, #384]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027de:	e01a      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e0:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d116      	bne.n	800281a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e013      	b.n	800281a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f2:	4b57      	ldr	r3, [pc, #348]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800280e:	e006      	b.n	800281e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e004      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002826:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	430b      	orrs	r3, r1
 800283c:	4944      	ldr	r1, [pc, #272]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d17d      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a40      	ldr	r2, [pc, #256]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb58 	bl	8000f08 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800285a:	e009      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800285c:	f7fe fb54 	bl	8000f08 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	73fb      	strb	r3, [r7, #15]
        break;
 800286e:	e005      	b.n	800287c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ef      	bne.n	800285c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d160      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	0211      	lsls	r1, r2, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	0912      	lsrs	r2, r2, #4
 80028a0:	0452      	lsls	r2, r2, #17
 80028a2:	430a      	orrs	r2, r1
 80028a4:	492a      	ldr	r1, [pc, #168]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	610b      	str	r3, [r1, #16]
 80028aa:	e027      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d112      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	0211      	lsls	r1, r2, #8
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6912      	ldr	r2, [r2, #16]
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0552      	lsls	r2, r2, #21
 80028ce:	430a      	orrs	r2, r1
 80028d0:	491f      	ldr	r1, [pc, #124]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	610b      	str	r3, [r1, #16]
 80028d6:	e011      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	0211      	lsls	r1, r2, #8
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6952      	ldr	r2, [r2, #20]
 80028ee:	0852      	lsrs	r2, r2, #1
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0652      	lsls	r2, r2, #25
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4916      	ldr	r1, [pc, #88]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fafe 	bl	8000f08 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002910:	f7fe fafa 	bl	8000f08 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
          break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4904      	ldr	r1, [pc, #16]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0203 	and.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d10d      	bne.n	800299a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
       ||
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
       ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d047      	beq.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e044      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d018      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x86>
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d825      	bhi.n	80029f8 <RCCEx_PLLSAI2_Config+0xa4>
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d002      	beq.n	80029b6 <RCCEx_PLLSAI2_Config+0x62>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d009      	beq.n	80029c8 <RCCEx_PLLSAI2_Config+0x74>
 80029b4:	e020      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b6:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d11d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c6:	e01a      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e013      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029f6:	e006      	b.n	8002a06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e004      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	430b      	orrs	r3, r1
 8002a24:	4939      	ldr	r1, [pc, #228]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d167      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a35      	ldr	r2, [pc, #212]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fa64 	bl	8000f08 <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a42:	e009      	b.n	8002a58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a44:	f7fe fa60 	bl	8000f08 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	73fb      	strb	r3, [r7, #15]
        break;
 8002a56:	e005      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ef      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d14a      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	0211      	lsls	r1, r2, #8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	0912      	lsrs	r2, r2, #4
 8002a88:	0452      	lsls	r2, r2, #17
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	491f      	ldr	r1, [pc, #124]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	614b      	str	r3, [r1, #20]
 8002a92:	e011      	b.n	8002ab8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6912      	ldr	r2, [r2, #16]
 8002aaa:	0852      	lsrs	r2, r2, #1
 8002aac:	3a01      	subs	r2, #1
 8002aae:	0652      	lsls	r2, r2, #25
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4916      	ldr	r1, [pc, #88]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fa20 	bl	8000f08 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aca:	e009      	b.n	8002ae0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002acc:	f7fe fa1c 	bl	8000f08 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ade:	e005      	b.n	8002aec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e049      	b.n	8002bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd ffc0 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f000 f9ee 	bl	8002f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d018      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_Base_Start_IT+0x76>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d115      	bne.n	8002c62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d015      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0xb4>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d011      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e008      	b.n	8002c74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e000      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40013400 	.word	0x40013400
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	00010007 	.word	0x00010007

08002ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0202 	mvn.w	r2, #2
 8002ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f905 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8f7 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f908 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0204 	mvn.w	r2, #4
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8db 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8cd 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8de 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0208 	mvn.w	r2, #8
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8b1 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8a3 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8b4 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0210 	mvn.w	r2, #16
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f887 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f879 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f88a 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0201 	mvn.w	r2, #1
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd fd2c 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f914 	bl	8003078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d10e      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f907 	bl	800308c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d10e      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f838 	bl	8002f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d107      	bne.n	8002ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0220 	mvn.w	r2, #32
 8002ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8c7 	bl	8003064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a40      	ldr	r2, [pc, #256]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d00f      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	; (8003048 <TIM_Base_SetConfig+0x118>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <TIM_Base_SetConfig+0x11c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <TIM_Base_SetConfig+0x120>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <TIM_Base_SetConfig+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d01b      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <TIM_Base_SetConfig+0x118>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d017      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <TIM_Base_SetConfig+0x11c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <TIM_Base_SetConfig+0x120>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00f      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0x124>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <TIM_Base_SetConfig+0x128>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <TIM_Base_SetConfig+0x12c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <TIM_Base_SetConfig+0x9a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a26      	ldr	r2, [pc, #152]	; (8003060 <TIM_Base_SetConfig+0x130>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a10      	ldr	r2, [pc, #64]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00f      	beq.n	8003028 <TIM_Base_SetConfig+0xf8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <TIM_Base_SetConfig+0x124>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00b      	beq.n	8003028 <TIM_Base_SetConfig+0xf8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <TIM_Base_SetConfig+0x128>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_Base_SetConfig+0xf8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <TIM_Base_SetConfig+0x12c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0xf8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <TIM_Base_SetConfig+0x130>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40013400 	.word	0x40013400
 8003058:	40014000 	.word	0x40014000
 800305c:	40014400 	.word	0x40014400
 8003060:	40014800 	.word	0x40014800

08003064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e040      	b.n	8003134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fd20 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	; 0x24
 80030cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f82c 	bl	800313c <UART_SetConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 faaa 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb31 	bl	8003794 <UART_CheckIdleState>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4bad      	ldr	r3, [pc, #692]	; (800341c <UART_SetConfig+0x2e0>)
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	69f9      	ldr	r1, [r7, #28]
 8003170:	430b      	orrs	r3, r1
 8003172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4aa2      	ldr	r2, [pc, #648]	; (8003420 <UART_SetConfig+0x2e4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a99      	ldr	r2, [pc, #612]	; (8003424 <UART_SetConfig+0x2e8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d121      	bne.n	8003206 <UART_SetConfig+0xca>
 80031c2:	4b99      	ldr	r3, [pc, #612]	; (8003428 <UART_SetConfig+0x2ec>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d817      	bhi.n	8003200 <UART_SetConfig+0xc4>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0x9c>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f5 	.word	0x080031f5
 80031e0:	080031ef 	.word	0x080031ef
 80031e4:	080031fb 	.word	0x080031fb
 80031e8:	2301      	movs	r3, #1
 80031ea:	76fb      	strb	r3, [r7, #27]
 80031ec:	e0e7      	b.n	80033be <UART_SetConfig+0x282>
 80031ee:	2302      	movs	r3, #2
 80031f0:	76fb      	strb	r3, [r7, #27]
 80031f2:	e0e4      	b.n	80033be <UART_SetConfig+0x282>
 80031f4:	2304      	movs	r3, #4
 80031f6:	76fb      	strb	r3, [r7, #27]
 80031f8:	e0e1      	b.n	80033be <UART_SetConfig+0x282>
 80031fa:	2308      	movs	r3, #8
 80031fc:	76fb      	strb	r3, [r7, #27]
 80031fe:	e0de      	b.n	80033be <UART_SetConfig+0x282>
 8003200:	2310      	movs	r3, #16
 8003202:	76fb      	strb	r3, [r7, #27]
 8003204:	e0db      	b.n	80033be <UART_SetConfig+0x282>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a88      	ldr	r2, [pc, #544]	; (800342c <UART_SetConfig+0x2f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d132      	bne.n	8003276 <UART_SetConfig+0x13a>
 8003210:	4b85      	ldr	r3, [pc, #532]	; (8003428 <UART_SetConfig+0x2ec>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d828      	bhi.n	8003270 <UART_SetConfig+0x134>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0xe8>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003259 	.word	0x08003259
 8003228:	08003271 	.word	0x08003271
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003265 	.word	0x08003265
 8003238:	08003271 	.word	0x08003271
 800323c:	08003271 	.word	0x08003271
 8003240:	08003271 	.word	0x08003271
 8003244:	0800325f 	.word	0x0800325f
 8003248:	08003271 	.word	0x08003271
 800324c:	08003271 	.word	0x08003271
 8003250:	08003271 	.word	0x08003271
 8003254:	0800326b 	.word	0x0800326b
 8003258:	2300      	movs	r3, #0
 800325a:	76fb      	strb	r3, [r7, #27]
 800325c:	e0af      	b.n	80033be <UART_SetConfig+0x282>
 800325e:	2302      	movs	r3, #2
 8003260:	76fb      	strb	r3, [r7, #27]
 8003262:	e0ac      	b.n	80033be <UART_SetConfig+0x282>
 8003264:	2304      	movs	r3, #4
 8003266:	76fb      	strb	r3, [r7, #27]
 8003268:	e0a9      	b.n	80033be <UART_SetConfig+0x282>
 800326a:	2308      	movs	r3, #8
 800326c:	76fb      	strb	r3, [r7, #27]
 800326e:	e0a6      	b.n	80033be <UART_SetConfig+0x282>
 8003270:	2310      	movs	r3, #16
 8003272:	76fb      	strb	r3, [r7, #27]
 8003274:	e0a3      	b.n	80033be <UART_SetConfig+0x282>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6d      	ldr	r2, [pc, #436]	; (8003430 <UART_SetConfig+0x2f4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d120      	bne.n	80032c2 <UART_SetConfig+0x186>
 8003280:	4b69      	ldr	r3, [pc, #420]	; (8003428 <UART_SetConfig+0x2ec>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800328a:	2b30      	cmp	r3, #48	; 0x30
 800328c:	d013      	beq.n	80032b6 <UART_SetConfig+0x17a>
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d814      	bhi.n	80032bc <UART_SetConfig+0x180>
 8003292:	2b20      	cmp	r3, #32
 8003294:	d009      	beq.n	80032aa <UART_SetConfig+0x16e>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d810      	bhi.n	80032bc <UART_SetConfig+0x180>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x168>
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d006      	beq.n	80032b0 <UART_SetConfig+0x174>
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x180>
 80032a4:	2300      	movs	r3, #0
 80032a6:	76fb      	strb	r3, [r7, #27]
 80032a8:	e089      	b.n	80033be <UART_SetConfig+0x282>
 80032aa:	2302      	movs	r3, #2
 80032ac:	76fb      	strb	r3, [r7, #27]
 80032ae:	e086      	b.n	80033be <UART_SetConfig+0x282>
 80032b0:	2304      	movs	r3, #4
 80032b2:	76fb      	strb	r3, [r7, #27]
 80032b4:	e083      	b.n	80033be <UART_SetConfig+0x282>
 80032b6:	2308      	movs	r3, #8
 80032b8:	76fb      	strb	r3, [r7, #27]
 80032ba:	e080      	b.n	80033be <UART_SetConfig+0x282>
 80032bc:	2310      	movs	r3, #16
 80032be:	76fb      	strb	r3, [r7, #27]
 80032c0:	e07d      	b.n	80033be <UART_SetConfig+0x282>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5b      	ldr	r2, [pc, #364]	; (8003434 <UART_SetConfig+0x2f8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d120      	bne.n	800330e <UART_SetConfig+0x1d2>
 80032cc:	4b56      	ldr	r3, [pc, #344]	; (8003428 <UART_SetConfig+0x2ec>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032d6:	2bc0      	cmp	r3, #192	; 0xc0
 80032d8:	d013      	beq.n	8003302 <UART_SetConfig+0x1c6>
 80032da:	2bc0      	cmp	r3, #192	; 0xc0
 80032dc:	d814      	bhi.n	8003308 <UART_SetConfig+0x1cc>
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d009      	beq.n	80032f6 <UART_SetConfig+0x1ba>
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d810      	bhi.n	8003308 <UART_SetConfig+0x1cc>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <UART_SetConfig+0x1b4>
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d006      	beq.n	80032fc <UART_SetConfig+0x1c0>
 80032ee:	e00b      	b.n	8003308 <UART_SetConfig+0x1cc>
 80032f0:	2300      	movs	r3, #0
 80032f2:	76fb      	strb	r3, [r7, #27]
 80032f4:	e063      	b.n	80033be <UART_SetConfig+0x282>
 80032f6:	2302      	movs	r3, #2
 80032f8:	76fb      	strb	r3, [r7, #27]
 80032fa:	e060      	b.n	80033be <UART_SetConfig+0x282>
 80032fc:	2304      	movs	r3, #4
 80032fe:	76fb      	strb	r3, [r7, #27]
 8003300:	e05d      	b.n	80033be <UART_SetConfig+0x282>
 8003302:	2308      	movs	r3, #8
 8003304:	76fb      	strb	r3, [r7, #27]
 8003306:	e05a      	b.n	80033be <UART_SetConfig+0x282>
 8003308:	2310      	movs	r3, #16
 800330a:	76fb      	strb	r3, [r7, #27]
 800330c:	e057      	b.n	80033be <UART_SetConfig+0x282>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a49      	ldr	r2, [pc, #292]	; (8003438 <UART_SetConfig+0x2fc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d125      	bne.n	8003364 <UART_SetConfig+0x228>
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <UART_SetConfig+0x2ec>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003326:	d017      	beq.n	8003358 <UART_SetConfig+0x21c>
 8003328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332c:	d817      	bhi.n	800335e <UART_SetConfig+0x222>
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d00b      	beq.n	800334c <UART_SetConfig+0x210>
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d811      	bhi.n	800335e <UART_SetConfig+0x222>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <UART_SetConfig+0x20a>
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d006      	beq.n	8003352 <UART_SetConfig+0x216>
 8003344:	e00b      	b.n	800335e <UART_SetConfig+0x222>
 8003346:	2300      	movs	r3, #0
 8003348:	76fb      	strb	r3, [r7, #27]
 800334a:	e038      	b.n	80033be <UART_SetConfig+0x282>
 800334c:	2302      	movs	r3, #2
 800334e:	76fb      	strb	r3, [r7, #27]
 8003350:	e035      	b.n	80033be <UART_SetConfig+0x282>
 8003352:	2304      	movs	r3, #4
 8003354:	76fb      	strb	r3, [r7, #27]
 8003356:	e032      	b.n	80033be <UART_SetConfig+0x282>
 8003358:	2308      	movs	r3, #8
 800335a:	76fb      	strb	r3, [r7, #27]
 800335c:	e02f      	b.n	80033be <UART_SetConfig+0x282>
 800335e:	2310      	movs	r3, #16
 8003360:	76fb      	strb	r3, [r7, #27]
 8003362:	e02c      	b.n	80033be <UART_SetConfig+0x282>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <UART_SetConfig+0x2e4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d125      	bne.n	80033ba <UART_SetConfig+0x27e>
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <UART_SetConfig+0x2ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800337c:	d017      	beq.n	80033ae <UART_SetConfig+0x272>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d817      	bhi.n	80033b4 <UART_SetConfig+0x278>
 8003384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003388:	d00b      	beq.n	80033a2 <UART_SetConfig+0x266>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d811      	bhi.n	80033b4 <UART_SetConfig+0x278>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <UART_SetConfig+0x260>
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d006      	beq.n	80033a8 <UART_SetConfig+0x26c>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x278>
 800339c:	2300      	movs	r3, #0
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e00d      	b.n	80033be <UART_SetConfig+0x282>
 80033a2:	2302      	movs	r3, #2
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e00a      	b.n	80033be <UART_SetConfig+0x282>
 80033a8:	2304      	movs	r3, #4
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e007      	b.n	80033be <UART_SetConfig+0x282>
 80033ae:	2308      	movs	r3, #8
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e004      	b.n	80033be <UART_SetConfig+0x282>
 80033b4:	2310      	movs	r3, #16
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e001      	b.n	80033be <UART_SetConfig+0x282>
 80033ba:	2310      	movs	r3, #16
 80033bc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <UART_SetConfig+0x2e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f040 8087 	bne.w	80034d8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ca:	7efb      	ldrb	r3, [r7, #27]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d837      	bhi.n	8003440 <UART_SetConfig+0x304>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0x29c>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	08003441 	.word	0x08003441
 80033e0:	08003405 	.word	0x08003405
 80033e4:	08003441 	.word	0x08003441
 80033e8:	0800340b 	.word	0x0800340b
 80033ec:	08003441 	.word	0x08003441
 80033f0:	08003441 	.word	0x08003441
 80033f4:	08003441 	.word	0x08003441
 80033f8:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7fe fe40 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003400:	6178      	str	r0, [r7, #20]
        break;
 8003402:	e022      	b.n	800344a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <UART_SetConfig+0x300>)
 8003406:	617b      	str	r3, [r7, #20]
        break;
 8003408:	e01f      	b.n	800344a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fda1 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800340e:	6178      	str	r0, [r7, #20]
        break;
 8003410:	e01b      	b.n	800344a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	617b      	str	r3, [r7, #20]
        break;
 8003418:	e017      	b.n	800344a <UART_SetConfig+0x30e>
 800341a:	bf00      	nop
 800341c:	efff69f3 	.word	0xefff69f3
 8003420:	40008000 	.word	0x40008000
 8003424:	40013800 	.word	0x40013800
 8003428:	40021000 	.word	0x40021000
 800342c:	40004400 	.word	0x40004400
 8003430:	40004800 	.word	0x40004800
 8003434:	40004c00 	.word	0x40004c00
 8003438:	40005000 	.word	0x40005000
 800343c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	76bb      	strb	r3, [r7, #26]
        break;
 8003448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80f1 	beq.w	8003634 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	429a      	cmp	r2, r3
 8003460:	d305      	bcc.n	800346e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	d902      	bls.n	8003474 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	76bb      	strb	r3, [r7, #26]
 8003472:	e0df      	b.n	8003634 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4618      	mov	r0, r3
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	020b      	lsls	r3, r1, #8
 8003486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800348a:	0202      	lsls	r2, r0, #8
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	6849      	ldr	r1, [r1, #4]
 8003490:	0849      	lsrs	r1, r1, #1
 8003492:	4608      	mov	r0, r1
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	1814      	adds	r4, r2, r0
 800349a:	eb43 0501 	adc.w	r5, r3, r1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	4620      	mov	r0, r4
 80034aa:	4629      	mov	r1, r5
 80034ac:	f7fc fee0 	bl	8000270 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034be:	d308      	bcc.n	80034d2 <UART_SetConfig+0x396>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d204      	bcs.n	80034d2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	e0b0      	b.n	8003634 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	76bb      	strb	r3, [r7, #26]
 80034d6:	e0ad      	b.n	8003634 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	d15c      	bne.n	800359c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d828      	bhi.n	800353a <UART_SetConfig+0x3fe>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x3b4>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	08003525 	.word	0x08003525
 80034fc:	0800353b 	.word	0x0800353b
 8003500:	0800352b 	.word	0x0800352b
 8003504:	0800353b 	.word	0x0800353b
 8003508:	0800353b 	.word	0x0800353b
 800350c:	0800353b 	.word	0x0800353b
 8003510:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003514:	f7fe fdb4 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8003518:	6178      	str	r0, [r7, #20]
        break;
 800351a:	e013      	b.n	8003544 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800351c:	f7fe fdc6 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8003520:	6178      	str	r0, [r7, #20]
        break;
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <UART_SetConfig+0x510>)
 8003526:	617b      	str	r3, [r7, #20]
        break;
 8003528:	e00c      	b.n	8003544 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7fe fd11 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800352e:	6178      	str	r0, [r7, #20]
        break;
 8003530:	e008      	b.n	8003544 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	617b      	str	r3, [r7, #20]
        break;
 8003538:	e004      	b.n	8003544 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	76bb      	strb	r3, [r7, #26]
        break;
 8003542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d074      	beq.n	8003634 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005a      	lsls	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d916      	bls.n	8003596 <UART_SetConfig+0x45a>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d212      	bcs.n	8003596 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f023 030f 	bic.w	r3, r3, #15
 8003578:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b29a      	uxth	r2, r3
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	4313      	orrs	r3, r2
 800358a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	89fa      	ldrh	r2, [r7, #14]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e04e      	b.n	8003634 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	76bb      	strb	r3, [r7, #26]
 800359a:	e04b      	b.n	8003634 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359c:	7efb      	ldrb	r3, [r7, #27]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d827      	bhi.n	80035f2 <UART_SetConfig+0x4b6>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0x46c>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035d5 	.word	0x080035d5
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	080035e3 	.word	0x080035e3
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035f3 	.word	0x080035f3
 80035c4:	080035f3 	.word	0x080035f3
 80035c8:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7fe fd58 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 80035d0:	6178      	str	r0, [r7, #20]
        break;
 80035d2:	e013      	b.n	80035fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fd6a 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 80035d8:	6178      	str	r0, [r7, #20]
        break;
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <UART_SetConfig+0x510>)
 80035de:	617b      	str	r3, [r7, #20]
        break;
 80035e0:	e00c      	b.n	80035fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe fcb5 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80035e6:	6178      	str	r0, [r7, #20]
        break;
 80035e8:	e008      	b.n	80035fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	617b      	str	r3, [r7, #20]
        break;
 80035f0:	e004      	b.n	80035fc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	76bb      	strb	r3, [r7, #26]
        break;
 80035fa:	bf00      	nop
    }

    if (pclk != 0U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085a      	lsrs	r2, r3, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	d908      	bls.n	8003630 <UART_SetConfig+0x4f4>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d204      	bcs.n	8003630 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e001      	b.n	8003634 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003640:	7ebb      	ldrb	r3, [r7, #26]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bdb0      	pop	{r4, r5, r7, pc}
 800364a:	bf00      	nop
 800364c:	00f42400 	.word	0x00f42400

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd fbb0 	bl	8000f08 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d10e      	bne.n	80037d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f82d 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e023      	b.n	800381e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d10e      	bne.n	8003802 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f817 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00d      	b.n	800381e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	e05e      	b.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800383e:	d05a      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003840:	f7fd fb62 	bl	8000f08 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <UART_WaitOnFlagUntilTimeout+0x30>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11b      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003864:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e043      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02c      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038aa:	d124      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00f      	b.n	8003916 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d091      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000014 	.word	0x20000014

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f000 ff76 	bl	8004830 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	08004930 	.word	0x08004930
 8003968:	08004930 	.word	0x08004930
 800396c:	08004930 	.word	0x08004930
 8003970:	08004934 	.word	0x08004934

08003974 <memset>:
 8003974:	4402      	add	r2, r0
 8003976:	4603      	mov	r3, r0
 8003978:	4293      	cmp	r3, r2
 800397a:	d100      	bne.n	800397e <memset+0xa>
 800397c:	4770      	bx	lr
 800397e:	f803 1b01 	strb.w	r1, [r3], #1
 8003982:	e7f9      	b.n	8003978 <memset+0x4>

08003984 <iprintf>:
 8003984:	b40f      	push	{r0, r1, r2, r3}
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <iprintf+0x2c>)
 8003988:	b513      	push	{r0, r1, r4, lr}
 800398a:	681c      	ldr	r4, [r3, #0]
 800398c:	b124      	cbz	r4, 8003998 <iprintf+0x14>
 800398e:	69a3      	ldr	r3, [r4, #24]
 8003990:	b913      	cbnz	r3, 8003998 <iprintf+0x14>
 8003992:	4620      	mov	r0, r4
 8003994:	f000 f866 	bl	8003a64 <__sinit>
 8003998:	ab05      	add	r3, sp, #20
 800399a:	9a04      	ldr	r2, [sp, #16]
 800399c:	68a1      	ldr	r1, [r4, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 f983 	bl	8003cac <_vfiprintf_r>
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ac:	b004      	add	sp, #16
 80039ae:	4770      	bx	lr
 80039b0:	20000014 	.word	0x20000014

080039b4 <std>:
 80039b4:	2300      	movs	r3, #0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	e9c0 3300 	strd	r3, r3, [r0]
 80039be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039c2:	6083      	str	r3, [r0, #8]
 80039c4:	8181      	strh	r1, [r0, #12]
 80039c6:	6643      	str	r3, [r0, #100]	; 0x64
 80039c8:	81c2      	strh	r2, [r0, #14]
 80039ca:	6183      	str	r3, [r0, #24]
 80039cc:	4619      	mov	r1, r3
 80039ce:	2208      	movs	r2, #8
 80039d0:	305c      	adds	r0, #92	; 0x5c
 80039d2:	f7ff ffcf 	bl	8003974 <memset>
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x38>)
 80039d8:	6263      	str	r3, [r4, #36]	; 0x24
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <std+0x3c>)
 80039dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <std+0x40>)
 80039e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <std+0x44>)
 80039e4:	6224      	str	r4, [r4, #32]
 80039e6:	6323      	str	r3, [r4, #48]	; 0x30
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	bf00      	nop
 80039ec:	08004255 	.word	0x08004255
 80039f0:	08004277 	.word	0x08004277
 80039f4:	080042af 	.word	0x080042af
 80039f8:	080042d3 	.word	0x080042d3

080039fc <_cleanup_r>:
 80039fc:	4901      	ldr	r1, [pc, #4]	; (8003a04 <_cleanup_r+0x8>)
 80039fe:	f000 b8af 	b.w	8003b60 <_fwalk_reent>
 8003a02:	bf00      	nop
 8003a04:	080045ad 	.word	0x080045ad

08003a08 <__sfmoreglue>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	1e4a      	subs	r2, r1, #1
 8003a0c:	2568      	movs	r5, #104	; 0x68
 8003a0e:	4355      	muls	r5, r2
 8003a10:	460e      	mov	r6, r1
 8003a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a16:	f000 f8c5 	bl	8003ba4 <_malloc_r>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	b140      	cbz	r0, 8003a30 <__sfmoreglue+0x28>
 8003a1e:	2100      	movs	r1, #0
 8003a20:	e9c0 1600 	strd	r1, r6, [r0]
 8003a24:	300c      	adds	r0, #12
 8003a26:	60a0      	str	r0, [r4, #8]
 8003a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a2c:	f7ff ffa2 	bl	8003974 <memset>
 8003a30:	4620      	mov	r0, r4
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <__sfp_lock_acquire>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__sfp_lock_acquire+0x8>)
 8003a36:	f000 b8b3 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	2000018c 	.word	0x2000018c

08003a40 <__sfp_lock_release>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__sfp_lock_release+0x8>)
 8003a42:	f000 b8ae 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	2000018c 	.word	0x2000018c

08003a4c <__sinit_lock_acquire>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__sinit_lock_acquire+0x8>)
 8003a4e:	f000 b8a7 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000187 	.word	0x20000187

08003a58 <__sinit_lock_release>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__sinit_lock_release+0x8>)
 8003a5a:	f000 b8a2 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000187 	.word	0x20000187

08003a64 <__sinit>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	f7ff fff0 	bl	8003a4c <__sinit_lock_acquire>
 8003a6c:	69a3      	ldr	r3, [r4, #24]
 8003a6e:	b11b      	cbz	r3, 8003a78 <__sinit+0x14>
 8003a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a74:	f7ff bff0 	b.w	8003a58 <__sinit_lock_release>
 8003a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <__sinit+0x68>)
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <__sinit+0x6c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	bf04      	itt	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	61a3      	streq	r3, [r4, #24]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 f820 	bl	8003ad4 <__sfp>
 8003a94:	6060      	str	r0, [r4, #4]
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 f81c 	bl	8003ad4 <__sfp>
 8003a9c:	60a0      	str	r0, [r4, #8]
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f000 f818 	bl	8003ad4 <__sfp>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60e0      	str	r0, [r4, #12]
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	6860      	ldr	r0, [r4, #4]
 8003aac:	f7ff ff82 	bl	80039b4 <std>
 8003ab0:	68a0      	ldr	r0, [r4, #8]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2109      	movs	r1, #9
 8003ab6:	f7ff ff7d 	bl	80039b4 <std>
 8003aba:	68e0      	ldr	r0, [r4, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	2112      	movs	r1, #18
 8003ac0:	f7ff ff78 	bl	80039b4 <std>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	61a3      	str	r3, [r4, #24]
 8003ac8:	e7d2      	b.n	8003a70 <__sinit+0xc>
 8003aca:	bf00      	nop
 8003acc:	08004890 	.word	0x08004890
 8003ad0:	080039fd 	.word	0x080039fd

08003ad4 <__sfp>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	4607      	mov	r7, r0
 8003ad8:	f7ff ffac 	bl	8003a34 <__sfp_lock_acquire>
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <__sfp+0x84>)
 8003ade:	681e      	ldr	r6, [r3, #0]
 8003ae0:	69b3      	ldr	r3, [r6, #24]
 8003ae2:	b913      	cbnz	r3, 8003aea <__sfp+0x16>
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ffbd 	bl	8003a64 <__sinit>
 8003aea:	3648      	adds	r6, #72	; 0x48
 8003aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	d503      	bpl.n	8003afc <__sfp+0x28>
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	b30b      	cbz	r3, 8003b3c <__sfp+0x68>
 8003af8:	6836      	ldr	r6, [r6, #0]
 8003afa:	e7f7      	b.n	8003aec <__sfp+0x18>
 8003afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b00:	b9d5      	cbnz	r5, 8003b38 <__sfp+0x64>
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <__sfp+0x88>)
 8003b04:	60e3      	str	r3, [r4, #12]
 8003b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b0c:	f000 f847 	bl	8003b9e <__retarget_lock_init_recursive>
 8003b10:	f7ff ff96 	bl	8003a40 <__sfp_lock_release>
 8003b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	61a5      	str	r5, [r4, #24]
 8003b20:	2208      	movs	r2, #8
 8003b22:	4629      	mov	r1, r5
 8003b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b28:	f7ff ff24 	bl	8003974 <memset>
 8003b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b34:	4620      	mov	r0, r4
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	3468      	adds	r4, #104	; 0x68
 8003b3a:	e7d9      	b.n	8003af0 <__sfp+0x1c>
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f7ff ff62 	bl	8003a08 <__sfmoreglue>
 8003b44:	4604      	mov	r4, r0
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1d5      	bne.n	8003af8 <__sfp+0x24>
 8003b4c:	f7ff ff78 	bl	8003a40 <__sfp_lock_release>
 8003b50:	230c      	movs	r3, #12
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	e7ee      	b.n	8003b34 <__sfp+0x60>
 8003b56:	bf00      	nop
 8003b58:	08004890 	.word	0x08004890
 8003b5c:	ffff0001 	.word	0xffff0001

08003b60 <_fwalk_reent>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4606      	mov	r6, r0
 8003b66:	4688      	mov	r8, r1
 8003b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b6c:	2700      	movs	r7, #0
 8003b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b72:	f1b9 0901 	subs.w	r9, r9, #1
 8003b76:	d505      	bpl.n	8003b84 <_fwalk_reent+0x24>
 8003b78:	6824      	ldr	r4, [r4, #0]
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d1f7      	bne.n	8003b6e <_fwalk_reent+0xe>
 8003b7e:	4638      	mov	r0, r7
 8003b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d907      	bls.n	8003b9a <_fwalk_reent+0x3a>
 8003b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	d003      	beq.n	8003b9a <_fwalk_reent+0x3a>
 8003b92:	4629      	mov	r1, r5
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	4307      	orrs	r7, r0
 8003b9a:	3568      	adds	r5, #104	; 0x68
 8003b9c:	e7e9      	b.n	8003b72 <_fwalk_reent+0x12>

08003b9e <__retarget_lock_init_recursive>:
 8003b9e:	4770      	bx	lr

08003ba0 <__retarget_lock_acquire_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_release_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <_malloc_r>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	1ccd      	adds	r5, r1, #3
 8003ba8:	f025 0503 	bic.w	r5, r5, #3
 8003bac:	3508      	adds	r5, #8
 8003bae:	2d0c      	cmp	r5, #12
 8003bb0:	bf38      	it	cc
 8003bb2:	250c      	movcc	r5, #12
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	db01      	blt.n	8003bbe <_malloc_r+0x1a>
 8003bba:	42a9      	cmp	r1, r5
 8003bbc:	d903      	bls.n	8003bc6 <_malloc_r+0x22>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	6033      	str	r3, [r6, #0]
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc6:	f000 fda3 	bl	8004710 <__malloc_lock>
 8003bca:	4921      	ldr	r1, [pc, #132]	; (8003c50 <_malloc_r+0xac>)
 8003bcc:	680a      	ldr	r2, [r1, #0]
 8003bce:	4614      	mov	r4, r2
 8003bd0:	b99c      	cbnz	r4, 8003bfa <_malloc_r+0x56>
 8003bd2:	4f20      	ldr	r7, [pc, #128]	; (8003c54 <_malloc_r+0xb0>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b923      	cbnz	r3, 8003be2 <_malloc_r+0x3e>
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f000 fb2a 	bl	8004234 <_sbrk_r>
 8003be0:	6038      	str	r0, [r7, #0]
 8003be2:	4629      	mov	r1, r5
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 fb25 	bl	8004234 <_sbrk_r>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	d123      	bne.n	8003c36 <_malloc_r+0x92>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f000 fd92 	bl	800471c <__malloc_unlock>
 8003bf8:	e7e3      	b.n	8003bc2 <_malloc_r+0x1e>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	1b5b      	subs	r3, r3, r5
 8003bfe:	d417      	bmi.n	8003c30 <_malloc_r+0x8c>
 8003c00:	2b0b      	cmp	r3, #11
 8003c02:	d903      	bls.n	8003c0c <_malloc_r+0x68>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	441c      	add	r4, r3
 8003c08:	6025      	str	r5, [r4, #0]
 8003c0a:	e004      	b.n	8003c16 <_malloc_r+0x72>
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	42a2      	cmp	r2, r4
 8003c10:	bf0c      	ite	eq
 8003c12:	600b      	streq	r3, [r1, #0]
 8003c14:	6053      	strne	r3, [r2, #4]
 8003c16:	4630      	mov	r0, r6
 8003c18:	f000 fd80 	bl	800471c <__malloc_unlock>
 8003c1c:	f104 000b 	add.w	r0, r4, #11
 8003c20:	1d23      	adds	r3, r4, #4
 8003c22:	f020 0007 	bic.w	r0, r0, #7
 8003c26:	1ac2      	subs	r2, r0, r3
 8003c28:	d0cc      	beq.n	8003bc4 <_malloc_r+0x20>
 8003c2a:	1a1b      	subs	r3, r3, r0
 8003c2c:	50a3      	str	r3, [r4, r2]
 8003c2e:	e7c9      	b.n	8003bc4 <_malloc_r+0x20>
 8003c30:	4622      	mov	r2, r4
 8003c32:	6864      	ldr	r4, [r4, #4]
 8003c34:	e7cc      	b.n	8003bd0 <_malloc_r+0x2c>
 8003c36:	1cc4      	adds	r4, r0, #3
 8003c38:	f024 0403 	bic.w	r4, r4, #3
 8003c3c:	42a0      	cmp	r0, r4
 8003c3e:	d0e3      	beq.n	8003c08 <_malloc_r+0x64>
 8003c40:	1a21      	subs	r1, r4, r0
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 faf6 	bl	8004234 <_sbrk_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d1dd      	bne.n	8003c08 <_malloc_r+0x64>
 8003c4c:	e7cf      	b.n	8003bee <_malloc_r+0x4a>
 8003c4e:	bf00      	nop
 8003c50:	20000098 	.word	0x20000098
 8003c54:	2000009c 	.word	0x2000009c

08003c58 <__sfputc_r>:
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	b410      	push	{r4}
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	da08      	bge.n	8003c76 <__sfputc_r+0x1e>
 8003c64:	6994      	ldr	r4, [r2, #24]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	db01      	blt.n	8003c6e <__sfputc_r+0x16>
 8003c6a:	290a      	cmp	r1, #10
 8003c6c:	d103      	bne.n	8003c76 <__sfputc_r+0x1e>
 8003c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c72:	f000 bb33 	b.w	80042dc <__swbuf_r>
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	1c58      	adds	r0, r3, #1
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	7019      	strb	r1, [r3, #0]
 8003c7e:	4608      	mov	r0, r1
 8003c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <__sfputs_r>:
 8003c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	18d5      	adds	r5, r2, r3
 8003c90:	42ac      	cmp	r4, r5
 8003c92:	d101      	bne.n	8003c98 <__sfputs_r+0x12>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e007      	b.n	8003ca8 <__sfputs_r+0x22>
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffda 	bl	8003c58 <__sfputc_r>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d1f3      	bne.n	8003c90 <__sfputs_r+0xa>
 8003ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cac <_vfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	b09d      	sub	sp, #116	; 0x74
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	4698      	mov	r8, r3
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_vfiprintf_r+0x18>
 8003cbc:	6983      	ldr	r3, [r0, #24]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_vfiprintf_r+0x18>
 8003cc0:	f7ff fed0 	bl	8003a64 <__sinit>
 8003cc4:	4b89      	ldr	r3, [pc, #548]	; (8003eec <_vfiprintf_r+0x240>)
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	d11b      	bne.n	8003d02 <_vfiprintf_r+0x56>
 8003cca:	6875      	ldr	r5, [r6, #4]
 8003ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cce:	07d9      	lsls	r1, r3, #31
 8003cd0:	d405      	bmi.n	8003cde <_vfiprintf_r+0x32>
 8003cd2:	89ab      	ldrh	r3, [r5, #12]
 8003cd4:	059a      	lsls	r2, r3, #22
 8003cd6:	d402      	bmi.n	8003cde <_vfiprintf_r+0x32>
 8003cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cda:	f7ff ff61 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	d501      	bpl.n	8003ce8 <_vfiprintf_r+0x3c>
 8003ce4:	692b      	ldr	r3, [r5, #16]
 8003ce6:	b9eb      	cbnz	r3, 8003d24 <_vfiprintf_r+0x78>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4630      	mov	r0, r6
 8003cec:	f000 fb5a 	bl	80043a4 <__swsetup_r>
 8003cf0:	b1c0      	cbz	r0, 8003d24 <_vfiprintf_r+0x78>
 8003cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cf4:	07dc      	lsls	r4, r3, #31
 8003cf6:	d50e      	bpl.n	8003d16 <_vfiprintf_r+0x6a>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfc:	b01d      	add	sp, #116	; 0x74
 8003cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <_vfiprintf_r+0x244>)
 8003d04:	429d      	cmp	r5, r3
 8003d06:	d101      	bne.n	8003d0c <_vfiprintf_r+0x60>
 8003d08:	68b5      	ldr	r5, [r6, #8]
 8003d0a:	e7df      	b.n	8003ccc <_vfiprintf_r+0x20>
 8003d0c:	4b79      	ldr	r3, [pc, #484]	; (8003ef4 <_vfiprintf_r+0x248>)
 8003d0e:	429d      	cmp	r5, r3
 8003d10:	bf08      	it	eq
 8003d12:	68f5      	ldreq	r5, [r6, #12]
 8003d14:	e7da      	b.n	8003ccc <_vfiprintf_r+0x20>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	0598      	lsls	r0, r3, #22
 8003d1a:	d4ed      	bmi.n	8003cf8 <_vfiprintf_r+0x4c>
 8003d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d1e:	f7ff ff40 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003d22:	e7e9      	b.n	8003cf8 <_vfiprintf_r+0x4c>
 8003d24:	2300      	movs	r3, #0
 8003d26:	9309      	str	r3, [sp, #36]	; 0x24
 8003d28:	2320      	movs	r3, #32
 8003d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d32:	2330      	movs	r3, #48	; 0x30
 8003d34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ef8 <_vfiprintf_r+0x24c>
 8003d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3c:	f04f 0901 	mov.w	r9, #1
 8003d40:	4623      	mov	r3, r4
 8003d42:	469a      	mov	sl, r3
 8003d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d48:	b10a      	cbz	r2, 8003d4e <_vfiprintf_r+0xa2>
 8003d4a:	2a25      	cmp	r2, #37	; 0x25
 8003d4c:	d1f9      	bne.n	8003d42 <_vfiprintf_r+0x96>
 8003d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d52:	d00b      	beq.n	8003d6c <_vfiprintf_r+0xc0>
 8003d54:	465b      	mov	r3, fp
 8003d56:	4622      	mov	r2, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f7ff ff93 	bl	8003c86 <__sfputs_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	f000 80aa 	beq.w	8003eba <_vfiprintf_r+0x20e>
 8003d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d68:	445a      	add	r2, fp
 8003d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a2 	beq.w	8003eba <_vfiprintf_r+0x20e>
 8003d76:	2300      	movs	r3, #0
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d80:	f10a 0a01 	add.w	sl, sl, #1
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	9307      	str	r3, [sp, #28]
 8003d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d8e:	4654      	mov	r4, sl
 8003d90:	2205      	movs	r2, #5
 8003d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d96:	4858      	ldr	r0, [pc, #352]	; (8003ef8 <_vfiprintf_r+0x24c>)
 8003d98:	f7fc fa1a 	bl	80001d0 <memchr>
 8003d9c:	9a04      	ldr	r2, [sp, #16]
 8003d9e:	b9d8      	cbnz	r0, 8003dd8 <_vfiprintf_r+0x12c>
 8003da0:	06d1      	lsls	r1, r2, #27
 8003da2:	bf44      	itt	mi
 8003da4:	2320      	movmi	r3, #32
 8003da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003daa:	0713      	lsls	r3, r2, #28
 8003dac:	bf44      	itt	mi
 8003dae:	232b      	movmi	r3, #43	; 0x2b
 8003db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db4:	f89a 3000 	ldrb.w	r3, [sl]
 8003db8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dba:	d015      	beq.n	8003de8 <_vfiprintf_r+0x13c>
 8003dbc:	9a07      	ldr	r2, [sp, #28]
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dcc:	3b30      	subs	r3, #48	; 0x30
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d94e      	bls.n	8003e70 <_vfiprintf_r+0x1c4>
 8003dd2:	b1b0      	cbz	r0, 8003e02 <_vfiprintf_r+0x156>
 8003dd4:	9207      	str	r2, [sp, #28]
 8003dd6:	e014      	b.n	8003e02 <_vfiprintf_r+0x156>
 8003dd8:	eba0 0308 	sub.w	r3, r0, r8
 8003ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	46a2      	mov	sl, r4
 8003de6:	e7d2      	b.n	8003d8e <_vfiprintf_r+0xe2>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	1d19      	adds	r1, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	9103      	str	r1, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfbb      	ittet	lt
 8003df4:	425b      	neglt	r3, r3
 8003df6:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfa:	9307      	strge	r3, [sp, #28]
 8003dfc:	9307      	strlt	r3, [sp, #28]
 8003dfe:	bfb8      	it	lt
 8003e00:	9204      	strlt	r2, [sp, #16]
 8003e02:	7823      	ldrb	r3, [r4, #0]
 8003e04:	2b2e      	cmp	r3, #46	; 0x2e
 8003e06:	d10c      	bne.n	8003e22 <_vfiprintf_r+0x176>
 8003e08:	7863      	ldrb	r3, [r4, #1]
 8003e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0c:	d135      	bne.n	8003e7a <_vfiprintf_r+0x1ce>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e1e:	3402      	adds	r4, #2
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f08 <_vfiprintf_r+0x25c>
 8003e26:	7821      	ldrb	r1, [r4, #0]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	f7fc f9d0 	bl	80001d0 <memchr>
 8003e30:	b140      	cbz	r0, 8003e44 <_vfiprintf_r+0x198>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	eba0 000a 	sub.w	r0, r0, sl
 8003e38:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3c:	9b04      	ldr	r3, [sp, #16]
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	3401      	adds	r4, #1
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	482c      	ldr	r0, [pc, #176]	; (8003efc <_vfiprintf_r+0x250>)
 8003e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4e:	2206      	movs	r2, #6
 8003e50:	f7fc f9be 	bl	80001d0 <memchr>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d03f      	beq.n	8003ed8 <_vfiprintf_r+0x22c>
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <_vfiprintf_r+0x254>)
 8003e5a:	bb1b      	cbnz	r3, 8003ea4 <_vfiprintf_r+0x1f8>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	3307      	adds	r3, #7
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	3308      	adds	r3, #8
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6a:	443b      	add	r3, r7
 8003e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6e:	e767      	b.n	8003d40 <_vfiprintf_r+0x94>
 8003e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e74:	460c      	mov	r4, r1
 8003e76:	2001      	movs	r0, #1
 8003e78:	e7a5      	b.n	8003dc6 <_vfiprintf_r+0x11a>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	3401      	adds	r4, #1
 8003e7e:	9305      	str	r3, [sp, #20]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f04f 0c0a 	mov.w	ip, #10
 8003e86:	4620      	mov	r0, r4
 8003e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8c:	3a30      	subs	r2, #48	; 0x30
 8003e8e:	2a09      	cmp	r2, #9
 8003e90:	d903      	bls.n	8003e9a <_vfiprintf_r+0x1ee>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0c5      	beq.n	8003e22 <_vfiprintf_r+0x176>
 8003e96:	9105      	str	r1, [sp, #20]
 8003e98:	e7c3      	b.n	8003e22 <_vfiprintf_r+0x176>
 8003e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e7f0      	b.n	8003e86 <_vfiprintf_r+0x1da>
 8003ea4:	ab03      	add	r3, sp, #12
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <_vfiprintf_r+0x258>)
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f3af 8000 	nop.w
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	1c78      	adds	r0, r7, #1
 8003eb8:	d1d6      	bne.n	8003e68 <_vfiprintf_r+0x1bc>
 8003eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ebc:	07d9      	lsls	r1, r3, #31
 8003ebe:	d405      	bmi.n	8003ecc <_vfiprintf_r+0x220>
 8003ec0:	89ab      	ldrh	r3, [r5, #12]
 8003ec2:	059a      	lsls	r2, r3, #22
 8003ec4:	d402      	bmi.n	8003ecc <_vfiprintf_r+0x220>
 8003ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec8:	f7ff fe6b 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003ecc:	89ab      	ldrh	r3, [r5, #12]
 8003ece:	065b      	lsls	r3, r3, #25
 8003ed0:	f53f af12 	bmi.w	8003cf8 <_vfiprintf_r+0x4c>
 8003ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ed6:	e711      	b.n	8003cfc <_vfiprintf_r+0x50>
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	462a      	mov	r2, r5
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <_vfiprintf_r+0x258>)
 8003ee0:	a904      	add	r1, sp, #16
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f000 f880 	bl	8003fe8 <_printf_i>
 8003ee8:	e7e4      	b.n	8003eb4 <_vfiprintf_r+0x208>
 8003eea:	bf00      	nop
 8003eec:	080048b4 	.word	0x080048b4
 8003ef0:	080048d4 	.word	0x080048d4
 8003ef4:	08004894 	.word	0x08004894
 8003ef8:	080048f4 	.word	0x080048f4
 8003efc:	080048fe 	.word	0x080048fe
 8003f00:	00000000 	.word	0x00000000
 8003f04:	08003c87 	.word	0x08003c87
 8003f08:	080048fa 	.word	0x080048fa

08003f0c <_printf_common>:
 8003f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f10:	4616      	mov	r6, r2
 8003f12:	4699      	mov	r9, r3
 8003f14:	688a      	ldr	r2, [r1, #8]
 8003f16:	690b      	ldr	r3, [r1, #16]
 8003f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	bfb8      	it	lt
 8003f20:	4613      	movlt	r3, r2
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f28:	4607      	mov	r7, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	b10a      	cbz	r2, 8003f32 <_printf_common+0x26>
 8003f2e:	3301      	adds	r3, #1
 8003f30:	6033      	str	r3, [r6, #0]
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	0699      	lsls	r1, r3, #26
 8003f36:	bf42      	ittt	mi
 8003f38:	6833      	ldrmi	r3, [r6, #0]
 8003f3a:	3302      	addmi	r3, #2
 8003f3c:	6033      	strmi	r3, [r6, #0]
 8003f3e:	6825      	ldr	r5, [r4, #0]
 8003f40:	f015 0506 	ands.w	r5, r5, #6
 8003f44:	d106      	bne.n	8003f54 <_printf_common+0x48>
 8003f46:	f104 0a19 	add.w	sl, r4, #25
 8003f4a:	68e3      	ldr	r3, [r4, #12]
 8003f4c:	6832      	ldr	r2, [r6, #0]
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	42ab      	cmp	r3, r5
 8003f52:	dc26      	bgt.n	8003fa2 <_printf_common+0x96>
 8003f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f58:	1e13      	subs	r3, r2, #0
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	bf18      	it	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	0692      	lsls	r2, r2, #26
 8003f62:	d42b      	bmi.n	8003fbc <_printf_common+0xb0>
 8003f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f68:	4649      	mov	r1, r9
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	47c0      	blx	r8
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d01e      	beq.n	8003fb0 <_printf_common+0xa4>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	68e5      	ldr	r5, [r4, #12]
 8003f76:	6832      	ldr	r2, [r6, #0]
 8003f78:	f003 0306 	and.w	r3, r3, #6
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	bf08      	it	eq
 8003f80:	1aad      	subeq	r5, r5, r2
 8003f82:	68a3      	ldr	r3, [r4, #8]
 8003f84:	6922      	ldr	r2, [r4, #16]
 8003f86:	bf0c      	ite	eq
 8003f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f8c:	2500      	movne	r5, #0
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	bfc4      	itt	gt
 8003f92:	1a9b      	subgt	r3, r3, r2
 8003f94:	18ed      	addgt	r5, r5, r3
 8003f96:	2600      	movs	r6, #0
 8003f98:	341a      	adds	r4, #26
 8003f9a:	42b5      	cmp	r5, r6
 8003f9c:	d11a      	bne.n	8003fd4 <_printf_common+0xc8>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e008      	b.n	8003fb4 <_printf_common+0xa8>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4652      	mov	r2, sl
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	4638      	mov	r0, r7
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d103      	bne.n	8003fb8 <_printf_common+0xac>
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb8:	3501      	adds	r5, #1
 8003fba:	e7c6      	b.n	8003f4a <_printf_common+0x3e>
 8003fbc:	18e1      	adds	r1, r4, r3
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	2030      	movs	r0, #48	; 0x30
 8003fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc6:	4422      	add	r2, r4
 8003fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	e7c7      	b.n	8003f64 <_printf_common+0x58>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4649      	mov	r1, r9
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d0e6      	beq.n	8003fb0 <_printf_common+0xa4>
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7d9      	b.n	8003f9a <_printf_common+0x8e>
	...

08003fe8 <_printf_i>:
 8003fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	460c      	mov	r4, r1
 8003fee:	4691      	mov	r9, r2
 8003ff0:	7e27      	ldrb	r7, [r4, #24]
 8003ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ff4:	2f78      	cmp	r7, #120	; 0x78
 8003ff6:	4680      	mov	r8, r0
 8003ff8:	469a      	mov	sl, r3
 8003ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ffe:	d807      	bhi.n	8004010 <_printf_i+0x28>
 8004000:	2f62      	cmp	r7, #98	; 0x62
 8004002:	d80a      	bhi.n	800401a <_printf_i+0x32>
 8004004:	2f00      	cmp	r7, #0
 8004006:	f000 80d8 	beq.w	80041ba <_printf_i+0x1d2>
 800400a:	2f58      	cmp	r7, #88	; 0x58
 800400c:	f000 80a3 	beq.w	8004156 <_printf_i+0x16e>
 8004010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004018:	e03a      	b.n	8004090 <_printf_i+0xa8>
 800401a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401e:	2b15      	cmp	r3, #21
 8004020:	d8f6      	bhi.n	8004010 <_printf_i+0x28>
 8004022:	a001      	add	r0, pc, #4	; (adr r0, 8004028 <_printf_i+0x40>)
 8004024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004028:	08004081 	.word	0x08004081
 800402c:	08004095 	.word	0x08004095
 8004030:	08004011 	.word	0x08004011
 8004034:	08004011 	.word	0x08004011
 8004038:	08004011 	.word	0x08004011
 800403c:	08004011 	.word	0x08004011
 8004040:	08004095 	.word	0x08004095
 8004044:	08004011 	.word	0x08004011
 8004048:	08004011 	.word	0x08004011
 800404c:	08004011 	.word	0x08004011
 8004050:	08004011 	.word	0x08004011
 8004054:	080041a1 	.word	0x080041a1
 8004058:	080040c5 	.word	0x080040c5
 800405c:	08004183 	.word	0x08004183
 8004060:	08004011 	.word	0x08004011
 8004064:	08004011 	.word	0x08004011
 8004068:	080041c3 	.word	0x080041c3
 800406c:	08004011 	.word	0x08004011
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004011 	.word	0x08004011
 8004078:	08004011 	.word	0x08004011
 800407c:	0800418b 	.word	0x0800418b
 8004080:	680b      	ldr	r3, [r1, #0]
 8004082:	1d1a      	adds	r2, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	600a      	str	r2, [r1, #0]
 8004088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800408c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004090:	2301      	movs	r3, #1
 8004092:	e0a3      	b.n	80041dc <_printf_i+0x1f4>
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	6808      	ldr	r0, [r1, #0]
 8004098:	062e      	lsls	r6, r5, #24
 800409a:	f100 0304 	add.w	r3, r0, #4
 800409e:	d50a      	bpl.n	80040b6 <_printf_i+0xce>
 80040a0:	6805      	ldr	r5, [r0, #0]
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	da03      	bge.n	80040b0 <_printf_i+0xc8>
 80040a8:	232d      	movs	r3, #45	; 0x2d
 80040aa:	426d      	negs	r5, r5
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b0:	485e      	ldr	r0, [pc, #376]	; (800422c <_printf_i+0x244>)
 80040b2:	230a      	movs	r3, #10
 80040b4:	e019      	b.n	80040ea <_printf_i+0x102>
 80040b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040ba:	6805      	ldr	r5, [r0, #0]
 80040bc:	600b      	str	r3, [r1, #0]
 80040be:	bf18      	it	ne
 80040c0:	b22d      	sxthne	r5, r5
 80040c2:	e7ef      	b.n	80040a4 <_printf_i+0xbc>
 80040c4:	680b      	ldr	r3, [r1, #0]
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	1d18      	adds	r0, r3, #4
 80040ca:	6008      	str	r0, [r1, #0]
 80040cc:	0628      	lsls	r0, r5, #24
 80040ce:	d501      	bpl.n	80040d4 <_printf_i+0xec>
 80040d0:	681d      	ldr	r5, [r3, #0]
 80040d2:	e002      	b.n	80040da <_printf_i+0xf2>
 80040d4:	0669      	lsls	r1, r5, #25
 80040d6:	d5fb      	bpl.n	80040d0 <_printf_i+0xe8>
 80040d8:	881d      	ldrh	r5, [r3, #0]
 80040da:	4854      	ldr	r0, [pc, #336]	; (800422c <_printf_i+0x244>)
 80040dc:	2f6f      	cmp	r7, #111	; 0x6f
 80040de:	bf0c      	ite	eq
 80040e0:	2308      	moveq	r3, #8
 80040e2:	230a      	movne	r3, #10
 80040e4:	2100      	movs	r1, #0
 80040e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ea:	6866      	ldr	r6, [r4, #4]
 80040ec:	60a6      	str	r6, [r4, #8]
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	bfa2      	ittt	ge
 80040f2:	6821      	ldrge	r1, [r4, #0]
 80040f4:	f021 0104 	bicge.w	r1, r1, #4
 80040f8:	6021      	strge	r1, [r4, #0]
 80040fa:	b90d      	cbnz	r5, 8004100 <_printf_i+0x118>
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d04d      	beq.n	800419c <_printf_i+0x1b4>
 8004100:	4616      	mov	r6, r2
 8004102:	fbb5 f1f3 	udiv	r1, r5, r3
 8004106:	fb03 5711 	mls	r7, r3, r1, r5
 800410a:	5dc7      	ldrb	r7, [r0, r7]
 800410c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004110:	462f      	mov	r7, r5
 8004112:	42bb      	cmp	r3, r7
 8004114:	460d      	mov	r5, r1
 8004116:	d9f4      	bls.n	8004102 <_printf_i+0x11a>
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10b      	bne.n	8004134 <_printf_i+0x14c>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	07df      	lsls	r7, r3, #31
 8004120:	d508      	bpl.n	8004134 <_printf_i+0x14c>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	6861      	ldr	r1, [r4, #4]
 8004126:	4299      	cmp	r1, r3
 8004128:	bfde      	ittt	le
 800412a:	2330      	movle	r3, #48	; 0x30
 800412c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004130:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004134:	1b92      	subs	r2, r2, r6
 8004136:	6122      	str	r2, [r4, #16]
 8004138:	f8cd a000 	str.w	sl, [sp]
 800413c:	464b      	mov	r3, r9
 800413e:	aa03      	add	r2, sp, #12
 8004140:	4621      	mov	r1, r4
 8004142:	4640      	mov	r0, r8
 8004144:	f7ff fee2 	bl	8003f0c <_printf_common>
 8004148:	3001      	adds	r0, #1
 800414a:	d14c      	bne.n	80041e6 <_printf_i+0x1fe>
 800414c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004150:	b004      	add	sp, #16
 8004152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004156:	4835      	ldr	r0, [pc, #212]	; (800422c <_printf_i+0x244>)
 8004158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	680e      	ldr	r6, [r1, #0]
 8004160:	061f      	lsls	r7, r3, #24
 8004162:	f856 5b04 	ldr.w	r5, [r6], #4
 8004166:	600e      	str	r6, [r1, #0]
 8004168:	d514      	bpl.n	8004194 <_printf_i+0x1ac>
 800416a:	07d9      	lsls	r1, r3, #31
 800416c:	bf44      	itt	mi
 800416e:	f043 0320 	orrmi.w	r3, r3, #32
 8004172:	6023      	strmi	r3, [r4, #0]
 8004174:	b91d      	cbnz	r5, 800417e <_printf_i+0x196>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	f023 0320 	bic.w	r3, r3, #32
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	2310      	movs	r3, #16
 8004180:	e7b0      	b.n	80040e4 <_printf_i+0xfc>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	2378      	movs	r3, #120	; 0x78
 800418c:	4828      	ldr	r0, [pc, #160]	; (8004230 <_printf_i+0x248>)
 800418e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004192:	e7e3      	b.n	800415c <_printf_i+0x174>
 8004194:	065e      	lsls	r6, r3, #25
 8004196:	bf48      	it	mi
 8004198:	b2ad      	uxthmi	r5, r5
 800419a:	e7e6      	b.n	800416a <_printf_i+0x182>
 800419c:	4616      	mov	r6, r2
 800419e:	e7bb      	b.n	8004118 <_printf_i+0x130>
 80041a0:	680b      	ldr	r3, [r1, #0]
 80041a2:	6826      	ldr	r6, [r4, #0]
 80041a4:	6960      	ldr	r0, [r4, #20]
 80041a6:	1d1d      	adds	r5, r3, #4
 80041a8:	600d      	str	r5, [r1, #0]
 80041aa:	0635      	lsls	r5, r6, #24
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0x1cc>
 80041b0:	6018      	str	r0, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0x1d2>
 80041b4:	0671      	lsls	r1, r6, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0x1c8>
 80041b8:	8018      	strh	r0, [r3, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	4616      	mov	r6, r2
 80041c0:	e7ba      	b.n	8004138 <_printf_i+0x150>
 80041c2:	680b      	ldr	r3, [r1, #0]
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	600a      	str	r2, [r1, #0]
 80041c8:	681e      	ldr	r6, [r3, #0]
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7fb fffe 	bl	80001d0 <memchr>
 80041d4:	b108      	cbz	r0, 80041da <_printf_i+0x1f2>
 80041d6:	1b80      	subs	r0, r0, r6
 80041d8:	6060      	str	r0, [r4, #4]
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	2300      	movs	r3, #0
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	e7a8      	b.n	8004138 <_printf_i+0x150>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d0ab      	beq.n	800414c <_printf_i+0x164>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	079b      	lsls	r3, r3, #30
 80041f8:	d413      	bmi.n	8004222 <_printf_i+0x23a>
 80041fa:	68e0      	ldr	r0, [r4, #12]
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	4298      	cmp	r0, r3
 8004200:	bfb8      	it	lt
 8004202:	4618      	movlt	r0, r3
 8004204:	e7a4      	b.n	8004150 <_printf_i+0x168>
 8004206:	2301      	movs	r3, #1
 8004208:	4632      	mov	r2, r6
 800420a:	4649      	mov	r1, r9
 800420c:	4640      	mov	r0, r8
 800420e:	47d0      	blx	sl
 8004210:	3001      	adds	r0, #1
 8004212:	d09b      	beq.n	800414c <_printf_i+0x164>
 8004214:	3501      	adds	r5, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	9903      	ldr	r1, [sp, #12]
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	42ab      	cmp	r3, r5
 800421e:	dcf2      	bgt.n	8004206 <_printf_i+0x21e>
 8004220:	e7eb      	b.n	80041fa <_printf_i+0x212>
 8004222:	2500      	movs	r5, #0
 8004224:	f104 0619 	add.w	r6, r4, #25
 8004228:	e7f5      	b.n	8004216 <_printf_i+0x22e>
 800422a:	bf00      	nop
 800422c:	08004905 	.word	0x08004905
 8004230:	08004916 	.word	0x08004916

08004234 <_sbrk_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d06      	ldr	r5, [pc, #24]	; (8004250 <_sbrk_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fc fd60 	bl	8000d04 <_sbrk>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_sbrk_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_sbrk_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	20000190 	.word	0x20000190

08004254 <__sread>:
 8004254:	b510      	push	{r4, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425c:	f000 fab4 	bl	80047c8 <_read_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	bfab      	itete	ge
 8004264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004266:	89a3      	ldrhlt	r3, [r4, #12]
 8004268:	181b      	addge	r3, r3, r0
 800426a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800426e:	bfac      	ite	ge
 8004270:	6563      	strge	r3, [r4, #84]	; 0x54
 8004272:	81a3      	strhlt	r3, [r4, #12]
 8004274:	bd10      	pop	{r4, pc}

08004276 <__swrite>:
 8004276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427a:	461f      	mov	r7, r3
 800427c:	898b      	ldrh	r3, [r1, #12]
 800427e:	05db      	lsls	r3, r3, #23
 8004280:	4605      	mov	r5, r0
 8004282:	460c      	mov	r4, r1
 8004284:	4616      	mov	r6, r2
 8004286:	d505      	bpl.n	8004294 <__swrite+0x1e>
 8004288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428c:	2302      	movs	r3, #2
 800428e:	2200      	movs	r2, #0
 8004290:	f000 f9c8 	bl	8004624 <_lseek_r>
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800429a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	4632      	mov	r2, r6
 80042a2:	463b      	mov	r3, r7
 80042a4:	4628      	mov	r0, r5
 80042a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042aa:	f000 b869 	b.w	8004380 <_write_r>

080042ae <__sseek>:
 80042ae:	b510      	push	{r4, lr}
 80042b0:	460c      	mov	r4, r1
 80042b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b6:	f000 f9b5 	bl	8004624 <_lseek_r>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	bf15      	itete	ne
 80042c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ca:	81a3      	strheq	r3, [r4, #12]
 80042cc:	bf18      	it	ne
 80042ce:	81a3      	strhne	r3, [r4, #12]
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <__sclose>:
 80042d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d6:	f000 b8d3 	b.w	8004480 <_close_r>
	...

080042dc <__swbuf_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	460e      	mov	r6, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	4605      	mov	r5, r0
 80042e4:	b118      	cbz	r0, 80042ee <__swbuf_r+0x12>
 80042e6:	6983      	ldr	r3, [r0, #24]
 80042e8:	b90b      	cbnz	r3, 80042ee <__swbuf_r+0x12>
 80042ea:	f7ff fbbb 	bl	8003a64 <__sinit>
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <__swbuf_r+0x98>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d12b      	bne.n	800434c <__swbuf_r+0x70>
 80042f4:	686c      	ldr	r4, [r5, #4]
 80042f6:	69a3      	ldr	r3, [r4, #24]
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	071a      	lsls	r2, r3, #28
 80042fe:	d52f      	bpl.n	8004360 <__swbuf_r+0x84>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	b36b      	cbz	r3, 8004360 <__swbuf_r+0x84>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	1ac0      	subs	r0, r0, r3
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	b2f6      	uxtb	r6, r6
 800430e:	4283      	cmp	r3, r0
 8004310:	4637      	mov	r7, r6
 8004312:	dc04      	bgt.n	800431e <__swbuf_r+0x42>
 8004314:	4621      	mov	r1, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f948 	bl	80045ac <_fflush_r>
 800431c:	bb30      	cbnz	r0, 800436c <__swbuf_r+0x90>
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	701e      	strb	r6, [r3, #0]
 800432c:	6963      	ldr	r3, [r4, #20]
 800432e:	3001      	adds	r0, #1
 8004330:	4283      	cmp	r3, r0
 8004332:	d004      	beq.n	800433e <__swbuf_r+0x62>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d506      	bpl.n	8004348 <__swbuf_r+0x6c>
 800433a:	2e0a      	cmp	r6, #10
 800433c:	d104      	bne.n	8004348 <__swbuf_r+0x6c>
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 f933 	bl	80045ac <_fflush_r>
 8004346:	b988      	cbnz	r0, 800436c <__swbuf_r+0x90>
 8004348:	4638      	mov	r0, r7
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <__swbuf_r+0x9c>)
 800434e:	429c      	cmp	r4, r3
 8004350:	d101      	bne.n	8004356 <__swbuf_r+0x7a>
 8004352:	68ac      	ldr	r4, [r5, #8]
 8004354:	e7cf      	b.n	80042f6 <__swbuf_r+0x1a>
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <__swbuf_r+0xa0>)
 8004358:	429c      	cmp	r4, r3
 800435a:	bf08      	it	eq
 800435c:	68ec      	ldreq	r4, [r5, #12]
 800435e:	e7ca      	b.n	80042f6 <__swbuf_r+0x1a>
 8004360:	4621      	mov	r1, r4
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f81e 	bl	80043a4 <__swsetup_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0cb      	beq.n	8004304 <__swbuf_r+0x28>
 800436c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004370:	e7ea      	b.n	8004348 <__swbuf_r+0x6c>
 8004372:	bf00      	nop
 8004374:	080048b4 	.word	0x080048b4
 8004378:	080048d4 	.word	0x080048d4
 800437c:	08004894 	.word	0x08004894

08004380 <_write_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	; (80043a0 <_write_r+0x20>)
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fc67 	bl	8000c62 <_write>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_write_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_write_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000190 	.word	0x20000190

080043a4 <__swsetup_r>:
 80043a4:	4b32      	ldr	r3, [pc, #200]	; (8004470 <__swsetup_r+0xcc>)
 80043a6:	b570      	push	{r4, r5, r6, lr}
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	4606      	mov	r6, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	b125      	cbz	r5, 80043ba <__swsetup_r+0x16>
 80043b0:	69ab      	ldr	r3, [r5, #24]
 80043b2:	b913      	cbnz	r3, 80043ba <__swsetup_r+0x16>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff fb55 	bl	8003a64 <__sinit>
 80043ba:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <__swsetup_r+0xd0>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	d10f      	bne.n	80043e0 <__swsetup_r+0x3c>
 80043c0:	686c      	ldr	r4, [r5, #4]
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	d42c      	bmi.n	8004426 <__swsetup_r+0x82>
 80043cc:	06dd      	lsls	r5, r3, #27
 80043ce:	d411      	bmi.n	80043f4 <__swsetup_r+0x50>
 80043d0:	2309      	movs	r3, #9
 80043d2:	6033      	str	r3, [r6, #0]
 80043d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043de:	e03e      	b.n	800445e <__swsetup_r+0xba>
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <__swsetup_r+0xd4>)
 80043e2:	429c      	cmp	r4, r3
 80043e4:	d101      	bne.n	80043ea <__swsetup_r+0x46>
 80043e6:	68ac      	ldr	r4, [r5, #8]
 80043e8:	e7eb      	b.n	80043c2 <__swsetup_r+0x1e>
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <__swsetup_r+0xd8>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	bf08      	it	eq
 80043f0:	68ec      	ldreq	r4, [r5, #12]
 80043f2:	e7e6      	b.n	80043c2 <__swsetup_r+0x1e>
 80043f4:	0758      	lsls	r0, r3, #29
 80043f6:	d512      	bpl.n	800441e <__swsetup_r+0x7a>
 80043f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043fa:	b141      	cbz	r1, 800440e <__swsetup_r+0x6a>
 80043fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <__swsetup_r+0x66>
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f98f 	bl	8004728 <_free_r>
 800440a:	2300      	movs	r3, #0
 800440c:	6363      	str	r3, [r4, #52]	; 0x34
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	2300      	movs	r3, #0
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	b94b      	cbnz	r3, 800443e <__swsetup_r+0x9a>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d003      	beq.n	800443e <__swsetup_r+0x9a>
 8004436:	4621      	mov	r1, r4
 8004438:	4630      	mov	r0, r6
 800443a:	f000 f929 	bl	8004690 <__smakebuf_r>
 800443e:	89a0      	ldrh	r0, [r4, #12]
 8004440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004444:	f010 0301 	ands.w	r3, r0, #1
 8004448:	d00a      	beq.n	8004460 <__swsetup_r+0xbc>
 800444a:	2300      	movs	r3, #0
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6963      	ldr	r3, [r4, #20]
 8004450:	425b      	negs	r3, r3
 8004452:	61a3      	str	r3, [r4, #24]
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	b943      	cbnz	r3, 800446a <__swsetup_r+0xc6>
 8004458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800445c:	d1ba      	bne.n	80043d4 <__swsetup_r+0x30>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	0781      	lsls	r1, r0, #30
 8004462:	bf58      	it	pl
 8004464:	6963      	ldrpl	r3, [r4, #20]
 8004466:	60a3      	str	r3, [r4, #8]
 8004468:	e7f4      	b.n	8004454 <__swsetup_r+0xb0>
 800446a:	2000      	movs	r0, #0
 800446c:	e7f7      	b.n	800445e <__swsetup_r+0xba>
 800446e:	bf00      	nop
 8004470:	20000014 	.word	0x20000014
 8004474:	080048b4 	.word	0x080048b4
 8004478:	080048d4 	.word	0x080048d4
 800447c:	08004894 	.word	0x08004894

08004480 <_close_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d06      	ldr	r5, [pc, #24]	; (800449c <_close_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fc fc05 	bl	8000c9a <_close>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_close_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_close_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000190 	.word	0x20000190

080044a0 <__sflush_r>:
 80044a0:	898a      	ldrh	r2, [r1, #12]
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	4605      	mov	r5, r0
 80044a8:	0710      	lsls	r0, r2, #28
 80044aa:	460c      	mov	r4, r1
 80044ac:	d458      	bmi.n	8004560 <__sflush_r+0xc0>
 80044ae:	684b      	ldr	r3, [r1, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dc05      	bgt.n	80044c0 <__sflush_r+0x20>
 80044b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dc02      	bgt.n	80044c0 <__sflush_r+0x20>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d0f9      	beq.n	80044ba <__sflush_r+0x1a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044cc:	682f      	ldr	r7, [r5, #0]
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	d032      	beq.n	8004538 <__sflush_r+0x98>
 80044d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	075a      	lsls	r2, r3, #29
 80044d8:	d505      	bpl.n	80044e6 <__sflush_r+0x46>
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044e0:	b10b      	cbz	r3, 80044e6 <__sflush_r+0x46>
 80044e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e4:	1ac0      	subs	r0, r0, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	4602      	mov	r2, r0
 80044ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ec:	6a21      	ldr	r1, [r4, #32]
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b0      	blx	r6
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	d106      	bne.n	8004506 <__sflush_r+0x66>
 80044f8:	6829      	ldr	r1, [r5, #0]
 80044fa:	291d      	cmp	r1, #29
 80044fc:	d82c      	bhi.n	8004558 <__sflush_r+0xb8>
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <__sflush_r+0x108>)
 8004500:	40ca      	lsrs	r2, r1
 8004502:	07d6      	lsls	r6, r2, #31
 8004504:	d528      	bpl.n	8004558 <__sflush_r+0xb8>
 8004506:	2200      	movs	r2, #0
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	04d9      	lsls	r1, r3, #19
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	d504      	bpl.n	800451c <__sflush_r+0x7c>
 8004512:	1c42      	adds	r2, r0, #1
 8004514:	d101      	bne.n	800451a <__sflush_r+0x7a>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	b903      	cbnz	r3, 800451c <__sflush_r+0x7c>
 800451a:	6560      	str	r0, [r4, #84]	; 0x54
 800451c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451e:	602f      	str	r7, [r5, #0]
 8004520:	2900      	cmp	r1, #0
 8004522:	d0ca      	beq.n	80044ba <__sflush_r+0x1a>
 8004524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004528:	4299      	cmp	r1, r3
 800452a:	d002      	beq.n	8004532 <__sflush_r+0x92>
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f8fb 	bl	8004728 <_free_r>
 8004532:	2000      	movs	r0, #0
 8004534:	6360      	str	r0, [r4, #52]	; 0x34
 8004536:	e7c1      	b.n	80044bc <__sflush_r+0x1c>
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	2301      	movs	r3, #1
 800453c:	4628      	mov	r0, r5
 800453e:	47b0      	blx	r6
 8004540:	1c41      	adds	r1, r0, #1
 8004542:	d1c7      	bne.n	80044d4 <__sflush_r+0x34>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c4      	beq.n	80044d4 <__sflush_r+0x34>
 800454a:	2b1d      	cmp	r3, #29
 800454c:	d001      	beq.n	8004552 <__sflush_r+0xb2>
 800454e:	2b16      	cmp	r3, #22
 8004550:	d101      	bne.n	8004556 <__sflush_r+0xb6>
 8004552:	602f      	str	r7, [r5, #0]
 8004554:	e7b1      	b.n	80044ba <__sflush_r+0x1a>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e7ad      	b.n	80044bc <__sflush_r+0x1c>
 8004560:	690f      	ldr	r7, [r1, #16]
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0a9      	beq.n	80044ba <__sflush_r+0x1a>
 8004566:	0793      	lsls	r3, r2, #30
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	bf08      	it	eq
 800456c:	694b      	ldreq	r3, [r1, #20]
 800456e:	600f      	str	r7, [r1, #0]
 8004570:	bf18      	it	ne
 8004572:	2300      	movne	r3, #0
 8004574:	eba6 0807 	sub.w	r8, r6, r7
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	dd9c      	ble.n	80044ba <__sflush_r+0x1a>
 8004580:	6a21      	ldr	r1, [r4, #32]
 8004582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004584:	4643      	mov	r3, r8
 8004586:	463a      	mov	r2, r7
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	2800      	cmp	r0, #0
 800458e:	dc06      	bgt.n	800459e <__sflush_r+0xfe>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800459c:	e78e      	b.n	80044bc <__sflush_r+0x1c>
 800459e:	4407      	add	r7, r0
 80045a0:	eba8 0800 	sub.w	r8, r8, r0
 80045a4:	e7e9      	b.n	800457a <__sflush_r+0xda>
 80045a6:	bf00      	nop
 80045a8:	20400001 	.word	0x20400001

080045ac <_fflush_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	4605      	mov	r5, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	b913      	cbnz	r3, 80045bc <_fflush_r+0x10>
 80045b6:	2500      	movs	r5, #0
 80045b8:	4628      	mov	r0, r5
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	b118      	cbz	r0, 80045c6 <_fflush_r+0x1a>
 80045be:	6983      	ldr	r3, [r0, #24]
 80045c0:	b90b      	cbnz	r3, 80045c6 <_fflush_r+0x1a>
 80045c2:	f7ff fa4f 	bl	8003a64 <__sinit>
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <_fflush_r+0x6c>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d11b      	bne.n	8004604 <_fflush_r+0x58>
 80045cc:	686c      	ldr	r4, [r5, #4]
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <_fflush_r+0xa>
 80045d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d8:	07d0      	lsls	r0, r2, #31
 80045da:	d404      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045dc:	0599      	lsls	r1, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e2:	f7ff fadd 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 80045e6:	4628      	mov	r0, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7ff ff59 	bl	80044a0 <__sflush_r>
 80045ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f0:	07da      	lsls	r2, r3, #31
 80045f2:	4605      	mov	r5, r0
 80045f4:	d4e0      	bmi.n	80045b8 <_fflush_r+0xc>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	d4dd      	bmi.n	80045b8 <_fflush_r+0xc>
 80045fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fe:	f7ff fad0 	bl	8003ba2 <__retarget_lock_release_recursive>
 8004602:	e7d9      	b.n	80045b8 <_fflush_r+0xc>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <_fflush_r+0x70>)
 8004606:	429c      	cmp	r4, r3
 8004608:	d101      	bne.n	800460e <_fflush_r+0x62>
 800460a:	68ac      	ldr	r4, [r5, #8]
 800460c:	e7df      	b.n	80045ce <_fflush_r+0x22>
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <_fflush_r+0x74>)
 8004610:	429c      	cmp	r4, r3
 8004612:	bf08      	it	eq
 8004614:	68ec      	ldreq	r4, [r5, #12]
 8004616:	e7da      	b.n	80045ce <_fflush_r+0x22>
 8004618:	080048b4 	.word	0x080048b4
 800461c:	080048d4 	.word	0x080048d4
 8004620:	08004894 	.word	0x08004894

08004624 <_lseek_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	; (8004644 <_lseek_r+0x20>)
 8004628:	4604      	mov	r4, r0
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	2200      	movs	r2, #0
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7fc fb58 	bl	8000ce8 <_lseek>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_lseek_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_lseek_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000190 	.word	0x20000190

08004648 <__swhatbuf_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460e      	mov	r6, r1
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	2900      	cmp	r1, #0
 8004652:	b096      	sub	sp, #88	; 0x58
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	da07      	bge.n	800466a <__swhatbuf_r+0x22>
 800465a:	2300      	movs	r3, #0
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	89b3      	ldrh	r3, [r6, #12]
 8004660:	061a      	lsls	r2, r3, #24
 8004662:	d410      	bmi.n	8004686 <__swhatbuf_r+0x3e>
 8004664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004668:	e00e      	b.n	8004688 <__swhatbuf_r+0x40>
 800466a:	466a      	mov	r2, sp
 800466c:	f000 f8be 	bl	80047ec <_fstat_r>
 8004670:	2800      	cmp	r0, #0
 8004672:	dbf2      	blt.n	800465a <__swhatbuf_r+0x12>
 8004674:	9a01      	ldr	r2, [sp, #4]
 8004676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800467a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800467e:	425a      	negs	r2, r3
 8004680:	415a      	adcs	r2, r3
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	e7ee      	b.n	8004664 <__swhatbuf_r+0x1c>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	2000      	movs	r0, #0
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	b016      	add	sp, #88	; 0x58
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b002      	add	sp, #8
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	ab01      	add	r3, sp, #4
 80046ae:	466a      	mov	r2, sp
 80046b0:	f7ff ffca 	bl	8004648 <__swhatbuf_r>
 80046b4:	9900      	ldr	r1, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7ff fa73 	bl	8003ba4 <_malloc_r>
 80046be:	b948      	cbnz	r0, 80046d4 <__smakebuf_r+0x44>
 80046c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d4ef      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	e7e3      	b.n	800469c <__smakebuf_r+0xc>
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <__smakebuf_r+0x7c>)
 80046d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	6020      	str	r0, [r4, #0]
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	6163      	str	r3, [r4, #20]
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	6120      	str	r0, [r4, #16]
 80046ea:	b15b      	cbz	r3, 8004704 <__smakebuf_r+0x74>
 80046ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 f88d 	bl	8004810 <_isatty_r>
 80046f6:	b128      	cbz	r0, 8004704 <__smakebuf_r+0x74>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	89a0      	ldrh	r0, [r4, #12]
 8004706:	4305      	orrs	r5, r0
 8004708:	81a5      	strh	r5, [r4, #12]
 800470a:	e7cd      	b.n	80046a8 <__smakebuf_r+0x18>
 800470c:	080039fd 	.word	0x080039fd

08004710 <__malloc_lock>:
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <__malloc_lock+0x8>)
 8004712:	f7ff ba45 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8004716:	bf00      	nop
 8004718:	20000188 	.word	0x20000188

0800471c <__malloc_unlock>:
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <__malloc_unlock+0x8>)
 800471e:	f7ff ba40 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8004722:	bf00      	nop
 8004724:	20000188 	.word	0x20000188

08004728 <_free_r>:
 8004728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472a:	2900      	cmp	r1, #0
 800472c:	d048      	beq.n	80047c0 <_free_r+0x98>
 800472e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004732:	9001      	str	r0, [sp, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f1a1 0404 	sub.w	r4, r1, #4
 800473a:	bfb8      	it	lt
 800473c:	18e4      	addlt	r4, r4, r3
 800473e:	f7ff ffe7 	bl	8004710 <__malloc_lock>
 8004742:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <_free_r+0x9c>)
 8004744:	9801      	ldr	r0, [sp, #4]
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	4615      	mov	r5, r2
 800474a:	b933      	cbnz	r3, 800475a <_free_r+0x32>
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	6014      	str	r4, [r2, #0]
 8004750:	b003      	add	sp, #12
 8004752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004756:	f7ff bfe1 	b.w	800471c <__malloc_unlock>
 800475a:	42a3      	cmp	r3, r4
 800475c:	d90b      	bls.n	8004776 <_free_r+0x4e>
 800475e:	6821      	ldr	r1, [r4, #0]
 8004760:	1862      	adds	r2, r4, r1
 8004762:	4293      	cmp	r3, r2
 8004764:	bf04      	itt	eq
 8004766:	681a      	ldreq	r2, [r3, #0]
 8004768:	685b      	ldreq	r3, [r3, #4]
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	bf04      	itt	eq
 800476e:	1852      	addeq	r2, r2, r1
 8004770:	6022      	streq	r2, [r4, #0]
 8004772:	602c      	str	r4, [r5, #0]
 8004774:	e7ec      	b.n	8004750 <_free_r+0x28>
 8004776:	461a      	mov	r2, r3
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b10b      	cbz	r3, 8004780 <_free_r+0x58>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d9fa      	bls.n	8004776 <_free_r+0x4e>
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	1855      	adds	r5, r2, r1
 8004784:	42a5      	cmp	r5, r4
 8004786:	d10b      	bne.n	80047a0 <_free_r+0x78>
 8004788:	6824      	ldr	r4, [r4, #0]
 800478a:	4421      	add	r1, r4
 800478c:	1854      	adds	r4, r2, r1
 800478e:	42a3      	cmp	r3, r4
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	d1dd      	bne.n	8004750 <_free_r+0x28>
 8004794:	681c      	ldr	r4, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6053      	str	r3, [r2, #4]
 800479a:	4421      	add	r1, r4
 800479c:	6011      	str	r1, [r2, #0]
 800479e:	e7d7      	b.n	8004750 <_free_r+0x28>
 80047a0:	d902      	bls.n	80047a8 <_free_r+0x80>
 80047a2:	230c      	movs	r3, #12
 80047a4:	6003      	str	r3, [r0, #0]
 80047a6:	e7d3      	b.n	8004750 <_free_r+0x28>
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf04      	itt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	bf04      	itt	eq
 80047b8:	1949      	addeq	r1, r1, r5
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	6054      	str	r4, [r2, #4]
 80047be:	e7c7      	b.n	8004750 <_free_r+0x28>
 80047c0:	b003      	add	sp, #12
 80047c2:	bd30      	pop	{r4, r5, pc}
 80047c4:	20000098 	.word	0x20000098

080047c8 <_read_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d07      	ldr	r5, [pc, #28]	; (80047e8 <_read_r+0x20>)
 80047cc:	4604      	mov	r4, r0
 80047ce:	4608      	mov	r0, r1
 80047d0:	4611      	mov	r1, r2
 80047d2:	2200      	movs	r2, #0
 80047d4:	602a      	str	r2, [r5, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f7fc fa26 	bl	8000c28 <_read>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_read_r+0x1e>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_read_r+0x1e>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	20000190 	.word	0x20000190

080047ec <_fstat_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4d07      	ldr	r5, [pc, #28]	; (800480c <_fstat_r+0x20>)
 80047f0:	2300      	movs	r3, #0
 80047f2:	4604      	mov	r4, r0
 80047f4:	4608      	mov	r0, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	f7fc fa5a 	bl	8000cb2 <_fstat>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d102      	bne.n	8004808 <_fstat_r+0x1c>
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	b103      	cbz	r3, 8004808 <_fstat_r+0x1c>
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	bd38      	pop	{r3, r4, r5, pc}
 800480a:	bf00      	nop
 800480c:	20000190 	.word	0x20000190

08004810 <_isatty_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4d06      	ldr	r5, [pc, #24]	; (800482c <_isatty_r+0x1c>)
 8004814:	2300      	movs	r3, #0
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fc fa59 	bl	8000cd2 <_isatty>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_isatty_r+0x1a>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_isatty_r+0x1a>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	20000190 	.word	0x20000190

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
