
Praktikum_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e4  080047e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047ec  080047ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080047f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000078  0800486c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  0800486c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011115  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe0  00000000  00000000  000311bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000331a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027351  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f557  00000000  00000000  0005c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4488  00000000  00000000  0006b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015fa88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  0015fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004724 	.word	0x08004724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004724 	.word	0x08004724

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <check_bit>:
  * @brief  The application entry point.
  * @retval int
  */
uint16_t matrix_state;

char check_bit(int pos){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	return (matrix_state & (1<<pos)) ? 'X' : 'O';
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <check_bit+0x30>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	fa42 f303 	asr.w	r3, r2, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <check_bit+0x20>
 8000584:	2358      	movs	r3, #88	; 0x58
 8000586:	e000      	b.n	800058a <check_bit+0x22>
 8000588:	234f      	movs	r3, #79	; 0x4f
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200000a4 	.word	0x200000a4

0800059c <main>:

int main(void)
{
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	b093      	sub	sp, #76	; 0x4c
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe2b 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f8c3 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f969 	bl	8000880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f937 	bl	8000820 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80005b2:	f000 f90f 	bl	80007d4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80005b6:	485a      	ldr	r0, [pc, #360]	; (8000720 <main+0x184>)
 80005b8:	f002 fd10 	bl	8002fdc <HAL_TIM_Base_Start_IT>
  while (1)
  {


	//print matrix in terminal
	uint8_t row1[15] = {'\0'};
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(row1, "%1c %1c %1c %1c \r\n", check_bit(0), check_bit(4), check_bit(8), check_bit(12));
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ffca 	bl	8000568 <check_bit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461d      	mov	r5, r3
 80005d8:	2004      	movs	r0, #4
 80005da:	f7ff ffc5 	bl	8000568 <check_bit>
 80005de:	4603      	mov	r3, r0
 80005e0:	461e      	mov	r6, r3
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff ffc0 	bl	8000568 <check_bit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461c      	mov	r4, r3
 80005ec:	200c      	movs	r0, #12
 80005ee:	f7ff ffbb 	bl	8000568 <check_bit>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	9400      	str	r4, [sp, #0]
 80005fc:	4633      	mov	r3, r6
 80005fe:	462a      	mov	r2, r5
 8000600:	4948      	ldr	r1, [pc, #288]	; (8000724 <main+0x188>)
 8000602:	f003 fc61 	bl	8003ec8 <siprintf>
	uint8_t row2[15] = {'\0'};
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(row2, "%1c %1c %1c %1c \r\n", check_bit(1), check_bit(5), check_bit(9), check_bit(13));
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffa5 	bl	8000568 <check_bit>
 800061e:	4603      	mov	r3, r0
 8000620:	461d      	mov	r5, r3
 8000622:	2005      	movs	r0, #5
 8000624:	f7ff ffa0 	bl	8000568 <check_bit>
 8000628:	4603      	mov	r3, r0
 800062a:	461e      	mov	r6, r3
 800062c:	2009      	movs	r0, #9
 800062e:	f7ff ff9b 	bl	8000568 <check_bit>
 8000632:	4603      	mov	r3, r0
 8000634:	461c      	mov	r4, r3
 8000636:	200d      	movs	r0, #13
 8000638:	f7ff ff96 	bl	8000568 <check_bit>
 800063c:	4603      	mov	r3, r0
 800063e:	f107 0020 	add.w	r0, r7, #32
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9400      	str	r4, [sp, #0]
 8000646:	4633      	mov	r3, r6
 8000648:	462a      	mov	r2, r5
 800064a:	4936      	ldr	r1, [pc, #216]	; (8000724 <main+0x188>)
 800064c:	f003 fc3c 	bl	8003ec8 <siprintf>
	uint8_t row3[15] = {'\0'};
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(row3, "%1c %1c %1c %1c \r\n", check_bit(2), check_bit(6), check_bit(10), check_bit(14));
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff ff80 	bl	8000568 <check_bit>
 8000668:	4603      	mov	r3, r0
 800066a:	461d      	mov	r5, r3
 800066c:	2006      	movs	r0, #6
 800066e:	f7ff ff7b 	bl	8000568 <check_bit>
 8000672:	4603      	mov	r3, r0
 8000674:	461e      	mov	r6, r3
 8000676:	200a      	movs	r0, #10
 8000678:	f7ff ff76 	bl	8000568 <check_bit>
 800067c:	4603      	mov	r3, r0
 800067e:	461c      	mov	r4, r3
 8000680:	200e      	movs	r0, #14
 8000682:	f7ff ff71 	bl	8000568 <check_bit>
 8000686:	4603      	mov	r3, r0
 8000688:	f107 0010 	add.w	r0, r7, #16
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	9400      	str	r4, [sp, #0]
 8000690:	4633      	mov	r3, r6
 8000692:	462a      	mov	r2, r5
 8000694:	4923      	ldr	r1, [pc, #140]	; (8000724 <main+0x188>)
 8000696:	f003 fc17 	bl	8003ec8 <siprintf>
	uint8_t row4[15] = {'\0'};
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(row4, "%1c %1c %1c %1c \r\n\n\n", check_bit(3), check_bit(7), check_bit(11), check_bit(15));
 80006aa:	2003      	movs	r0, #3
 80006ac:	f7ff ff5c 	bl	8000568 <check_bit>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461d      	mov	r5, r3
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff ff57 	bl	8000568 <check_bit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461e      	mov	r6, r3
 80006be:	200b      	movs	r0, #11
 80006c0:	f7ff ff52 	bl	8000568 <check_bit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461c      	mov	r4, r3
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff ff4d 	bl	8000568 <check_bit>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4638      	mov	r0, r7
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9400      	str	r4, [sp, #0]
 80006d6:	4633      	mov	r3, r6
 80006d8:	462a      	mov	r2, r5
 80006da:	4913      	ldr	r1, [pc, #76]	; (8000728 <main+0x18c>)
 80006dc:	f003 fbf4 	bl	8003ec8 <siprintf>

	HAL_UART_Transmit(&huart2, row1, sizeof(row1), 100);
 80006e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	220f      	movs	r2, #15
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <main+0x190>)
 80006ea:	f002 ff35 	bl	8003558 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, row2, sizeof(row2), 100);
 80006ee:	f107 0120 	add.w	r1, r7, #32
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	220f      	movs	r2, #15
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <main+0x190>)
 80006f8:	f002 ff2e 	bl	8003558 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, row3, sizeof(row3), 100);
 80006fc:	f107 0110 	add.w	r1, r7, #16
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	220f      	movs	r2, #15
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <main+0x190>)
 8000706:	f002 ff27 	bl	8003558 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, row4, sizeof(row4), 100);
 800070a:	4639      	mov	r1, r7
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	220f      	movs	r2, #15
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <main+0x190>)
 8000712:	f002 ff21 	bl	8003558 <HAL_UART_Transmit>

	HAL_Delay(2000);
 8000716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071a:	f000 fdeb 	bl	80012f4 <HAL_Delay>
  {
 800071e:	e74d      	b.n	80005bc <main+0x20>
 8000720:	20000134 	.word	0x20000134
 8000724:	0800473c 	.word	0x0800473c
 8000728:	08004750 	.word	0x08004750
 800072c:	200000ac 	.word	0x200000ac

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2244      	movs	r2, #68	; 0x44
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fbba 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000756:	f001 f8eb 	bl	8001930 <HAL_PWREx_ControlVoltageScaling>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000760:	f000 fbda 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800077e:	230a      	movs	r3, #10
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f922 	bl	80019dc <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800079e:	f000 fbbb 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fcf4 	bl	80021a8 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fba7 	bl	8000f18 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3758      	adds	r7, #88	; 0x58
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

//80MHz / 8000 = 10 kHz -> 1 tick every 0.0001 sec
//0.0001 sec * 100 = 0.01 sec -> timer interrupt every 10 ms

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_TIM16_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_TIM16_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_TIM16_Init+0x44>)
 80007e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_TIM16_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_TIM16_Init+0x44>)
 80007ee:	2263      	movs	r2, #99	; 0x63
 80007f0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_TIM16_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_TIM16_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_TIM16_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_TIM16_Init+0x44>)
 8000806:	f002 fb91 	bl	8002f2c <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000810:	f000 fb82 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000134 	.word	0x20000134
 800081c:	40014400 	.word	0x40014400

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_USART2_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000864:	f002 fe2a 	bl	80034bc <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 fb53 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000ac 	.word	0x200000ac
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x148>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x148>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a45      	ldr	r2, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b3a      	ldr	r3, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x148>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_green_Pin|LED_yellow_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2103      	movs	r1, #3
 80008fa:	4834      	ldr	r0, [pc, #208]	; (80009cc <MX_GPIO_Init+0x14c>)
 80008fc:	f000 fff2 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 ffec 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_red_Pin|matrix_1_Pin|matrix_2_Pin|matrix_3_Pin
 800090c:	2200      	movs	r2, #0
 800090e:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000912:	482f      	ldr	r0, [pc, #188]	; (80009d0 <MX_GPIO_Init+0x150>)
 8000914:	f000 ffe6 	bl	80018e4 <HAL_GPIO_WritePin>
                          |matrix_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x154>)
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_GPIO_Init+0x14c>)
 800092e:	f000 fe17 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_green_Pin LED_yellow_Pin */
  GPIO_InitStruct.Pin = LED_green_Pin|LED_yellow_Pin;
 8000932:	2303      	movs	r3, #3
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4820      	ldr	r0, [pc, #128]	; (80009cc <MX_GPIO_Init+0x14c>)
 800094a:	f000 fe09 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_down_Pin Button_up_Pin */
  GPIO_InitStruct.Pin = Button_down_Pin|Button_up_Pin;
 800094e:	2312      	movs	r3, #18
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fdfc 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 fded 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_red_Pin matrix_1_Pin matrix_2_Pin matrix_3_Pin
                           matrix_4_Pin */
  GPIO_InitStruct.Pin = LED_red_Pin|matrix_1_Pin|matrix_2_Pin|matrix_3_Pin
 8000986:	f24f 0301 	movw	r3, #61441	; 0xf001
 800098a:	617b      	str	r3, [r7, #20]
                          |matrix_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0x150>)
 80009a0:	f000 fdde 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : matrix_5_Pin matrix_6_Pin matrix_7_Pin matrix_8_Pin */
  GPIO_InitStruct.Pin = matrix_5_Pin|matrix_6_Pin|matrix_7_Pin|matrix_8_Pin;
 80009a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x14c>)
 80009ba:	f000 fdd1 	bl	8001560 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800
 80009d0:	48000400 	.word	0x48000400
 80009d4:	10210000 	.word	0x10210000

080009d8 <read_matrix>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */

uint16_t read_matrix(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	uint16_t matrix = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	80fb      	strh	r3, [r7, #6]
		// |	|	|   |
		// 3----7---11--14
		// |	|	|   |
		// 4----8---12--15
	//set 1 to High
	HAL_GPIO_WritePin(matrix_1_GPIO_Port, matrix_1_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e8:	48b5      	ldr	r0, [pc, #724]	; (8000cc0 <read_matrix+0x2e8>)
 80009ea:	f000 ff7b 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_2_GPIO_Port, matrix_2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	48b2      	ldr	r0, [pc, #712]	; (8000cc0 <read_matrix+0x2e8>)
 80009f6:	f000 ff75 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_3_GPIO_Port, matrix_3_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a00:	48af      	ldr	r0, [pc, #700]	; (8000cc0 <read_matrix+0x2e8>)
 8000a02:	f000 ff6f 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_4_GPIO_Port, matrix_4_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0c:	48ac      	ldr	r0, [pc, #688]	; (8000cc0 <read_matrix+0x2e8>)
 8000a0e:	f000 ff69 	bl	80018e4 <HAL_GPIO_WritePin>

	//read pins 5 to 8
	if(HAL_GPIO_ReadPin(matrix_5_GPIO_Port, matrix_5_Pin)) matrix |= (1<<0);
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	48ab      	ldr	r0, [pc, #684]	; (8000cc4 <read_matrix+0x2ec>)
 8000a16:	f000 ff4d 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d004      	beq.n	8000a2a <read_matrix+0x52>
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	e003      	b.n	8000a32 <read_matrix+0x5a>
	else matrix &= ~(1<<0);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_6_GPIO_Port, matrix_6_Pin)) matrix |= (1<<1);
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	48a3      	ldr	r0, [pc, #652]	; (8000cc4 <read_matrix+0x2ec>)
 8000a36:	f000 ff3d 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <read_matrix+0x72>
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	e003      	b.n	8000a52 <read_matrix+0x7a>
	else matrix &= ~(1<<1);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_7_GPIO_Port, matrix_7_Pin)) matrix |= (1<<2);
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	489b      	ldr	r0, [pc, #620]	; (8000cc4 <read_matrix+0x2ec>)
 8000a58:	f000 ff2c 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <read_matrix+0x94>
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	80fb      	strh	r3, [r7, #6]
 8000a6a:	e003      	b.n	8000a74 <read_matrix+0x9c>
	else matrix &= ~(1<<2);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	f023 0304 	bic.w	r3, r3, #4
 8000a72:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_8_GPIO_Port, matrix_8_Pin)) matrix |= (1<<3);
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4892      	ldr	r0, [pc, #584]	; (8000cc4 <read_matrix+0x2ec>)
 8000a7a:	f000 ff1b 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <read_matrix+0xb6>
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	80fb      	strh	r3, [r7, #6]
 8000a8c:	e003      	b.n	8000a96 <read_matrix+0xbe>
	else matrix &= ~(1<<3);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f023 0308 	bic.w	r3, r3, #8
 8000a94:	80fb      	strh	r3, [r7, #6]

	//set 2 to High
	HAL_GPIO_WritePin(matrix_1_GPIO_Port, matrix_1_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	4888      	ldr	r0, [pc, #544]	; (8000cc0 <read_matrix+0x2e8>)
 8000a9e:	f000 ff21 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_2_GPIO_Port, matrix_2_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4885      	ldr	r0, [pc, #532]	; (8000cc0 <read_matrix+0x2e8>)
 8000aaa:	f000 ff1b 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_3_GPIO_Port, matrix_3_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	4882      	ldr	r0, [pc, #520]	; (8000cc0 <read_matrix+0x2e8>)
 8000ab6:	f000 ff15 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_4_GPIO_Port, matrix_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	487f      	ldr	r0, [pc, #508]	; (8000cc0 <read_matrix+0x2e8>)
 8000ac2:	f000 ff0f 	bl	80018e4 <HAL_GPIO_WritePin>

	//read pins 5 to 8
	if(HAL_GPIO_ReadPin(matrix_5_GPIO_Port, matrix_5_Pin)) matrix |= (1<<4);
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	487e      	ldr	r0, [pc, #504]	; (8000cc4 <read_matrix+0x2ec>)
 8000aca:	f000 fef3 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <read_matrix+0x106>
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	80fb      	strh	r3, [r7, #6]
 8000adc:	e003      	b.n	8000ae6 <read_matrix+0x10e>
	else matrix &= ~(1<<4);
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f023 0310 	bic.w	r3, r3, #16
 8000ae4:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_6_GPIO_Port, matrix_6_Pin)) matrix |= (1<<5);
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	4876      	ldr	r0, [pc, #472]	; (8000cc4 <read_matrix+0x2ec>)
 8000aea:	f000 fee3 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <read_matrix+0x126>
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	f043 0320 	orr.w	r3, r3, #32
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	e003      	b.n	8000b06 <read_matrix+0x12e>
	else matrix &= ~(1<<5);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	f023 0320 	bic.w	r3, r3, #32
 8000b04:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_7_GPIO_Port, matrix_7_Pin)) matrix |= (1<<6);
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	486e      	ldr	r0, [pc, #440]	; (8000cc4 <read_matrix+0x2ec>)
 8000b0c:	f000 fed2 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d004      	beq.n	8000b20 <read_matrix+0x148>
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	e003      	b.n	8000b28 <read_matrix+0x150>
	else matrix &= ~(1<<6);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b26:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_8_GPIO_Port, matrix_8_Pin)) matrix |= (1<<7);
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	4865      	ldr	r0, [pc, #404]	; (8000cc4 <read_matrix+0x2ec>)
 8000b2e:	f000 fec1 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <read_matrix+0x16a>
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	e003      	b.n	8000b4a <read_matrix+0x172>
	else matrix &= ~(1<<7);
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b48:	80fb      	strh	r3, [r7, #6]

	//set 3 to High
	HAL_GPIO_WritePin(matrix_1_GPIO_Port, matrix_1_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b50:	485b      	ldr	r0, [pc, #364]	; (8000cc0 <read_matrix+0x2e8>)
 8000b52:	f000 fec7 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_2_GPIO_Port, matrix_2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4858      	ldr	r0, [pc, #352]	; (8000cc0 <read_matrix+0x2e8>)
 8000b5e:	f000 fec1 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_3_GPIO_Port, matrix_3_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b68:	4855      	ldr	r0, [pc, #340]	; (8000cc0 <read_matrix+0x2e8>)
 8000b6a:	f000 febb 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_4_GPIO_Port, matrix_4_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4852      	ldr	r0, [pc, #328]	; (8000cc0 <read_matrix+0x2e8>)
 8000b76:	f000 feb5 	bl	80018e4 <HAL_GPIO_WritePin>

	//read pins 5 to 8
	if(HAL_GPIO_ReadPin(matrix_5_GPIO_Port, matrix_5_Pin)) matrix |= (1<<8);
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4851      	ldr	r0, [pc, #324]	; (8000cc4 <read_matrix+0x2ec>)
 8000b7e:	f000 fe99 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d004      	beq.n	8000b92 <read_matrix+0x1ba>
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	80fb      	strh	r3, [r7, #6]
 8000b90:	e003      	b.n	8000b9a <read_matrix+0x1c2>
	else matrix &= ~(1<<8);
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b98:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_6_GPIO_Port, matrix_6_Pin)) matrix |= (1<<9);
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4849      	ldr	r0, [pc, #292]	; (8000cc4 <read_matrix+0x2ec>)
 8000b9e:	f000 fe89 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <read_matrix+0x1da>
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	e003      	b.n	8000bba <read_matrix+0x1e2>
	else matrix &= ~(1<<9);
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bb8:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_7_GPIO_Port, matrix_7_Pin)) matrix |= (1<<10);
 8000bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbe:	4841      	ldr	r0, [pc, #260]	; (8000cc4 <read_matrix+0x2ec>)
 8000bc0:	f000 fe78 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <read_matrix+0x1fc>
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	e003      	b.n	8000bdc <read_matrix+0x204>
	else matrix &= ~(1<<10);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bda:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_8_GPIO_Port, matrix_8_Pin)) matrix |= (1<<11);
 8000bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be0:	4838      	ldr	r0, [pc, #224]	; (8000cc4 <read_matrix+0x2ec>)
 8000be2:	f000 fe67 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <read_matrix+0x21e>
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	e003      	b.n	8000bfe <read_matrix+0x226>
	else matrix &= ~(1<<11);
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bfc:	80fb      	strh	r3, [r7, #6]

	//set 4 to High
	HAL_GPIO_WritePin(matrix_1_GPIO_Port, matrix_1_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	482e      	ldr	r0, [pc, #184]	; (8000cc0 <read_matrix+0x2e8>)
 8000c06:	f000 fe6d 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_2_GPIO_Port, matrix_2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	482b      	ldr	r0, [pc, #172]	; (8000cc0 <read_matrix+0x2e8>)
 8000c12:	f000 fe67 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_3_GPIO_Port, matrix_3_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1c:	4828      	ldr	r0, [pc, #160]	; (8000cc0 <read_matrix+0x2e8>)
 8000c1e:	f000 fe61 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(matrix_4_GPIO_Port, matrix_4_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c28:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <read_matrix+0x2e8>)
 8000c2a:	f000 fe5b 	bl	80018e4 <HAL_GPIO_WritePin>

	//read pins 5 to 8
	if(HAL_GPIO_ReadPin(matrix_5_GPIO_Port, matrix_5_Pin)) matrix |= (1<<12);
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	4824      	ldr	r0, [pc, #144]	; (8000cc4 <read_matrix+0x2ec>)
 8000c32:	f000 fe3f 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <read_matrix+0x26e>
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	e003      	b.n	8000c4e <read_matrix+0x276>
	else matrix &= ~(1<<12);
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c4c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_6_GPIO_Port, matrix_6_Pin)) matrix |= (1<<13);
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <read_matrix+0x2ec>)
 8000c52:	f000 fe2f 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <read_matrix+0x28e>
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	e003      	b.n	8000c6e <read_matrix+0x296>
	else matrix &= ~(1<<13);
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c6c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_7_GPIO_Port, matrix_7_Pin)) matrix |= (1<<14);
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <read_matrix+0x2ec>)
 8000c74:	f000 fe1e 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d004      	beq.n	8000c88 <read_matrix+0x2b0>
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	e003      	b.n	8000c90 <read_matrix+0x2b8>
	else matrix &= ~(1<<14);
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c8e:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(matrix_8_GPIO_Port, matrix_8_Pin)) matrix |= (1<<15);
 8000c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <read_matrix+0x2ec>)
 8000c96:	f000 fe0d 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <read_matrix+0x2d6>
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	e003      	b.n	8000cb6 <read_matrix+0x2de>
	else matrix &= ~(1<<15);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cb4:	80fb      	strh	r3, [r7, #6]

	return matrix;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	48000800 	.word	0x48000800

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
uint16_t counter0_matrix =0xFF, counter1_matrix= 0xFF;

uint16_t matrix_pin;

//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a83      	ldr	r2, [pc, #524]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	f040 80ff 	bne.w	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x210>
		uint8_t button_changed;

		if(HAL_GPIO_ReadPin(Button_up_GPIO_Port, Button_up_Pin)) button_pin |= (1<<button_up);
 8000cda:	2110      	movs	r1, #16
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 fde8 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x32>
 8000cea:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b7b      	ldr	r3, [pc, #492]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e006      	b.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x40>
		else button_pin &= ~(1<<button_up);
 8000cfa:	4b7a      	ldr	r3, [pc, #488]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b77      	ldr	r3, [pc, #476]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d06:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(Button_down_GPIO_Port, Button_down_Pin)) button_pin |= (1<<button_down);
 8000d08:	2102      	movs	r1, #2
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fdd1 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d007      	beq.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000d18:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b70      	ldr	r3, [pc, #448]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e006      	b.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x6e>
		else button_pin &= ~(1<<button_down);
 8000d28:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f023 0302 	bic.w	r3, r3, #2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b6c      	ldr	r3, [pc, #432]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d34:	701a      	strb	r2, [r3, #0]

		button_changed = button_state ^ button_pin; //bit = 1 -> button changed
 8000d36:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4053      	eors	r3, r2
 8000d40:	73fb      	strb	r3, [r7, #15]

		// count to 4 or reset if button_changed != 1	Round:	1	|	2	|	3	|	4	|
		counter0 = ~(counter0 & button_changed);		//0	|	1	|	0	|	1	|
 8000d42:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b66      	ldr	r3, [pc, #408]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d52:	701a      	strb	r2, [r3, #0]
		counter1 = counter0 ^ (counter1 & button_changed);	//1	|	0	|	0	|	1	|
 8000d54:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b63      	ldr	r3, [pc, #396]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4053      	eors	r3, r2
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d68:	701a      	strb	r2, [r3, #0]

		button_changed &= counter0 & counter1; //change button state only if timer rolls over!
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4013      	ands	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	73fb      	strb	r3, [r7, #15]
		button_state ^= button_changed; //toggle state
 8000d7c:	4b5a      	ldr	r3, [pc, #360]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4053      	eors	r3, r2
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b58      	ldr	r3, [pc, #352]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d88:	701a      	strb	r2, [r3, #0]

		//count how long button up is pressed in 10 ms
		if(button_state & (1<<button_up)) counter_up++;
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0xda>
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000da0:	701a      	strb	r2, [r3, #0]

		//count how long button down is pressed in 10 ms
		if(button_state & (1<<button_down)) counter_down++;
 8000da2:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000db8:	701a      	strb	r2, [r3, #0]

		if(~button_state & button_changed & (1<<button_up)){// stopped pressing button up
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00f      	beq.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x124>
			counter += (counter_up >= 100) ? 10 : 1; //increase counter with 10 if button is pressed longer than 1 sec, else increase 1
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b63      	cmp	r3, #99	; 0x63
 8000dd2:	d901      	bls.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000dd4:	220a      	movs	r2, #10
 8000dd6:	e000      	b.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x112>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000de4:	701a      	strb	r2, [r3, #0]
			counter_up = 0; //reset counter
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		}

		if(~button_state & button_changed & (1<<button_down)){// stopped pressing button down
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	4013      	ands	r3, r2
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00f      	beq.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x156>
			counter -= (counter_down >= 100) ? 10 : 1; //decrease counter with 10 if button is pressed longer than 1 sec, else decrease 1
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b63      	cmp	r3, #99	; 0x63
 8000e08:	d901      	bls.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x146>
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	e000      	b.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e16:	701a      	strb	r2, [r3, #0]
			counter_down = 0; //reset counter
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		}

		// turn on LEDs
		if(counter >= 5)HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_SET);
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d905      	bls.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4835      	ldr	r0, [pc, #212]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e2c:	f000 fd5a 	bl	80018e4 <HAL_GPIO_WritePin>
 8000e30:	e004      	b.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x174>
		else HAL_GPIO_WritePin(LED_red_GPIO_Port, LED_red_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2101      	movs	r1, #1
 8000e36:	4832      	ldr	r0, [pc, #200]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000e38:	f000 fd54 	bl	80018e4 <HAL_GPIO_WritePin>

		if(counter >= 10)HAL_GPIO_WritePin(LED_yellow_GPIO_Port, LED_yellow_Pin, GPIO_PIN_SET);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d905      	bls.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x188>
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	482e      	ldr	r0, [pc, #184]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e4a:	f000 fd4b 	bl	80018e4 <HAL_GPIO_WritePin>
 8000e4e:	e004      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x192>
		else HAL_GPIO_WritePin(LED_yellow_GPIO_Port, LED_yellow_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	482b      	ldr	r0, [pc, #172]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e56:	f000 fd45 	bl	80018e4 <HAL_GPIO_WritePin>

		if(counter >= 25)HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b18      	cmp	r3, #24
 8000e60:	d905      	bls.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	4827      	ldr	r0, [pc, #156]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e68:	f000 fd3c 	bl	80018e4 <HAL_GPIO_WritePin>
 8000e6c:	e004      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		else HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2101      	movs	r1, #1
 8000e72:	4824      	ldr	r0, [pc, #144]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000e74:	f000 fd36 	bl	80018e4 <HAL_GPIO_WritePin>
		// |	|	|	|
		// +----+---+---+-----8
		uint16_t matrix_changed;

		//Todo: read matrix into matrix_pin
		matrix_pin = read_matrix();
 8000e78:	f7ff fdae 	bl	80009d8 <read_matrix>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e82:	801a      	strh	r2, [r3, #0]

		matrix_changed = matrix_state ^ matrix_pin;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000e86:	881a      	ldrh	r2, [r3, #0]
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4053      	eors	r3, r2
 8000e8e:	81bb      	strh	r3, [r7, #12]
		counter0_matrix = ~(counter0_matrix & matrix_changed);
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ea0:	801a      	strh	r2, [r3, #0]
		counter1_matrix = counter0_matrix ^ (counter1_matrix & matrix_changed);
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4053      	eors	r3, r2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000eb6:	801a      	strh	r2, [r3, #0]

		matrix_changed &= counter0_matrix & counter1_matrix;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000eba:	881a      	ldrh	r2, [r3, #0]
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	81bb      	strh	r3, [r7, #12]
		matrix_state ^= matrix_changed;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ecc:	881a      	ldrh	r2, [r3, #0]
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ed6:	801a      	strh	r2, [r3, #0]

	}

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000134 	.word	0x20000134
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	200000a9 	.word	0x200000a9
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000001 	.word	0x20000001
 8000ef4:	200000a2 	.word	0x200000a2
 8000ef8:	20000130 	.word	0x20000130
 8000efc:	200000a8 	.word	0x200000a8
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	200000a6 	.word	0x200000a6
 8000f0c:	200000a4 	.word	0x200000a4
 8000f10:	20000002 	.word	0x20000002
 8000f14:	20000004 	.word	0x20000004

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6613      	str	r3, [r2, #96]	; 0x60
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x44>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d113      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2019      	movs	r0, #25
 8000f9c:	f000 faa9 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 fac2 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40014400 	.word	0x40014400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	; 0xb0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2288      	movs	r2, #136	; 0x88
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ff6d 	bl	8003eb8 <memset>
  if(huart->Instance==USART2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <HAL_UART_MspInit+0xb0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13b      	bne.n	8001060 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fadd 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001000:	f7ff ff8a 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_UART_MspInit+0xb4>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_UART_MspInit+0xb4>)
 800100a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100e:	6593      	str	r3, [r2, #88]	; 0x58
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_UART_MspInit+0xb4>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_UART_MspInit+0xb4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <HAL_UART_MspInit+0xb4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_UART_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f000 fa80 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	37b0      	adds	r7, #176	; 0xb0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f8fa 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010ca:	f001 fff7 	bl	80030bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000134 	.word	0x20000134

080010d8 <_sbrk>:
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
 8001108:	f002 feac 	bl	8003e64 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20018000 	.word	0x20018000
 8001138:	00000400 	.word	0x00000400
 800113c:	20000094 	.word	0x20000094
 8001140:	20000198 	.word	0x20000198

08001144 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <SystemInit+0x5c>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <SystemInit+0x5c>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <SystemInit+0x60>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <SystemInit+0x60>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <SystemInit+0x60>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <SystemInit+0x60>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <SystemInit+0x60>)
 8001170:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001174:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001178:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <SystemInit+0x60>)
 800117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001180:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <SystemInit+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <SystemInit+0x60>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SystemInit+0x60>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	40021000 	.word	0x40021000

080011a8 <Reset_Handler>:
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopForever+0x2>
 80011ac:	f7ff ffca 	bl	8001144 <SystemInit>
 80011b0:	2100      	movs	r1, #0
 80011b2:	e003      	b.n	80011bc <LoopCopyDataInit>

080011b4 <CopyDataInit>:
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <LoopForever+0x6>)
 80011b6:	585b      	ldr	r3, [r3, r1]
 80011b8:	5043      	str	r3, [r0, r1]
 80011ba:	3104      	adds	r1, #4

080011bc <LoopCopyDataInit>:
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <LoopForever+0xa>)
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <LoopForever+0xe>)
 80011c0:	1842      	adds	r2, r0, r1
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3f6      	bcc.n	80011b4 <CopyDataInit>
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <LoopForever+0x12>)
 80011c8:	e002      	b.n	80011d0 <LoopFillZerobss>

080011ca <FillZerobss>:
 80011ca:	2300      	movs	r3, #0
 80011cc:	f842 3b04 	str.w	r3, [r2], #4

080011d0 <LoopFillZerobss>:
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <LoopForever+0x16>)
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3f9      	bcc.n	80011ca <FillZerobss>
 80011d6:	f002 fe4b 	bl	8003e70 <__libc_init_array>
 80011da:	f7ff f9df 	bl	800059c <main>

080011de <LoopForever>:
 80011de:	e7fe      	b.n	80011de <LoopForever>
 80011e0:	20018000 	.word	0x20018000
 80011e4:	080047f4 	.word	0x080047f4
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000078 	.word	0x20000078
 80011f0:	20000078 	.word	0x20000078
 80011f4:	20000194 	.word	0x20000194

080011f8 <ADC1_2_IRQHandler>:
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_Init+0x3c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_Init+0x3c>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f000 f962 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f80f 	bl	800123c <HAL_InitTick>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	e001      	b.n	800122e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122a:	f7ff fe7b 	bl	8000f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800122e:	79fb      	ldrb	r3, [r7, #7]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_InitTick+0x6c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d023      	beq.n	8001298 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_InitTick+0x70>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_InitTick+0x6c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f96d 	bl	8001546 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10f      	bne.n	8001292 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d809      	bhi.n	800128c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	f000 f937 	bl	80014f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_InitTick+0x74>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e007      	b.n	800129c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e004      	b.n	800129c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e001      	b.n	800129c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000010 	.word	0x20000010
 80012ac:	20000008 	.word	0x20000008
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000010 	.word	0x20000010
 80012d8:	20000180 	.word	0x20000180

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000180 	.word	0x20000180

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000010 	.word	0x20000010

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e17f      	b.n	8001870 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8171 	beq.w	800186a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d00b      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159c:	2b11      	cmp	r3, #17
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d130      	bne.n	800160a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015de:	2201      	movs	r2, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b03      	cmp	r3, #3
 8001614:	d118      	bne.n	8001648 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x128>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b12      	cmp	r3, #18
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ac 	beq.w	800186a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172a:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <HAL_GPIO_Init+0x334>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	; (8001898 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	; (800189c <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x22a>
 8001786:	2306      	movs	r3, #6
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178a:	2307      	movs	r3, #7
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_GPIO_Init+0x334>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_GPIO_Init+0x350>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_GPIO_Init+0x350>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae78 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00
 80018a4:	48001000 	.word	0x48001000
 80018a8:	48001400 	.word	0x48001400
 80018ac:	48001800 	.word	0x48001800
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001900:	e002      	b.n	8001908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_PWREx_GetVoltageRange+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000

08001930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193e:	d130      	bne.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194c:	d038      	beq.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2232      	movs	r2, #50	; 0x32
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001974:	e002      	b.n	800197c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b01      	subs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d102      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x60>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f2      	bne.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199c:	d110      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e00f      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d007      	beq.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40007000 	.word	0x40007000
 80019d4:	20000008 	.word	0x20000008
 80019d8:	431bde83 	.word	0x431bde83

080019dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3d4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4ba1      	ldr	r3, [pc, #644]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80e4 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_RCC_OscConfig+0x4a>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	f040 808b 	bne.w	8001b34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 8087 	bne.w	8001b34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a26:	4b93      	ldr	r3, [pc, #588]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x62>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e3ac      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_RCC_OscConfig+0x7c>
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_OscConfig+0x88>
 8001a58:	4b86      	ldr	r3, [pc, #536]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d223      	bcs.n	8001ab0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fd41 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e38d      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a7c      	ldr	r2, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4977      	ldr	r1, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4972      	ldr	r1, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
 8001aae:	e025      	b.n	8001afc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab0:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6f      	ldr	r2, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	496a      	ldr	r1, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ace:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fd01 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e34d      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afc:	f000 fc36 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	495a      	ldr	r1, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_RCC_OscConfig+0x2a0>)
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b1c:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x2a4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb8b 	bl	800123c <HAL_InitTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d052      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	e331      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d032      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fbc8 	bl	80012dc <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b50:	f7ff fbc4 	bl	80012dc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e31a      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b62:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	493b      	ldr	r1, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8c:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e01a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fb95 	bl	80012dc <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fb91 	bl	80012dc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e2e7      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x1da>
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d074      	beq.n	8001cce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x21a>
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d10e      	bne.n	8001c0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d10b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d064      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d160      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e2c4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x24a>
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e01d      	b.n	8001c62 <HAL_RCC_OscConfig+0x286>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x26e>
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x286>
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fb37 	bl	80012dc <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c70:	e011      	b.n	8001c96 <HAL_RCC_OscConfig+0x2ba>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08004768 	.word	0x08004768
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb2a 	bl	80012dc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e280      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c96:	4baf      	ldr	r3, [pc, #700]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2a8>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb1a 	bl	80012dc <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb16 	bl	80012dc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e26c      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cbe:	4ba5      	ldr	r3, [pc, #660]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x2d0>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d060      	beq.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x310>
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d116      	bne.n	8001d1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x328>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e249      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b93      	ldr	r3, [pc, #588]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	4990      	ldr	r1, [pc, #576]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d18:	e040      	b.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d023      	beq.n	8001d6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d22:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a8b      	ldr	r2, [pc, #556]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fad5 	bl	80012dc <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff fad1 	bl	80012dc <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e227      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d48:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	497c      	ldr	r1, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e018      	b.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a79      	ldr	r2, [pc, #484]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fab1 	bl	80012dc <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff faad 	bl	80012dc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e203      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01c      	beq.n	8001dea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fa8c 	bl	80012dc <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fa88 	bl	80012dc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1de      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dda:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ef      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x3ec>
 8001de8:	e01b      	b.n	8001e22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fa6f 	bl	80012dc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff fa6b 	bl	80012dc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1c1      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e14:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ef      	bne.n	8001e02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a6 	beq.w	8001f7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d118      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e74:	f7ff fa32 	bl	80012dc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7ff fa2e 	bl	80012dc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e184      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4d8>
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb2:	e024      	b.n	8001efe <HAL_RCC_OscConfig+0x522>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d110      	bne.n	8001ede <HAL_RCC_OscConfig+0x502>
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001edc:	e00f      	b.n	8001efe <HAL_RCC_OscConfig+0x522>
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f9e9 	bl	80012dc <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f9e5 	bl	80012dc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e139      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ed      	beq.n	8001f0e <HAL_RCC_OscConfig+0x532>
 8001f32:	e01a      	b.n	8001f6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff f9d2 	bl	80012dc <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f9ce 	bl	80012dc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d906      	bls.n	8001f5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e122      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5c:	4b90      	ldr	r3, [pc, #576]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e8      	bne.n	8001f3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6a:	7ffb      	ldrb	r3, [r7, #31]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a8a      	ldr	r2, [pc, #552]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8108 	beq.w	8002196 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	f040 80d0 	bne.w	8002130 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f90:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d130      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d127      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11f      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd0:	2a07      	cmp	r2, #7
 8001fd2:	bf14      	ite	ne
 8001fd4:	2201      	movne	r2, #1
 8001fd6:	2200      	moveq	r2, #0
 8001fd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d06e      	beq.n	80020e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d069      	beq.n	80020e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800200c:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b7      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002028:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002034:	f7ff f952 	bl	80012dc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f94e 	bl	80012dc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0a4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204e:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x7c8>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206a:	3a01      	subs	r2, #1
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	4311      	orrs	r1, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002074:	0212      	lsls	r2, r2, #8
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800207c:	0852      	lsrs	r2, r2, #1
 800207e:	3a01      	subs	r2, #1
 8002080:	0552      	lsls	r2, r2, #21
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	3a01      	subs	r2, #1
 800208c:	0652      	lsls	r2, r2, #25
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002094:	0912      	lsrs	r2, r2, #4
 8002096:	0452      	lsls	r2, r2, #17
 8002098:	430a      	orrs	r2, r1
 800209a:	4941      	ldr	r1, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b8:	f7ff f910 	bl	80012dc <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f90c 	bl	80012dc <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e062      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020de:	e05a      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e059      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d152      	bne.n	8002196 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002108:	f7ff f8e8 	bl	80012dc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f8e4 	bl	80012dc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e03a      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x734>
 800212e:	e032      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d02d      	beq.n	8002192 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800213c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002140:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002154:	f023 0303 	bic.w	r3, r3, #3
 8002158:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002160:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002168:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f8b7 	bl	80012dc <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff f8b3 	bl	80012dc <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e009      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x796>
 8002190:	e001      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	f99d808c 	.word	0xf99d808c

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0c8      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4961      	ldr	r1, [pc, #388]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b0      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d04c      	beq.n	8002292 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d121      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e09e      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d115      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e092      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e086      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e07e      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	493f      	ldr	r1, [pc, #252]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002262:	f7ff f83b 	bl	80012dc <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002268:	e00a      	b.n	8002280 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226a:	f7ff f837 	bl	80012dc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e066      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 020c 	and.w	r2, r3, #12
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	429a      	cmp	r2, r3
 8002290:	d1eb      	bne.n	800226a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	492c      	ldr	r1, [pc, #176]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4924      	ldr	r1, [pc, #144]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e036      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4910      	ldr	r1, [pc, #64]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231e:	f000 f825 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490c      	ldr	r1, [pc, #48]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe ff7a 	bl	800123c <HAL_InitTick>
 8002348:	4603      	mov	r3, r0
 800234a:	72fb      	strb	r3, [r7, #11]

  return status;
 800234c:	7afb      	ldrb	r3, [r7, #11]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08004768 	.word	0x08004768
 8002364:	20000008 	.word	0x20000008
 8002368:	2000000c 	.word	0x2000000c

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d121      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d11e      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e004      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d134      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0xa6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xac>
 8002410:	e005      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 8002414:	617b      	str	r3, [r7, #20]
      break;
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 800241a:	617b      	str	r3, [r7, #20]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	617b      	str	r3, [r7, #20]
      break;
 8002422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	3301      	adds	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002464:	69bb      	ldr	r3, [r7, #24]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08004780 	.word	0x08004780
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08004778 	.word	0x08004778

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024cc:	f7ff ffda 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0adb      	lsrs	r3, r3, #11
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004778 	.word	0x08004778

080024f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800250c:	f7ff fa02 	bl	8001914 <HAL_PWREx_GetVoltageRange>
 8002510:	6178      	str	r0, [r7, #20]
 8002512:	e014      	b.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff f9f2 	bl	8001914 <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d10b      	bne.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d919      	bls.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2ba0      	cmp	r3, #160	; 0xa0
 8002550:	d902      	bls.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002552:	2302      	movs	r3, #2
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e013      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e010      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d902      	bls.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002564:	2303      	movs	r3, #3
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e00a      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d102      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002570:	2302      	movs	r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e004      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d101      	bne.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 0207 	bic.w	r2, r3, #7
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d041      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d8:	d02a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025de:	d824      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ea:	d81e      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f4:	d010      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f8:	4b86      	ldr	r3, [pc, #536]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a85      	ldr	r2, [pc, #532]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fabb 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3320      	adds	r3, #32
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fba6 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	74fb      	strb	r3, [r7, #19]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002646:	4973      	ldr	r1, [pc, #460]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d041      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002668:	d02a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800266a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266e:	d824      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002674:	d008      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267a:	d81e      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d010      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002686:	e018      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002688:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002694:	e015      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fa73 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a6:	e00c      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3320      	adds	r3, #32
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fb5e 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b8:	e003      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	74fb      	strb	r3, [r7, #19]
      break;
 80026be:	e000      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d6:	494f      	ldr	r1, [pc, #316]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026de:	e001      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a0 	beq.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a40      	ldr	r2, [pc, #256]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002724:	2301      	movs	r3, #1
 8002726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002734:	f7fe fdd2 	bl	80012dc <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800273a:	e009      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fdce 	bl	80012dc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	74fb      	strb	r3, [r7, #19]
        break;
 800274e:	e005      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d15c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01f      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d019      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fd8d 	bl	80012dc <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c4:	e00b      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fd89 	bl	80012dc <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d902      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	74fb      	strb	r3, [r7, #19]
            break;
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ec      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002802:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800280a:	e009      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
 8002810:	e006      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002820:	7c7b      	ldrb	r3, [r7, #17]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a9d      	ldr	r2, [pc, #628]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283e:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 0203 	bic.w	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	4994      	ldr	r1, [pc, #592]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 020c 	bic.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	498c      	ldr	r1, [pc, #560]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002882:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4983      	ldr	r1, [pc, #524]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	497b      	ldr	r1, [pc, #492]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	4972      	ldr	r1, [pc, #456]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e8:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	496a      	ldr	r1, [pc, #424]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	4961      	ldr	r1, [pc, #388]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800292c:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	4959      	ldr	r1, [pc, #356]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	4950      	ldr	r1, [pc, #320]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	4948      	ldr	r1, [pc, #288]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	493f      	ldr	r1, [pc, #252]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d028      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	4937      	ldr	r1, [pc, #220]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	e011      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f8c8 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d028      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3c:	60d3      	str	r3, [r2, #12]
 8002a3e:	e011      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f899 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a02      	ldr	r2, [pc, #8]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f867 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02f      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	4928      	ldr	r1, [pc, #160]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f844 	bl	8002b88 <RCCEx_PLLSAI1_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d014      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	74bb      	strb	r3, [r7, #18]
 8002b0e:	e011      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f925 	bl	8002d70 <RCCEx_PLLSAI2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4e:	490d      	ldr	r1, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b96:	4b75      	ldr	r3, [pc, #468]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d018      	beq.n	8002bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ba2:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0203 	and.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10d      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d047      	beq.n	8002c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e044      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d018      	beq.n	8002c0e <RCCEx_PLLSAI1_Config+0x86>
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d825      	bhi.n	8002c2c <RCCEx_PLLSAI1_Config+0xa4>
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d002      	beq.n	8002bea <RCCEx_PLLSAI1_Config+0x62>
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d009      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0x74>
 8002be8:	e020      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bea:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11d      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfa:	e01a      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bfc:	4b5b      	ldr	r3, [pc, #364]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d116      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e013      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c2a:	e006      	b.n	8002c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e004      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	430b      	orrs	r3, r1
 8002c58:	4944      	ldr	r1, [pc, #272]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d17d      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c64:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a40      	ldr	r2, [pc, #256]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c70:	f7fe fb34 	bl	80012dc <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c76:	e009      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c78:	f7fe fb30 	bl	80012dc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	73fb      	strb	r3, [r7, #15]
        break;
 8002c8a:	e005      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c8c:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ef      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d160      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d111      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6892      	ldr	r2, [r2, #8]
 8002cb4:	0211      	lsls	r1, r2, #8
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	0912      	lsrs	r2, r2, #4
 8002cbc:	0452      	lsls	r2, r2, #17
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	492a      	ldr	r1, [pc, #168]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	610b      	str	r3, [r1, #16]
 8002cc6:	e027      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d112      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6892      	ldr	r2, [r2, #8]
 8002cde:	0211      	lsls	r1, r2, #8
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6912      	ldr	r2, [r2, #16]
 8002ce4:	0852      	lsrs	r2, r2, #1
 8002ce6:	3a01      	subs	r2, #1
 8002ce8:	0552      	lsls	r2, r2, #21
 8002cea:	430a      	orrs	r2, r1
 8002cec:	491f      	ldr	r1, [pc, #124]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	610b      	str	r3, [r1, #16]
 8002cf2:	e011      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	0211      	lsls	r1, r2, #8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6952      	ldr	r2, [r2, #20]
 8002d0a:	0852      	lsrs	r2, r2, #1
 8002d0c:	3a01      	subs	r2, #1
 8002d0e:	0652      	lsls	r2, r2, #25
 8002d10:	430a      	orrs	r2, r1
 8002d12:	4916      	ldr	r1, [pc, #88]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fada 	bl	80012dc <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2a:	e009      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d2c:	f7fe fad6 	bl	80012dc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d902      	bls.n	8002d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d3e:	e005      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	4904      	ldr	r1, [pc, #16]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d10d      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002da2:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
       ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d047      	beq.n	8002e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e044      	b.n	8002e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d018      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x86>
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d825      	bhi.n	8002e14 <RCCEx_PLLSAI2_Config+0xa4>
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d002      	beq.n	8002dd2 <RCCEx_PLLSAI2_Config+0x62>
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d009      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x74>
 8002dd0:	e020      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd2:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11d      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de2:	e01a      	b.n	8002e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df4:	e013      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e12:	e006      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      break;
 8002e18:	e004      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e002      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	4939      	ldr	r1, [pc, #228]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d167      	bne.n	8002f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe fa40 	bl	80012dc <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e5e:	e009      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e60:	f7fe fa3c 	bl	80012dc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	73fb      	strb	r3, [r7, #15]
        break;
 8002e72:	e005      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ef      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d14a      	bne.n	8002f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	0211      	lsls	r1, r2, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	0912      	lsrs	r2, r2, #4
 8002ea4:	0452      	lsls	r2, r2, #17
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	491f      	ldr	r1, [pc, #124]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	614b      	str	r3, [r1, #20]
 8002eae:	e011      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	0211      	lsls	r1, r2, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6912      	ldr	r2, [r2, #16]
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0652      	lsls	r2, r2, #25
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	4916      	ldr	r1, [pc, #88]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe f9fc 	bl	80012dc <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee6:	e009      	b.n	8002efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee8:	f7fe f9f8 	bl	80012dc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d902      	bls.n	8002efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8002efa:	e005      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ef      	beq.n	8002ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e049      	b.n	8002fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f80a 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 f9ee 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e04f      	b.n	8003094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301e:	d018      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_TIM_Base_Start_IT+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d115      	bne.n	800307e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d015      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d011      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	e008      	b.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e000      	b.n	8003092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	00010007 	.word	0x00010007

080030bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f905 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8f7 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f908 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0204 	mvn.w	r2, #4
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8db 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8cd 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f8de 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8b1 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8a3 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8b4 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0210 	mvn.w	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2208      	movs	r2, #8
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f887 	bl	800330e <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f879 	bl	80032fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f88a 	bl	8003322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0201 	mvn.w	r2, #1
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fd44 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f914 	bl	8003494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d10e      	bne.n	800329a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d107      	bne.n	800329a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f907 	bl	80034a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d10e      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f838 	bl	8003336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d10e      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f06f 0220 	mvn.w	r2, #32
 80032ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8c7 	bl	8003480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <TIM_Base_SetConfig+0x114>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <TIM_Base_SetConfig+0x118>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <TIM_Base_SetConfig+0x11c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3b      	ldr	r2, [pc, #236]	; (800346c <TIM_Base_SetConfig+0x120>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <TIM_Base_SetConfig+0x124>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <TIM_Base_SetConfig+0x114>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d01b      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <TIM_Base_SetConfig+0x118>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <TIM_Base_SetConfig+0x11c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <TIM_Base_SetConfig+0x120>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <TIM_Base_SetConfig+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <TIM_Base_SetConfig+0x128>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <TIM_Base_SetConfig+0x12c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <TIM_Base_SetConfig+0x130>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a10      	ldr	r2, [pc, #64]	; (8003460 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a11      	ldr	r2, [pc, #68]	; (8003474 <TIM_Base_SetConfig+0x128>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <TIM_Base_SetConfig+0x12c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a0f      	ldr	r2, [pc, #60]	; (800347c <TIM_Base_SetConfig+0x130>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	615a      	str	r2, [r3, #20]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e040      	b.n	8003550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fd6a 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8c0 	bl	8003680 <UART_SetConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fb3e 	bl	8003b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fbc5 	bl	8003cd8 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 8082 	bne.w	8003676 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit+0x26>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07a      	b.n	8003678 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x38>
 800358c:	2302      	movs	r3, #2
 800358e:	e073      	b.n	8003678 <HAL_UART_Transmit+0x120>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2221      	movs	r2, #33	; 0x21
 80035a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fe99 	bl	80012dc <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0x80>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80035e8:	e02d      	b.n	8003646 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fbb8 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e039      	b.n	8003678 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003616:	b292      	uxth	r2, r2
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3302      	adds	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e008      	b.n	8003634 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b292      	uxth	r2, r2
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1cb      	bne.n	80035ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	2140      	movs	r1, #64	; 0x40
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fb84 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e005      	b.n	8003678 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4bad      	ldr	r3, [pc, #692]	; (8003960 <UART_SetConfig+0x2e0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	69f9      	ldr	r1, [r7, #28]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4aa2      	ldr	r2, [pc, #648]	; (8003964 <UART_SetConfig+0x2e4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a99      	ldr	r2, [pc, #612]	; (8003968 <UART_SetConfig+0x2e8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d121      	bne.n	800374a <UART_SetConfig+0xca>
 8003706:	4b99      	ldr	r3, [pc, #612]	; (800396c <UART_SetConfig+0x2ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d817      	bhi.n	8003744 <UART_SetConfig+0xc4>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x9c>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	0800372d 	.word	0x0800372d
 8003720:	08003739 	.word	0x08003739
 8003724:	08003733 	.word	0x08003733
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2301      	movs	r3, #1
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0e7      	b.n	8003902 <UART_SetConfig+0x282>
 8003732:	2302      	movs	r3, #2
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e0e4      	b.n	8003902 <UART_SetConfig+0x282>
 8003738:	2304      	movs	r3, #4
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0e1      	b.n	8003902 <UART_SetConfig+0x282>
 800373e:	2308      	movs	r3, #8
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e0de      	b.n	8003902 <UART_SetConfig+0x282>
 8003744:	2310      	movs	r3, #16
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e0db      	b.n	8003902 <UART_SetConfig+0x282>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a88      	ldr	r2, [pc, #544]	; (8003970 <UART_SetConfig+0x2f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d132      	bne.n	80037ba <UART_SetConfig+0x13a>
 8003754:	4b85      	ldr	r3, [pc, #532]	; (800396c <UART_SetConfig+0x2ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d828      	bhi.n	80037b4 <UART_SetConfig+0x134>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0xe8>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080037b5 	.word	0x080037b5
 8003770:	080037b5 	.word	0x080037b5
 8003774:	080037b5 	.word	0x080037b5
 8003778:	080037a9 	.word	0x080037a9
 800377c:	080037b5 	.word	0x080037b5
 8003780:	080037b5 	.word	0x080037b5
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037a3 	.word	0x080037a3
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037b5 	.word	0x080037b5
 8003798:	080037af 	.word	0x080037af
 800379c:	2300      	movs	r3, #0
 800379e:	76fb      	strb	r3, [r7, #27]
 80037a0:	e0af      	b.n	8003902 <UART_SetConfig+0x282>
 80037a2:	2302      	movs	r3, #2
 80037a4:	76fb      	strb	r3, [r7, #27]
 80037a6:	e0ac      	b.n	8003902 <UART_SetConfig+0x282>
 80037a8:	2304      	movs	r3, #4
 80037aa:	76fb      	strb	r3, [r7, #27]
 80037ac:	e0a9      	b.n	8003902 <UART_SetConfig+0x282>
 80037ae:	2308      	movs	r3, #8
 80037b0:	76fb      	strb	r3, [r7, #27]
 80037b2:	e0a6      	b.n	8003902 <UART_SetConfig+0x282>
 80037b4:	2310      	movs	r3, #16
 80037b6:	76fb      	strb	r3, [r7, #27]
 80037b8:	e0a3      	b.n	8003902 <UART_SetConfig+0x282>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6d      	ldr	r2, [pc, #436]	; (8003974 <UART_SetConfig+0x2f4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d120      	bne.n	8003806 <UART_SetConfig+0x186>
 80037c4:	4b69      	ldr	r3, [pc, #420]	; (800396c <UART_SetConfig+0x2ec>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ce:	2b30      	cmp	r3, #48	; 0x30
 80037d0:	d013      	beq.n	80037fa <UART_SetConfig+0x17a>
 80037d2:	2b30      	cmp	r3, #48	; 0x30
 80037d4:	d814      	bhi.n	8003800 <UART_SetConfig+0x180>
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d009      	beq.n	80037ee <UART_SetConfig+0x16e>
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d810      	bhi.n	8003800 <UART_SetConfig+0x180>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <UART_SetConfig+0x168>
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d006      	beq.n	80037f4 <UART_SetConfig+0x174>
 80037e6:	e00b      	b.n	8003800 <UART_SetConfig+0x180>
 80037e8:	2300      	movs	r3, #0
 80037ea:	76fb      	strb	r3, [r7, #27]
 80037ec:	e089      	b.n	8003902 <UART_SetConfig+0x282>
 80037ee:	2302      	movs	r3, #2
 80037f0:	76fb      	strb	r3, [r7, #27]
 80037f2:	e086      	b.n	8003902 <UART_SetConfig+0x282>
 80037f4:	2304      	movs	r3, #4
 80037f6:	76fb      	strb	r3, [r7, #27]
 80037f8:	e083      	b.n	8003902 <UART_SetConfig+0x282>
 80037fa:	2308      	movs	r3, #8
 80037fc:	76fb      	strb	r3, [r7, #27]
 80037fe:	e080      	b.n	8003902 <UART_SetConfig+0x282>
 8003800:	2310      	movs	r3, #16
 8003802:	76fb      	strb	r3, [r7, #27]
 8003804:	e07d      	b.n	8003902 <UART_SetConfig+0x282>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <UART_SetConfig+0x2f8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d120      	bne.n	8003852 <UART_SetConfig+0x1d2>
 8003810:	4b56      	ldr	r3, [pc, #344]	; (800396c <UART_SetConfig+0x2ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800381a:	2bc0      	cmp	r3, #192	; 0xc0
 800381c:	d013      	beq.n	8003846 <UART_SetConfig+0x1c6>
 800381e:	2bc0      	cmp	r3, #192	; 0xc0
 8003820:	d814      	bhi.n	800384c <UART_SetConfig+0x1cc>
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d009      	beq.n	800383a <UART_SetConfig+0x1ba>
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d810      	bhi.n	800384c <UART_SetConfig+0x1cc>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <UART_SetConfig+0x1b4>
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d006      	beq.n	8003840 <UART_SetConfig+0x1c0>
 8003832:	e00b      	b.n	800384c <UART_SetConfig+0x1cc>
 8003834:	2300      	movs	r3, #0
 8003836:	76fb      	strb	r3, [r7, #27]
 8003838:	e063      	b.n	8003902 <UART_SetConfig+0x282>
 800383a:	2302      	movs	r3, #2
 800383c:	76fb      	strb	r3, [r7, #27]
 800383e:	e060      	b.n	8003902 <UART_SetConfig+0x282>
 8003840:	2304      	movs	r3, #4
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	e05d      	b.n	8003902 <UART_SetConfig+0x282>
 8003846:	2308      	movs	r3, #8
 8003848:	76fb      	strb	r3, [r7, #27]
 800384a:	e05a      	b.n	8003902 <UART_SetConfig+0x282>
 800384c:	2310      	movs	r3, #16
 800384e:	76fb      	strb	r3, [r7, #27]
 8003850:	e057      	b.n	8003902 <UART_SetConfig+0x282>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a49      	ldr	r2, [pc, #292]	; (800397c <UART_SetConfig+0x2fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d125      	bne.n	80038a8 <UART_SetConfig+0x228>
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <UART_SetConfig+0x2ec>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386a:	d017      	beq.n	800389c <UART_SetConfig+0x21c>
 800386c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003870:	d817      	bhi.n	80038a2 <UART_SetConfig+0x222>
 8003872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003876:	d00b      	beq.n	8003890 <UART_SetConfig+0x210>
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d811      	bhi.n	80038a2 <UART_SetConfig+0x222>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <UART_SetConfig+0x20a>
 8003882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003886:	d006      	beq.n	8003896 <UART_SetConfig+0x216>
 8003888:	e00b      	b.n	80038a2 <UART_SetConfig+0x222>
 800388a:	2300      	movs	r3, #0
 800388c:	76fb      	strb	r3, [r7, #27]
 800388e:	e038      	b.n	8003902 <UART_SetConfig+0x282>
 8003890:	2302      	movs	r3, #2
 8003892:	76fb      	strb	r3, [r7, #27]
 8003894:	e035      	b.n	8003902 <UART_SetConfig+0x282>
 8003896:	2304      	movs	r3, #4
 8003898:	76fb      	strb	r3, [r7, #27]
 800389a:	e032      	b.n	8003902 <UART_SetConfig+0x282>
 800389c:	2308      	movs	r3, #8
 800389e:	76fb      	strb	r3, [r7, #27]
 80038a0:	e02f      	b.n	8003902 <UART_SetConfig+0x282>
 80038a2:	2310      	movs	r3, #16
 80038a4:	76fb      	strb	r3, [r7, #27]
 80038a6:	e02c      	b.n	8003902 <UART_SetConfig+0x282>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2d      	ldr	r2, [pc, #180]	; (8003964 <UART_SetConfig+0x2e4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d125      	bne.n	80038fe <UART_SetConfig+0x27e>
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <UART_SetConfig+0x2ec>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c0:	d017      	beq.n	80038f2 <UART_SetConfig+0x272>
 80038c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c6:	d817      	bhi.n	80038f8 <UART_SetConfig+0x278>
 80038c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038cc:	d00b      	beq.n	80038e6 <UART_SetConfig+0x266>
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d811      	bhi.n	80038f8 <UART_SetConfig+0x278>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <UART_SetConfig+0x260>
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d006      	beq.n	80038ec <UART_SetConfig+0x26c>
 80038de:	e00b      	b.n	80038f8 <UART_SetConfig+0x278>
 80038e0:	2300      	movs	r3, #0
 80038e2:	76fb      	strb	r3, [r7, #27]
 80038e4:	e00d      	b.n	8003902 <UART_SetConfig+0x282>
 80038e6:	2302      	movs	r3, #2
 80038e8:	76fb      	strb	r3, [r7, #27]
 80038ea:	e00a      	b.n	8003902 <UART_SetConfig+0x282>
 80038ec:	2304      	movs	r3, #4
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e007      	b.n	8003902 <UART_SetConfig+0x282>
 80038f2:	2308      	movs	r3, #8
 80038f4:	76fb      	strb	r3, [r7, #27]
 80038f6:	e004      	b.n	8003902 <UART_SetConfig+0x282>
 80038f8:	2310      	movs	r3, #16
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e001      	b.n	8003902 <UART_SetConfig+0x282>
 80038fe:	2310      	movs	r3, #16
 8003900:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <UART_SetConfig+0x2e4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	f040 8087 	bne.w	8003a1c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800390e:	7efb      	ldrb	r3, [r7, #27]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d837      	bhi.n	8003984 <UART_SetConfig+0x304>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x29c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003941 	.word	0x08003941
 8003920:	08003985 	.word	0x08003985
 8003924:	08003949 	.word	0x08003949
 8003928:	08003985 	.word	0x08003985
 800392c:	0800394f 	.word	0x0800394f
 8003930:	08003985 	.word	0x08003985
 8003934:	08003985 	.word	0x08003985
 8003938:	08003985 	.word	0x08003985
 800393c:	08003957 	.word	0x08003957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7fe fdac 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003944:	6178      	str	r0, [r7, #20]
        break;
 8003946:	e022      	b.n	800398e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <UART_SetConfig+0x300>)
 800394a:	617b      	str	r3, [r7, #20]
        break;
 800394c:	e01f      	b.n	800398e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394e:	f7fe fd0d 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8003952:	6178      	str	r0, [r7, #20]
        break;
 8003954:	e01b      	b.n	800398e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	617b      	str	r3, [r7, #20]
        break;
 800395c:	e017      	b.n	800398e <UART_SetConfig+0x30e>
 800395e:	bf00      	nop
 8003960:	efff69f3 	.word	0xefff69f3
 8003964:	40008000 	.word	0x40008000
 8003968:	40013800 	.word	0x40013800
 800396c:	40021000 	.word	0x40021000
 8003970:	40004400 	.word	0x40004400
 8003974:	40004800 	.word	0x40004800
 8003978:	40004c00 	.word	0x40004c00
 800397c:	40005000 	.word	0x40005000
 8003980:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	76bb      	strb	r3, [r7, #26]
        break;
 800398c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80f1 	beq.w	8003b78 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d305      	bcc.n	80039b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d902      	bls.n	80039b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	76bb      	strb	r3, [r7, #26]
 80039b6:	e0df      	b.n	8003b78 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	020b      	lsls	r3, r1, #8
 80039ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039ce:	0202      	lsls	r2, r0, #8
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	6849      	ldr	r1, [r1, #4]
 80039d4:	0849      	lsrs	r1, r1, #1
 80039d6:	4608      	mov	r0, r1
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	1814      	adds	r4, r2, r0
 80039de:	eb43 0501 	adc.w	r5, r3, r1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fc3e 	bl	8000270 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4613      	mov	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a02:	d308      	bcc.n	8003a16 <UART_SetConfig+0x396>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d204      	bcs.n	8003a16 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	e0b0      	b.n	8003b78 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	76bb      	strb	r3, [r7, #26]
 8003a1a:	e0ad      	b.n	8003b78 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d15c      	bne.n	8003ae0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003a26:	7efb      	ldrb	r3, [r7, #27]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d828      	bhi.n	8003a7e <UART_SetConfig+0x3fe>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0x3b4>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe fd20 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003a5c:	6178      	str	r0, [r7, #20]
        break;
 8003a5e:	e013      	b.n	8003a88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7fe fd32 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003a64:	6178      	str	r0, [r7, #20]
        break;
 8003a66:	e00f      	b.n	8003a88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <UART_SetConfig+0x510>)
 8003a6a:	617b      	str	r3, [r7, #20]
        break;
 8003a6c:	e00c      	b.n	8003a88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7fe fc7d 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8003a72:	6178      	str	r0, [r7, #20]
        break;
 8003a74:	e008      	b.n	8003a88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	e004      	b.n	8003a88 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	76bb      	strb	r3, [r7, #26]
        break;
 8003a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d074      	beq.n	8003b78 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d916      	bls.n	8003ada <UART_SetConfig+0x45a>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab2:	d212      	bcs.n	8003ada <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f023 030f 	bic.w	r3, r3, #15
 8003abc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	89fa      	ldrh	r2, [r7, #14]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	e04e      	b.n	8003b78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	76bb      	strb	r3, [r7, #26]
 8003ade:	e04b      	b.n	8003b78 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae0:	7efb      	ldrb	r3, [r7, #27]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d827      	bhi.n	8003b36 <UART_SetConfig+0x4b6>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x46c>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fcc4 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003b14:	6178      	str	r0, [r7, #20]
        break;
 8003b16:	e013      	b.n	8003b40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7fe fcd6 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	6178      	str	r0, [r7, #20]
        break;
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <UART_SetConfig+0x510>)
 8003b22:	617b      	str	r3, [r7, #20]
        break;
 8003b24:	e00c      	b.n	8003b40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7fe fc21 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8003b2a:	6178      	str	r0, [r7, #20]
        break;
 8003b2c:	e008      	b.n	8003b40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	617b      	str	r3, [r7, #20]
        break;
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	085a      	lsrs	r2, r3, #1
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	441a      	add	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	d908      	bls.n	8003b74 <UART_SetConfig+0x4f4>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d204      	bcs.n	8003b74 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	e001      	b.n	8003b78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b84:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00f42400 	.word	0x00f42400

08003b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c92:	d10a      	bne.n	8003caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce8:	f7fd faf8 	bl	80012dc <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d10e      	bne.n	8003d1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f82d 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e023      	b.n	8003d62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d10e      	bne.n	8003d46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f817 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e00d      	b.n	8003d62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	e05e      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d82:	d05a      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fd faaa 	bl	80012dc <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11b      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003da8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e043      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02c      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dee:	d124      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d091      	beq.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <__errno>:
 8003e64:	4b01      	ldr	r3, [pc, #4]	; (8003e6c <__errno+0x8>)
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000014 	.word	0x20000014

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4d0d      	ldr	r5, [pc, #52]	; (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	42a6      	cmp	r6, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4d0b      	ldr	r5, [pc, #44]	; (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	; (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 fc4e 	bl	8004724 <_init>
 8003e88:	1b64      	subs	r4, r4, r5
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	42a6      	cmp	r6, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e98:	4798      	blx	r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea2:	4798      	blx	r3
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	080047ec 	.word	0x080047ec
 8003eac:	080047ec 	.word	0x080047ec
 8003eb0:	080047ec 	.word	0x080047ec
 8003eb4:	080047f0 	.word	0x080047f0

08003eb8 <memset>:
 8003eb8:	4402      	add	r2, r0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <siprintf>:
 8003ec8:	b40e      	push	{r1, r2, r3}
 8003eca:	b500      	push	{lr}
 8003ecc:	b09c      	sub	sp, #112	; 0x70
 8003ece:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed0:	9002      	str	r0, [sp, #8]
 8003ed2:	9006      	str	r0, [sp, #24]
 8003ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed8:	4809      	ldr	r0, [pc, #36]	; (8003f00 <siprintf+0x38>)
 8003eda:	9107      	str	r1, [sp, #28]
 8003edc:	9104      	str	r1, [sp, #16]
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <siprintf+0x3c>)
 8003ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	6800      	ldr	r0, [r0, #0]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	a902      	add	r1, sp, #8
 8003eec:	f000 f868 	bl	8003fc0 <_svfiprintf_r>
 8003ef0:	9b02      	ldr	r3, [sp, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	b01c      	add	sp, #112	; 0x70
 8003ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003efc:	b003      	add	sp, #12
 8003efe:	4770      	bx	lr
 8003f00:	20000014 	.word	0x20000014
 8003f04:	ffff0208 	.word	0xffff0208

08003f08 <__ssputs_r>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	688e      	ldr	r6, [r1, #8]
 8003f0e:	429e      	cmp	r6, r3
 8003f10:	4682      	mov	sl, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	4690      	mov	r8, r2
 8003f16:	461f      	mov	r7, r3
 8003f18:	d838      	bhi.n	8003f8c <__ssputs_r+0x84>
 8003f1a:	898a      	ldrh	r2, [r1, #12]
 8003f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f20:	d032      	beq.n	8003f88 <__ssputs_r+0x80>
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	6909      	ldr	r1, [r1, #16]
 8003f26:	eba5 0901 	sub.w	r9, r5, r1
 8003f2a:	6965      	ldr	r5, [r4, #20]
 8003f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f34:	3301      	adds	r3, #1
 8003f36:	444b      	add	r3, r9
 8003f38:	106d      	asrs	r5, r5, #1
 8003f3a:	429d      	cmp	r5, r3
 8003f3c:	bf38      	it	cc
 8003f3e:	461d      	movcc	r5, r3
 8003f40:	0553      	lsls	r3, r2, #21
 8003f42:	d531      	bpl.n	8003fa8 <__ssputs_r+0xa0>
 8003f44:	4629      	mov	r1, r5
 8003f46:	f000 fb47 	bl	80045d8 <_malloc_r>
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	b950      	cbnz	r0, 8003f64 <__ssputs_r+0x5c>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	f8ca 3000 	str.w	r3, [sl]
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f64:	6921      	ldr	r1, [r4, #16]
 8003f66:	464a      	mov	r2, r9
 8003f68:	f000 fabe 	bl	80044e8 <memcpy>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	6126      	str	r6, [r4, #16]
 8003f7a:	6165      	str	r5, [r4, #20]
 8003f7c:	444e      	add	r6, r9
 8003f7e:	eba5 0509 	sub.w	r5, r5, r9
 8003f82:	6026      	str	r6, [r4, #0]
 8003f84:	60a5      	str	r5, [r4, #8]
 8003f86:	463e      	mov	r6, r7
 8003f88:	42be      	cmp	r6, r7
 8003f8a:	d900      	bls.n	8003f8e <__ssputs_r+0x86>
 8003f8c:	463e      	mov	r6, r7
 8003f8e:	4632      	mov	r2, r6
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	4641      	mov	r1, r8
 8003f94:	f000 fab6 	bl	8004504 <memmove>
 8003f98:	68a3      	ldr	r3, [r4, #8]
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	1b9b      	subs	r3, r3, r6
 8003f9e:	4432      	add	r2, r6
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	6022      	str	r2, [r4, #0]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e7db      	b.n	8003f60 <__ssputs_r+0x58>
 8003fa8:	462a      	mov	r2, r5
 8003faa:	f000 fb6f 	bl	800468c <_realloc_r>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d1e1      	bne.n	8003f78 <__ssputs_r+0x70>
 8003fb4:	6921      	ldr	r1, [r4, #16]
 8003fb6:	4650      	mov	r0, sl
 8003fb8:	f000 fabe 	bl	8004538 <_free_r>
 8003fbc:	e7c7      	b.n	8003f4e <__ssputs_r+0x46>
	...

08003fc0 <_svfiprintf_r>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	4698      	mov	r8, r3
 8003fc6:	898b      	ldrh	r3, [r1, #12]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	b09d      	sub	sp, #116	; 0x74
 8003fcc:	4607      	mov	r7, r0
 8003fce:	460d      	mov	r5, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	d50e      	bpl.n	8003ff2 <_svfiprintf_r+0x32>
 8003fd4:	690b      	ldr	r3, [r1, #16]
 8003fd6:	b963      	cbnz	r3, 8003ff2 <_svfiprintf_r+0x32>
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	f000 fafd 	bl	80045d8 <_malloc_r>
 8003fde:	6028      	str	r0, [r5, #0]
 8003fe0:	6128      	str	r0, [r5, #16]
 8003fe2:	b920      	cbnz	r0, 8003fee <_svfiprintf_r+0x2e>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fec:	e0d1      	b.n	8004192 <_svfiprintf_r+0x1d2>
 8003fee:	2340      	movs	r3, #64	; 0x40
 8003ff0:	616b      	str	r3, [r5, #20]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004000:	2330      	movs	r3, #48	; 0x30
 8004002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041ac <_svfiprintf_r+0x1ec>
 8004006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800400a:	f04f 0901 	mov.w	r9, #1
 800400e:	4623      	mov	r3, r4
 8004010:	469a      	mov	sl, r3
 8004012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004016:	b10a      	cbz	r2, 800401c <_svfiprintf_r+0x5c>
 8004018:	2a25      	cmp	r2, #37	; 0x25
 800401a:	d1f9      	bne.n	8004010 <_svfiprintf_r+0x50>
 800401c:	ebba 0b04 	subs.w	fp, sl, r4
 8004020:	d00b      	beq.n	800403a <_svfiprintf_r+0x7a>
 8004022:	465b      	mov	r3, fp
 8004024:	4622      	mov	r2, r4
 8004026:	4629      	mov	r1, r5
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ff6d 	bl	8003f08 <__ssputs_r>
 800402e:	3001      	adds	r0, #1
 8004030:	f000 80aa 	beq.w	8004188 <_svfiprintf_r+0x1c8>
 8004034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004036:	445a      	add	r2, fp
 8004038:	9209      	str	r2, [sp, #36]	; 0x24
 800403a:	f89a 3000 	ldrb.w	r3, [sl]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a2 	beq.w	8004188 <_svfiprintf_r+0x1c8>
 8004044:	2300      	movs	r3, #0
 8004046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800404a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800404e:	f10a 0a01 	add.w	sl, sl, #1
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	9307      	str	r3, [sp, #28]
 8004056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800405a:	931a      	str	r3, [sp, #104]	; 0x68
 800405c:	4654      	mov	r4, sl
 800405e:	2205      	movs	r2, #5
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	4851      	ldr	r0, [pc, #324]	; (80041ac <_svfiprintf_r+0x1ec>)
 8004066:	f7fc f8b3 	bl	80001d0 <memchr>
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	b9d8      	cbnz	r0, 80040a6 <_svfiprintf_r+0xe6>
 800406e:	06d0      	lsls	r0, r2, #27
 8004070:	bf44      	itt	mi
 8004072:	2320      	movmi	r3, #32
 8004074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004078:	0711      	lsls	r1, r2, #28
 800407a:	bf44      	itt	mi
 800407c:	232b      	movmi	r3, #43	; 0x2b
 800407e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b2a      	cmp	r3, #42	; 0x2a
 8004088:	d015      	beq.n	80040b6 <_svfiprintf_r+0xf6>
 800408a:	9a07      	ldr	r2, [sp, #28]
 800408c:	4654      	mov	r4, sl
 800408e:	2000      	movs	r0, #0
 8004090:	f04f 0c0a 	mov.w	ip, #10
 8004094:	4621      	mov	r1, r4
 8004096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800409a:	3b30      	subs	r3, #48	; 0x30
 800409c:	2b09      	cmp	r3, #9
 800409e:	d94e      	bls.n	800413e <_svfiprintf_r+0x17e>
 80040a0:	b1b0      	cbz	r0, 80040d0 <_svfiprintf_r+0x110>
 80040a2:	9207      	str	r2, [sp, #28]
 80040a4:	e014      	b.n	80040d0 <_svfiprintf_r+0x110>
 80040a6:	eba0 0308 	sub.w	r3, r0, r8
 80040aa:	fa09 f303 	lsl.w	r3, r9, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	46a2      	mov	sl, r4
 80040b4:	e7d2      	b.n	800405c <_svfiprintf_r+0x9c>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	1d19      	adds	r1, r3, #4
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	9103      	str	r1, [sp, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbb      	ittet	lt
 80040c2:	425b      	neglt	r3, r3
 80040c4:	f042 0202 	orrlt.w	r2, r2, #2
 80040c8:	9307      	strge	r3, [sp, #28]
 80040ca:	9307      	strlt	r3, [sp, #28]
 80040cc:	bfb8      	it	lt
 80040ce:	9204      	strlt	r2, [sp, #16]
 80040d0:	7823      	ldrb	r3, [r4, #0]
 80040d2:	2b2e      	cmp	r3, #46	; 0x2e
 80040d4:	d10c      	bne.n	80040f0 <_svfiprintf_r+0x130>
 80040d6:	7863      	ldrb	r3, [r4, #1]
 80040d8:	2b2a      	cmp	r3, #42	; 0x2a
 80040da:	d135      	bne.n	8004148 <_svfiprintf_r+0x188>
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	9203      	str	r2, [sp, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bfb8      	it	lt
 80040e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040ec:	3402      	adds	r4, #2
 80040ee:	9305      	str	r3, [sp, #20]
 80040f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041bc <_svfiprintf_r+0x1fc>
 80040f4:	7821      	ldrb	r1, [r4, #0]
 80040f6:	2203      	movs	r2, #3
 80040f8:	4650      	mov	r0, sl
 80040fa:	f7fc f869 	bl	80001d0 <memchr>
 80040fe:	b140      	cbz	r0, 8004112 <_svfiprintf_r+0x152>
 8004100:	2340      	movs	r3, #64	; 0x40
 8004102:	eba0 000a 	sub.w	r0, r0, sl
 8004106:	fa03 f000 	lsl.w	r0, r3, r0
 800410a:	9b04      	ldr	r3, [sp, #16]
 800410c:	4303      	orrs	r3, r0
 800410e:	3401      	adds	r4, #1
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004116:	4826      	ldr	r0, [pc, #152]	; (80041b0 <_svfiprintf_r+0x1f0>)
 8004118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800411c:	2206      	movs	r2, #6
 800411e:	f7fc f857 	bl	80001d0 <memchr>
 8004122:	2800      	cmp	r0, #0
 8004124:	d038      	beq.n	8004198 <_svfiprintf_r+0x1d8>
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <_svfiprintf_r+0x1f4>)
 8004128:	bb1b      	cbnz	r3, 8004172 <_svfiprintf_r+0x1b2>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	3307      	adds	r3, #7
 800412e:	f023 0307 	bic.w	r3, r3, #7
 8004132:	3308      	adds	r3, #8
 8004134:	9303      	str	r3, [sp, #12]
 8004136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004138:	4433      	add	r3, r6
 800413a:	9309      	str	r3, [sp, #36]	; 0x24
 800413c:	e767      	b.n	800400e <_svfiprintf_r+0x4e>
 800413e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004142:	460c      	mov	r4, r1
 8004144:	2001      	movs	r0, #1
 8004146:	e7a5      	b.n	8004094 <_svfiprintf_r+0xd4>
 8004148:	2300      	movs	r3, #0
 800414a:	3401      	adds	r4, #1
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	4619      	mov	r1, r3
 8004150:	f04f 0c0a 	mov.w	ip, #10
 8004154:	4620      	mov	r0, r4
 8004156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800415a:	3a30      	subs	r2, #48	; 0x30
 800415c:	2a09      	cmp	r2, #9
 800415e:	d903      	bls.n	8004168 <_svfiprintf_r+0x1a8>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0c5      	beq.n	80040f0 <_svfiprintf_r+0x130>
 8004164:	9105      	str	r1, [sp, #20]
 8004166:	e7c3      	b.n	80040f0 <_svfiprintf_r+0x130>
 8004168:	fb0c 2101 	mla	r1, ip, r1, r2
 800416c:	4604      	mov	r4, r0
 800416e:	2301      	movs	r3, #1
 8004170:	e7f0      	b.n	8004154 <_svfiprintf_r+0x194>
 8004172:	ab03      	add	r3, sp, #12
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	462a      	mov	r2, r5
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <_svfiprintf_r+0x1f8>)
 800417a:	a904      	add	r1, sp, #16
 800417c:	4638      	mov	r0, r7
 800417e:	f3af 8000 	nop.w
 8004182:	1c42      	adds	r2, r0, #1
 8004184:	4606      	mov	r6, r0
 8004186:	d1d6      	bne.n	8004136 <_svfiprintf_r+0x176>
 8004188:	89ab      	ldrh	r3, [r5, #12]
 800418a:	065b      	lsls	r3, r3, #25
 800418c:	f53f af2c 	bmi.w	8003fe8 <_svfiprintf_r+0x28>
 8004190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004192:	b01d      	add	sp, #116	; 0x74
 8004194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004198:	ab03      	add	r3, sp, #12
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	462a      	mov	r2, r5
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <_svfiprintf_r+0x1f8>)
 80041a0:	a904      	add	r1, sp, #16
 80041a2:	4638      	mov	r0, r7
 80041a4:	f000 f87a 	bl	800429c <_printf_i>
 80041a8:	e7eb      	b.n	8004182 <_svfiprintf_r+0x1c2>
 80041aa:	bf00      	nop
 80041ac:	080047b0 	.word	0x080047b0
 80041b0:	080047ba 	.word	0x080047ba
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08003f09 	.word	0x08003f09
 80041bc:	080047b6 	.word	0x080047b6

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	4699      	mov	r9, r3
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041dc:	4607      	mov	r7, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b10a      	cbz	r2, 80041e6 <_printf_common+0x26>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0699      	lsls	r1, r3, #26
 80041ea:	bf42      	ittt	mi
 80041ec:	6833      	ldrmi	r3, [r6, #0]
 80041ee:	3302      	addmi	r3, #2
 80041f0:	6033      	strmi	r3, [r6, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d106      	bne.n	8004208 <_printf_common+0x48>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	6832      	ldr	r2, [r6, #0]
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dc26      	bgt.n	8004256 <_printf_common+0x96>
 8004208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800420c:	1e13      	subs	r3, r2, #0
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	bf18      	it	ne
 8004212:	2301      	movne	r3, #1
 8004214:	0692      	lsls	r2, r2, #26
 8004216:	d42b      	bmi.n	8004270 <_printf_common+0xb0>
 8004218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d01e      	beq.n	8004264 <_printf_common+0xa4>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	68e5      	ldr	r5, [r4, #12]
 800422a:	6832      	ldr	r2, [r6, #0]
 800422c:	f003 0306 	and.w	r3, r3, #6
 8004230:	2b04      	cmp	r3, #4
 8004232:	bf08      	it	eq
 8004234:	1aad      	subeq	r5, r5, r2
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	bf0c      	ite	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	2500      	movne	r5, #0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfc4      	itt	gt
 8004246:	1a9b      	subgt	r3, r3, r2
 8004248:	18ed      	addgt	r5, r5, r3
 800424a:	2600      	movs	r6, #0
 800424c:	341a      	adds	r4, #26
 800424e:	42b5      	cmp	r5, r6
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xc8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xa8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4649      	mov	r1, r9
 800425c:	4638      	mov	r0, r7
 800425e:	47c0      	blx	r8
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xac>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c6      	b.n	80041fe <_printf_common+0x3e>
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	2030      	movs	r0, #48	; 0x30
 8004276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800427a:	4422      	add	r2, r4
 800427c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004284:	3302      	adds	r3, #2
 8004286:	e7c7      	b.n	8004218 <_printf_common+0x58>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4649      	mov	r1, r9
 800428e:	4638      	mov	r0, r7
 8004290:	47c0      	blx	r8
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa4>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d9      	b.n	800424e <_printf_common+0x8e>
	...

0800429c <_printf_i>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	460c      	mov	r4, r1
 80042a2:	4691      	mov	r9, r2
 80042a4:	7e27      	ldrb	r7, [r4, #24]
 80042a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042a8:	2f78      	cmp	r7, #120	; 0x78
 80042aa:	4680      	mov	r8, r0
 80042ac:	469a      	mov	sl, r3
 80042ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b2:	d807      	bhi.n	80042c4 <_printf_i+0x28>
 80042b4:	2f62      	cmp	r7, #98	; 0x62
 80042b6:	d80a      	bhi.n	80042ce <_printf_i+0x32>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f000 80d8 	beq.w	800446e <_printf_i+0x1d2>
 80042be:	2f58      	cmp	r7, #88	; 0x58
 80042c0:	f000 80a3 	beq.w	800440a <_printf_i+0x16e>
 80042c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042cc:	e03a      	b.n	8004344 <_printf_i+0xa8>
 80042ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042d2:	2b15      	cmp	r3, #21
 80042d4:	d8f6      	bhi.n	80042c4 <_printf_i+0x28>
 80042d6:	a001      	add	r0, pc, #4	; (adr r0, 80042dc <_printf_i+0x40>)
 80042d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004349 	.word	0x08004349
 80042e4:	080042c5 	.word	0x080042c5
 80042e8:	080042c5 	.word	0x080042c5
 80042ec:	080042c5 	.word	0x080042c5
 80042f0:	080042c5 	.word	0x080042c5
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080042c5 	.word	0x080042c5
 80042fc:	080042c5 	.word	0x080042c5
 8004300:	080042c5 	.word	0x080042c5
 8004304:	080042c5 	.word	0x080042c5
 8004308:	08004455 	.word	0x08004455
 800430c:	08004379 	.word	0x08004379
 8004310:	08004437 	.word	0x08004437
 8004314:	080042c5 	.word	0x080042c5
 8004318:	080042c5 	.word	0x080042c5
 800431c:	08004477 	.word	0x08004477
 8004320:	080042c5 	.word	0x080042c5
 8004324:	08004379 	.word	0x08004379
 8004328:	080042c5 	.word	0x080042c5
 800432c:	080042c5 	.word	0x080042c5
 8004330:	0800443f 	.word	0x0800443f
 8004334:	680b      	ldr	r3, [r1, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	600a      	str	r2, [r1, #0]
 800433c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e0a3      	b.n	8004490 <_printf_i+0x1f4>
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	6808      	ldr	r0, [r1, #0]
 800434c:	062e      	lsls	r6, r5, #24
 800434e:	f100 0304 	add.w	r3, r0, #4
 8004352:	d50a      	bpl.n	800436a <_printf_i+0xce>
 8004354:	6805      	ldr	r5, [r0, #0]
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	2d00      	cmp	r5, #0
 800435a:	da03      	bge.n	8004364 <_printf_i+0xc8>
 800435c:	232d      	movs	r3, #45	; 0x2d
 800435e:	426d      	negs	r5, r5
 8004360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004364:	485e      	ldr	r0, [pc, #376]	; (80044e0 <_printf_i+0x244>)
 8004366:	230a      	movs	r3, #10
 8004368:	e019      	b.n	800439e <_printf_i+0x102>
 800436a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800436e:	6805      	ldr	r5, [r0, #0]
 8004370:	600b      	str	r3, [r1, #0]
 8004372:	bf18      	it	ne
 8004374:	b22d      	sxthne	r5, r5
 8004376:	e7ef      	b.n	8004358 <_printf_i+0xbc>
 8004378:	680b      	ldr	r3, [r1, #0]
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	1d18      	adds	r0, r3, #4
 800437e:	6008      	str	r0, [r1, #0]
 8004380:	0628      	lsls	r0, r5, #24
 8004382:	d501      	bpl.n	8004388 <_printf_i+0xec>
 8004384:	681d      	ldr	r5, [r3, #0]
 8004386:	e002      	b.n	800438e <_printf_i+0xf2>
 8004388:	0669      	lsls	r1, r5, #25
 800438a:	d5fb      	bpl.n	8004384 <_printf_i+0xe8>
 800438c:	881d      	ldrh	r5, [r3, #0]
 800438e:	4854      	ldr	r0, [pc, #336]	; (80044e0 <_printf_i+0x244>)
 8004390:	2f6f      	cmp	r7, #111	; 0x6f
 8004392:	bf0c      	ite	eq
 8004394:	2308      	moveq	r3, #8
 8004396:	230a      	movne	r3, #10
 8004398:	2100      	movs	r1, #0
 800439a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800439e:	6866      	ldr	r6, [r4, #4]
 80043a0:	60a6      	str	r6, [r4, #8]
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	bfa2      	ittt	ge
 80043a6:	6821      	ldrge	r1, [r4, #0]
 80043a8:	f021 0104 	bicge.w	r1, r1, #4
 80043ac:	6021      	strge	r1, [r4, #0]
 80043ae:	b90d      	cbnz	r5, 80043b4 <_printf_i+0x118>
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	d04d      	beq.n	8004450 <_printf_i+0x1b4>
 80043b4:	4616      	mov	r6, r2
 80043b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ba:	fb03 5711 	mls	r7, r3, r1, r5
 80043be:	5dc7      	ldrb	r7, [r0, r7]
 80043c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c4:	462f      	mov	r7, r5
 80043c6:	42bb      	cmp	r3, r7
 80043c8:	460d      	mov	r5, r1
 80043ca:	d9f4      	bls.n	80043b6 <_printf_i+0x11a>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d10b      	bne.n	80043e8 <_printf_i+0x14c>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07df      	lsls	r7, r3, #31
 80043d4:	d508      	bpl.n	80043e8 <_printf_i+0x14c>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	6861      	ldr	r1, [r4, #4]
 80043da:	4299      	cmp	r1, r3
 80043dc:	bfde      	ittt	le
 80043de:	2330      	movle	r3, #48	; 0x30
 80043e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80043e8:	1b92      	subs	r2, r2, r6
 80043ea:	6122      	str	r2, [r4, #16]
 80043ec:	f8cd a000 	str.w	sl, [sp]
 80043f0:	464b      	mov	r3, r9
 80043f2:	aa03      	add	r2, sp, #12
 80043f4:	4621      	mov	r1, r4
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff fee2 	bl	80041c0 <_printf_common>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d14c      	bne.n	800449a <_printf_i+0x1fe>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004404:	b004      	add	sp, #16
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	4835      	ldr	r0, [pc, #212]	; (80044e0 <_printf_i+0x244>)
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	680e      	ldr	r6, [r1, #0]
 8004414:	061f      	lsls	r7, r3, #24
 8004416:	f856 5b04 	ldr.w	r5, [r6], #4
 800441a:	600e      	str	r6, [r1, #0]
 800441c:	d514      	bpl.n	8004448 <_printf_i+0x1ac>
 800441e:	07d9      	lsls	r1, r3, #31
 8004420:	bf44      	itt	mi
 8004422:	f043 0320 	orrmi.w	r3, r3, #32
 8004426:	6023      	strmi	r3, [r4, #0]
 8004428:	b91d      	cbnz	r5, 8004432 <_printf_i+0x196>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	f023 0320 	bic.w	r3, r3, #32
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	2310      	movs	r3, #16
 8004434:	e7b0      	b.n	8004398 <_printf_i+0xfc>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	2378      	movs	r3, #120	; 0x78
 8004440:	4828      	ldr	r0, [pc, #160]	; (80044e4 <_printf_i+0x248>)
 8004442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004446:	e7e3      	b.n	8004410 <_printf_i+0x174>
 8004448:	065e      	lsls	r6, r3, #25
 800444a:	bf48      	it	mi
 800444c:	b2ad      	uxthmi	r5, r5
 800444e:	e7e6      	b.n	800441e <_printf_i+0x182>
 8004450:	4616      	mov	r6, r2
 8004452:	e7bb      	b.n	80043cc <_printf_i+0x130>
 8004454:	680b      	ldr	r3, [r1, #0]
 8004456:	6826      	ldr	r6, [r4, #0]
 8004458:	6960      	ldr	r0, [r4, #20]
 800445a:	1d1d      	adds	r5, r3, #4
 800445c:	600d      	str	r5, [r1, #0]
 800445e:	0635      	lsls	r5, r6, #24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	d501      	bpl.n	8004468 <_printf_i+0x1cc>
 8004464:	6018      	str	r0, [r3, #0]
 8004466:	e002      	b.n	800446e <_printf_i+0x1d2>
 8004468:	0671      	lsls	r1, r6, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0x1c8>
 800446c:	8018      	strh	r0, [r3, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	4616      	mov	r6, r2
 8004474:	e7ba      	b.n	80043ec <_printf_i+0x150>
 8004476:	680b      	ldr	r3, [r1, #0]
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	600a      	str	r2, [r1, #0]
 800447c:	681e      	ldr	r6, [r3, #0]
 800447e:	6862      	ldr	r2, [r4, #4]
 8004480:	2100      	movs	r1, #0
 8004482:	4630      	mov	r0, r6
 8004484:	f7fb fea4 	bl	80001d0 <memchr>
 8004488:	b108      	cbz	r0, 800448e <_printf_i+0x1f2>
 800448a:	1b80      	subs	r0, r0, r6
 800448c:	6060      	str	r0, [r4, #4]
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	6123      	str	r3, [r4, #16]
 8004492:	2300      	movs	r3, #0
 8004494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004498:	e7a8      	b.n	80043ec <_printf_i+0x150>
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	4632      	mov	r2, r6
 800449e:	4649      	mov	r1, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	47d0      	blx	sl
 80044a4:	3001      	adds	r0, #1
 80044a6:	d0ab      	beq.n	8004400 <_printf_i+0x164>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	079b      	lsls	r3, r3, #30
 80044ac:	d413      	bmi.n	80044d6 <_printf_i+0x23a>
 80044ae:	68e0      	ldr	r0, [r4, #12]
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	4298      	cmp	r0, r3
 80044b4:	bfb8      	it	lt
 80044b6:	4618      	movlt	r0, r3
 80044b8:	e7a4      	b.n	8004404 <_printf_i+0x168>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4632      	mov	r2, r6
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	47d0      	blx	sl
 80044c4:	3001      	adds	r0, #1
 80044c6:	d09b      	beq.n	8004400 <_printf_i+0x164>
 80044c8:	3501      	adds	r5, #1
 80044ca:	68e3      	ldr	r3, [r4, #12]
 80044cc:	9903      	ldr	r1, [sp, #12]
 80044ce:	1a5b      	subs	r3, r3, r1
 80044d0:	42ab      	cmp	r3, r5
 80044d2:	dcf2      	bgt.n	80044ba <_printf_i+0x21e>
 80044d4:	e7eb      	b.n	80044ae <_printf_i+0x212>
 80044d6:	2500      	movs	r5, #0
 80044d8:	f104 0619 	add.w	r6, r4, #25
 80044dc:	e7f5      	b.n	80044ca <_printf_i+0x22e>
 80044de:	bf00      	nop
 80044e0:	080047c1 	.word	0x080047c1
 80044e4:	080047d2 	.word	0x080047d2

080044e8 <memcpy>:
 80044e8:	440a      	add	r2, r1
 80044ea:	4291      	cmp	r1, r2
 80044ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044f0:	d100      	bne.n	80044f4 <memcpy+0xc>
 80044f2:	4770      	bx	lr
 80044f4:	b510      	push	{r4, lr}
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fe:	4291      	cmp	r1, r2
 8004500:	d1f9      	bne.n	80044f6 <memcpy+0xe>
 8004502:	bd10      	pop	{r4, pc}

08004504 <memmove>:
 8004504:	4288      	cmp	r0, r1
 8004506:	b510      	push	{r4, lr}
 8004508:	eb01 0402 	add.w	r4, r1, r2
 800450c:	d902      	bls.n	8004514 <memmove+0x10>
 800450e:	4284      	cmp	r4, r0
 8004510:	4623      	mov	r3, r4
 8004512:	d807      	bhi.n	8004524 <memmove+0x20>
 8004514:	1e43      	subs	r3, r0, #1
 8004516:	42a1      	cmp	r1, r4
 8004518:	d008      	beq.n	800452c <memmove+0x28>
 800451a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800451e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004522:	e7f8      	b.n	8004516 <memmove+0x12>
 8004524:	4402      	add	r2, r0
 8004526:	4601      	mov	r1, r0
 8004528:	428a      	cmp	r2, r1
 800452a:	d100      	bne.n	800452e <memmove+0x2a>
 800452c:	bd10      	pop	{r4, pc}
 800452e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004536:	e7f7      	b.n	8004528 <memmove+0x24>

08004538 <_free_r>:
 8004538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800453a:	2900      	cmp	r1, #0
 800453c:	d048      	beq.n	80045d0 <_free_r+0x98>
 800453e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004542:	9001      	str	r0, [sp, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f1a1 0404 	sub.w	r4, r1, #4
 800454a:	bfb8      	it	lt
 800454c:	18e4      	addlt	r4, r4, r3
 800454e:	f000 f8d3 	bl	80046f8 <__malloc_lock>
 8004552:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <_free_r+0x9c>)
 8004554:	9801      	ldr	r0, [sp, #4]
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	4615      	mov	r5, r2
 800455a:	b933      	cbnz	r3, 800456a <_free_r+0x32>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	b003      	add	sp, #12
 8004562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004566:	f000 b8cd 	b.w	8004704 <__malloc_unlock>
 800456a:	42a3      	cmp	r3, r4
 800456c:	d90b      	bls.n	8004586 <_free_r+0x4e>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	1862      	adds	r2, r4, r1
 8004572:	4293      	cmp	r3, r2
 8004574:	bf04      	itt	eq
 8004576:	681a      	ldreq	r2, [r3, #0]
 8004578:	685b      	ldreq	r3, [r3, #4]
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	bf04      	itt	eq
 800457e:	1852      	addeq	r2, r2, r1
 8004580:	6022      	streq	r2, [r4, #0]
 8004582:	602c      	str	r4, [r5, #0]
 8004584:	e7ec      	b.n	8004560 <_free_r+0x28>
 8004586:	461a      	mov	r2, r3
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b10b      	cbz	r3, 8004590 <_free_r+0x58>
 800458c:	42a3      	cmp	r3, r4
 800458e:	d9fa      	bls.n	8004586 <_free_r+0x4e>
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	1855      	adds	r5, r2, r1
 8004594:	42a5      	cmp	r5, r4
 8004596:	d10b      	bne.n	80045b0 <_free_r+0x78>
 8004598:	6824      	ldr	r4, [r4, #0]
 800459a:	4421      	add	r1, r4
 800459c:	1854      	adds	r4, r2, r1
 800459e:	42a3      	cmp	r3, r4
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	d1dd      	bne.n	8004560 <_free_r+0x28>
 80045a4:	681c      	ldr	r4, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	6053      	str	r3, [r2, #4]
 80045aa:	4421      	add	r1, r4
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	e7d7      	b.n	8004560 <_free_r+0x28>
 80045b0:	d902      	bls.n	80045b8 <_free_r+0x80>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6003      	str	r3, [r0, #0]
 80045b6:	e7d3      	b.n	8004560 <_free_r+0x28>
 80045b8:	6825      	ldr	r5, [r4, #0]
 80045ba:	1961      	adds	r1, r4, r5
 80045bc:	428b      	cmp	r3, r1
 80045be:	bf04      	itt	eq
 80045c0:	6819      	ldreq	r1, [r3, #0]
 80045c2:	685b      	ldreq	r3, [r3, #4]
 80045c4:	6063      	str	r3, [r4, #4]
 80045c6:	bf04      	itt	eq
 80045c8:	1949      	addeq	r1, r1, r5
 80045ca:	6021      	streq	r1, [r4, #0]
 80045cc:	6054      	str	r4, [r2, #4]
 80045ce:	e7c7      	b.n	8004560 <_free_r+0x28>
 80045d0:	b003      	add	sp, #12
 80045d2:	bd30      	pop	{r4, r5, pc}
 80045d4:	20000098 	.word	0x20000098

080045d8 <_malloc_r>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	1ccd      	adds	r5, r1, #3
 80045dc:	f025 0503 	bic.w	r5, r5, #3
 80045e0:	3508      	adds	r5, #8
 80045e2:	2d0c      	cmp	r5, #12
 80045e4:	bf38      	it	cc
 80045e6:	250c      	movcc	r5, #12
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	4606      	mov	r6, r0
 80045ec:	db01      	blt.n	80045f2 <_malloc_r+0x1a>
 80045ee:	42a9      	cmp	r1, r5
 80045f0:	d903      	bls.n	80045fa <_malloc_r+0x22>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	2000      	movs	r0, #0
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	f000 f87d 	bl	80046f8 <__malloc_lock>
 80045fe:	4921      	ldr	r1, [pc, #132]	; (8004684 <_malloc_r+0xac>)
 8004600:	680a      	ldr	r2, [r1, #0]
 8004602:	4614      	mov	r4, r2
 8004604:	b99c      	cbnz	r4, 800462e <_malloc_r+0x56>
 8004606:	4f20      	ldr	r7, [pc, #128]	; (8004688 <_malloc_r+0xb0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	b923      	cbnz	r3, 8004616 <_malloc_r+0x3e>
 800460c:	4621      	mov	r1, r4
 800460e:	4630      	mov	r0, r6
 8004610:	f000 f862 	bl	80046d8 <_sbrk_r>
 8004614:	6038      	str	r0, [r7, #0]
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f000 f85d 	bl	80046d8 <_sbrk_r>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d123      	bne.n	800466a <_malloc_r+0x92>
 8004622:	230c      	movs	r3, #12
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f86c 	bl	8004704 <__malloc_unlock>
 800462c:	e7e3      	b.n	80045f6 <_malloc_r+0x1e>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	1b5b      	subs	r3, r3, r5
 8004632:	d417      	bmi.n	8004664 <_malloc_r+0x8c>
 8004634:	2b0b      	cmp	r3, #11
 8004636:	d903      	bls.n	8004640 <_malloc_r+0x68>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	441c      	add	r4, r3
 800463c:	6025      	str	r5, [r4, #0]
 800463e:	e004      	b.n	800464a <_malloc_r+0x72>
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	42a2      	cmp	r2, r4
 8004644:	bf0c      	ite	eq
 8004646:	600b      	streq	r3, [r1, #0]
 8004648:	6053      	strne	r3, [r2, #4]
 800464a:	4630      	mov	r0, r6
 800464c:	f000 f85a 	bl	8004704 <__malloc_unlock>
 8004650:	f104 000b 	add.w	r0, r4, #11
 8004654:	1d23      	adds	r3, r4, #4
 8004656:	f020 0007 	bic.w	r0, r0, #7
 800465a:	1ac2      	subs	r2, r0, r3
 800465c:	d0cc      	beq.n	80045f8 <_malloc_r+0x20>
 800465e:	1a1b      	subs	r3, r3, r0
 8004660:	50a3      	str	r3, [r4, r2]
 8004662:	e7c9      	b.n	80045f8 <_malloc_r+0x20>
 8004664:	4622      	mov	r2, r4
 8004666:	6864      	ldr	r4, [r4, #4]
 8004668:	e7cc      	b.n	8004604 <_malloc_r+0x2c>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d0e3      	beq.n	800463c <_malloc_r+0x64>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f82e 	bl	80046d8 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d1dd      	bne.n	800463c <_malloc_r+0x64>
 8004680:	e7cf      	b.n	8004622 <_malloc_r+0x4a>
 8004682:	bf00      	nop
 8004684:	20000098 	.word	0x20000098
 8004688:	2000009c 	.word	0x2000009c

0800468c <_realloc_r>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	4607      	mov	r7, r0
 8004690:	4614      	mov	r4, r2
 8004692:	460e      	mov	r6, r1
 8004694:	b921      	cbnz	r1, 80046a0 <_realloc_r+0x14>
 8004696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800469a:	4611      	mov	r1, r2
 800469c:	f7ff bf9c 	b.w	80045d8 <_malloc_r>
 80046a0:	b922      	cbnz	r2, 80046ac <_realloc_r+0x20>
 80046a2:	f7ff ff49 	bl	8004538 <_free_r>
 80046a6:	4625      	mov	r5, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ac:	f000 f830 	bl	8004710 <_malloc_usable_size_r>
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d20f      	bcs.n	80046d4 <_realloc_r+0x48>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4638      	mov	r0, r7
 80046b8:	f7ff ff8e 	bl	80045d8 <_malloc_r>
 80046bc:	4605      	mov	r5, r0
 80046be:	2800      	cmp	r0, #0
 80046c0:	d0f2      	beq.n	80046a8 <_realloc_r+0x1c>
 80046c2:	4631      	mov	r1, r6
 80046c4:	4622      	mov	r2, r4
 80046c6:	f7ff ff0f 	bl	80044e8 <memcpy>
 80046ca:	4631      	mov	r1, r6
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7ff ff33 	bl	8004538 <_free_r>
 80046d2:	e7e9      	b.n	80046a8 <_realloc_r+0x1c>
 80046d4:	4635      	mov	r5, r6
 80046d6:	e7e7      	b.n	80046a8 <_realloc_r+0x1c>

080046d8 <_sbrk_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4d06      	ldr	r5, [pc, #24]	; (80046f4 <_sbrk_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4604      	mov	r4, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fc fcf8 	bl	80010d8 <_sbrk>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_sbrk_r+0x1a>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_sbrk_r+0x1a>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	20000184 	.word	0x20000184

080046f8 <__malloc_lock>:
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <__malloc_lock+0x8>)
 80046fa:	f000 b811 	b.w	8004720 <__retarget_lock_acquire_recursive>
 80046fe:	bf00      	nop
 8004700:	2000018c 	.word	0x2000018c

08004704 <__malloc_unlock>:
 8004704:	4801      	ldr	r0, [pc, #4]	; (800470c <__malloc_unlock+0x8>)
 8004706:	f000 b80c 	b.w	8004722 <__retarget_lock_release_recursive>
 800470a:	bf00      	nop
 800470c:	2000018c 	.word	0x2000018c

08004710 <_malloc_usable_size_r>:
 8004710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004714:	1f18      	subs	r0, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfbc      	itt	lt
 800471a:	580b      	ldrlt	r3, [r1, r0]
 800471c:	18c0      	addlt	r0, r0, r3
 800471e:	4770      	bx	lr

08004720 <__retarget_lock_acquire_recursive>:
 8004720:	4770      	bx	lr

08004722 <__retarget_lock_release_recursive>:
 8004722:	4770      	bx	lr

08004724 <_init>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr

08004730 <_fini>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr
