
Praktikum_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003538  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003710  08003710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003724  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed76  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4f  00000000  00000000  0002edb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00030a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00031828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026023  00000000  00000000  000325a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e754  00000000  00000000  000585c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efbf3  00000000  00000000  00066d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015690a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  00156960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036a8 	.word	0x080036a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036a8 	.word	0x080036a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fad5 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f80b 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8b3 	bl	8000638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f881 	bl	80005d8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80004d6:	f000 f857 	bl	8000588 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */



  uint8_t delay = 100;
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	71fb      	strb	r3, [r7, #7]
  uint8_t counter_1 = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0x22>

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b096      	sub	sp, #88	; 0x58
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2244      	movs	r2, #68	; 0x44
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f8d0 	bl	8003698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050a:	f000 fe75 	bl	80011f8 <HAL_PWREx_ControlVoltageScaling>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000514:	f000 f962 	bl	80007dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2310      	movs	r3, #16
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000532:	230a      	movs	r3, #10
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000536:	2307      	movs	r3, #7
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053a:	2302      	movs	r3, #2
 800053c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4618      	mov	r0, r3
 8000548:	f000 feac 	bl	80012a4 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000552:	f000 f943 	bl	80007dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	2303      	movs	r3, #3
 800055c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fa7e 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057a:	f000 f92f 	bl	80007dc <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3758      	adds	r7, #88	; 0x58
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_TIM16_Init+0x44>)
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <MX_TIM16_Init+0x48>)
 8000590:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6000;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_TIM16_Init+0x44>)
 8000594:	f241 7270 	movw	r2, #6000	; 0x1770
 8000598:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_TIM16_Init+0x44>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100000;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_TIM16_Init+0x44>)
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <MX_TIM16_Init+0x4c>)
 80005a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_TIM16_Init+0x44>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_TIM16_Init+0x44>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_TIM16_Init+0x44>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_TIM16_Init+0x44>)
 80005ba:	f002 f91b 	bl	80027f4 <HAL_TIM_Base_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80005c4:	f000 f90a 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	40014400 	.word	0x40014400
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MX_USART2_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART2_UART_Init+0x58>)
 800061c:	f002 fbd8 	bl	8002dd0 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f8d9 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028
 8000634:	40004400 	.word	0x40004400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b42      	ldr	r3, [pc, #264]	; (8000758 <MX_GPIO_Init+0x120>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a41      	ldr	r2, [pc, #260]	; (8000758 <MX_GPIO_Init+0x120>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <MX_GPIO_Init+0x120>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <MX_GPIO_Init+0x120>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a3b      	ldr	r2, [pc, #236]	; (8000758 <MX_GPIO_Init+0x120>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <MX_GPIO_Init+0x120>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <MX_GPIO_Init+0x120>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a35      	ldr	r2, [pc, #212]	; (8000758 <MX_GPIO_Init+0x120>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <MX_GPIO_Init+0x120>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_GPIO_Init+0x120>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <MX_GPIO_Init+0x120>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <MX_GPIO_Init+0x120>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x124>)
 80006b4:	f000 fd48 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2120      	movs	r1, #32
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fd42 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_GPIO_Init+0x128>)
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_GPIO_Init+0x124>)
 80006da:	f000 fb8b 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Taster_1_Pin */
  GPIO_InitStruct.Pin = Taster_1_Pin;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0x12c>)
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Taster_1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <MX_GPIO_Init+0x124>)
 80006f2:	f000 fb7f 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80006f6:	2302      	movs	r3, #2
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_GPIO_Init+0x124>)
 800070e:	f000 fb71 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000712:	2320      	movs	r3, #32
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fb62 	bl	8000df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2006      	movs	r0, #6
 8000736:	f000 fb18 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800073a:	2006      	movs	r0, #6
 800073c:	f000 fb31 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 fb10 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f000 fb29 	bl	8000da2 <HAL_NVIC_EnableIRQ>

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800
 8000760:	10210000 	.word	0x10210000
 8000764:	10110000 	.word	0x10110000

08000768 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
//Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//check which timer triggered this callback and toggle LED
	if(htim == &htim16){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d10e      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x2e>
		//stop timer
		HAL_TIM_Base_Stop(&htim16);
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800077a:	f002 f892 	bl	80028a2 <HAL_TIM_Base_Stop>

		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800077e:	2102      	movs	r1, #2
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000782:	f000 fcf9 	bl	8001178 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000786:	2120      	movs	r1, #32
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 fcf4 	bl	8001178 <HAL_GPIO_TogglePin>

		//enable interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000790:	2006      	movs	r0, #6
 8000792:	f000 fb06 	bl	8000da2 <HAL_NVIC_EnableIRQ>


	}
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000ac 	.word	0x200000ac
 80007a4:	48000800 	.word	0x48000800

080007a8 <HAL_GPIO_EXTI_Callback>:
//Callback EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Taster_1_Pin){
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10a      	bne.n	80007ce <HAL_GPIO_EXTI_Callback+0x26>
		//disable interrupt
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007b8:	2006      	movs	r0, #6
 80007ba:	f000 fb00 	bl	8000dbe <HAL_NVIC_DisableIRQ>

		//toggle led
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007be:	2120      	movs	r1, #32
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fcd8 	bl	8001178 <HAL_GPIO_TogglePin>

		//start timer
		HAL_TIM_Base_Start_IT(&htim16);
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80007ca:	f002 f891 	bl	80028f0 <HAL_TIM_Base_Start_IT>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000ac 	.word	0x200000ac

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_TIM_Base_MspInit+0x44>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d113      	bne.n	800086a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_TIM_Base_MspInit+0x48>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <HAL_TIM_Base_MspInit+0x48>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_TIM_Base_MspInit+0x48>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2019      	movs	r0, #25
 8000860:	f000 fa83 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000864:	2019      	movs	r0, #25
 8000866:	f000 fa9c 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40014400 	.word	0x40014400
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0ac      	sub	sp, #176	; 0xb0
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2288      	movs	r2, #136	; 0x88
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fefb 	bl	8003698 <memset>
  if(huart->Instance==USART2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <HAL_UART_MspInit+0xb0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d13b      	bne.n	8000924 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fadf 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c4:	f7ff ff8a 	bl	80007dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d2:	6593      	str	r3, [r2, #88]	; 0x58
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_UART_MspInit+0xb4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f8:	230c      	movs	r3, #12
 80008fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000910:	2307      	movs	r3, #7
 8000912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fa68 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	37b0      	adds	r7, #176	; 0xb0
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40004400 	.word	0x40004400
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8d4 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fc0d 	bl	80011ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800099e:	f002 f817 	bl	80029d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000ac 	.word	0x200000ac

080009ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009b4:	f000 fbfa 	bl	80011ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <SystemInit+0x5c>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <SystemInit+0x5c>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <SystemInit+0x60>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <SystemInit+0x60>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <SystemInit+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <SystemInit+0x60>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <SystemInit+0x60>)
 80009e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <SystemInit+0x60>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <SystemInit+0x60>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <SystemInit+0x60>)
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SystemInit+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff ffca 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
	ldr	r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <LoopForever+0x16>)
	cmp	r2, r3
 8000a4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 fdff 	bl	8003650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fd35 	bl	80004c0 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a58:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a5c:	08003718 	.word	0x08003718
	ldr	r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a64:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a6c:	200000fc 	.word	0x200000fc

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_Init+0x3c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <HAL_Init+0x3c>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f962 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f80f 	bl	8000ab4 <HAL_InitTick>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	e001      	b.n	8000aa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa2:	f7ff fea1 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d023      	beq.n	8000b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_InitTick+0x70>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f97b 	bl	8000dda <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10f      	bne.n	8000b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d809      	bhi.n	8000b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af8:	f000 f937 	bl	8000d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0x74>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e001      	b.n	8000b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200000f8 	.word	0x200000f8

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000f8 	.word	0x200000f8

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db12      	blt.n	8000c44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	490a      	ldr	r1, [pc, #40]	; (8000c50 <__NVIC_DisableIRQ+0x44>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	3320      	adds	r3, #32
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c38:	f3bf 8f4f 	dsb	sy
}
 8000c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c3e:	f3bf 8f6f 	isb	sy
}
 8000c42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff05 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff1a 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff0d 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff1d 	bl	8000c0c <__NVIC_DisableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff94 	bl	8000d10 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e17f      	b.n	8001104 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8171 	beq.w	80010fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d118      	bne.n	8000edc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x128>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b12      	cmp	r3, #18
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	6939      	ldr	r1, [r7, #16]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80ac 	beq.w	80010fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a5e      	ldr	r2, [pc, #376]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fbe:	4a5a      	ldr	r2, [pc, #360]	; (8001128 <HAL_GPIO_Init+0x334>)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x242>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x338>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x33c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x23a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x340>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x236>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x344>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x232>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x348>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x22e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x34c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x22a>
 800101a:	2306      	movs	r3, #6
 800101c:	e00c      	b.n	8001038 <HAL_GPIO_Init+0x244>
 800101e:	2307      	movs	r3, #7
 8001020:	e00a      	b.n	8001038 <HAL_GPIO_Init+0x244>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x244>
 8001026:	2304      	movs	r3, #4
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x244>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x244>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x244>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x244>
 8001036:	2300      	movs	r3, #0
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001048:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x334>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107a:	4a32      	ldr	r2, [pc, #200]	; (8001144 <HAL_GPIO_Init+0x350>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa22 f303 	lsr.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	f47f ae78 	bne.w	8000e04 <HAL_GPIO_Init+0x10>
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000800 	.word	0x48000800
 8001134:	48000c00 	.word	0x48000c00
 8001138:	48001000 	.word	0x48001000
 800113c:	48001400 	.word	0x48001400
 8001140:	48001800 	.word	0x48001800
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43d9      	mvns	r1, r3
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	400b      	ands	r3, r1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff faec 	bl	80007a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001206:	d130      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d038      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2232      	movs	r2, #50	; 0x32
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3301      	adds	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	e002      	b.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b01      	subs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001250:	d102      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f2      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d110      	bne.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e00f      	b.n	800128a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001276:	d007      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e3d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4ba1      	ldr	r3, [pc, #644]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c0:	4b9e      	ldr	r3, [pc, #632]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80e4 	beq.w	80014a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_RCC_OscConfig+0x4a>
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	f040 808b 	bne.w	80013fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	f040 8087 	bne.w	80013fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ee:	4b93      	ldr	r3, [pc, #588]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e3ac      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	4b8c      	ldr	r3, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <HAL_RCC_OscConfig+0x7c>
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800131e:	e005      	b.n	800132c <HAL_RCC_OscConfig+0x88>
 8001320:	4b86      	ldr	r3, [pc, #536]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800132c:	4293      	cmp	r3, r2
 800132e:	d223      	bcs.n	8001378 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fd41 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e38d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001344:	4b7d      	ldr	r3, [pc, #500]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a7c      	ldr	r2, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b7a      	ldr	r3, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4977      	ldr	r1, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	4972      	ldr	r1, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
 8001376:	e025      	b.n	80013c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b70      	ldr	r3, [pc, #448]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6f      	ldr	r2, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	496a      	ldr	r1, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4965      	ldr	r1, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd01 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e34d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c4:	f000 fc36 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	495a      	ldr	r1, [pc, #360]	; (8001540 <HAL_RCC_OscConfig+0x29c>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_OscConfig+0x2a0>)
 80013e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e4:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_RCC_OscConfig+0x2a4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fb63 	bl	8000ab4 <HAL_InitTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d052      	beq.n	800149e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	e331      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001404:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001410:	f7ff fba0 	bl	8000b54 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001418:	f7ff fb9c 	bl	8000b54 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e31a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	493b      	ldr	r1, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e01a      	b.n	80014a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a33      	ldr	r2, [pc, #204]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb6d 	bl	8000b54 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147e:	f7ff fb69 	bl	8000b54 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e2e7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x1da>
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d074      	beq.n	8001596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x21a>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d10e      	bne.n	80014d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d10b      	bne.n	80014d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d064      	beq.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d160      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e2c4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x24a>
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a15      	ldr	r2, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e01d      	b.n	800152a <HAL_RCC_OscConfig+0x286>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x26e>
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_RCC_OscConfig+0x298>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_RCC_OscConfig+0x298>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x286>
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x298>)
 8001524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01c      	beq.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fb0f 	bl	8000b54 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001538:	e011      	b.n	800155e <HAL_RCC_OscConfig+0x2ba>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	080036c0 	.word	0x080036c0
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fb02 	bl	8000b54 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e280      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	4baf      	ldr	r3, [pc, #700]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x2a8>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff faf2 	bl	8000b54 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff faee 	bl	8000b54 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e26c      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	4ba5      	ldr	r3, [pc, #660]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x2d0>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d060      	beq.n	8001664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x310>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d119      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	4b99      	ldr	r3, [pc, #612]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x328>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e249      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b93      	ldr	r3, [pc, #588]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	4990      	ldr	r1, [pc, #576]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	e040      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ea:	4b8c      	ldr	r3, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a8b      	ldr	r2, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff faad 	bl	8000b54 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff faa9 	bl	8000b54 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e227      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	4b82      	ldr	r3, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	497c      	ldr	r1, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e018      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b7a      	ldr	r3, [pc, #488]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a79      	ldr	r2, [pc, #484]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fa89 	bl	8000b54 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fa85 	bl	8000b54 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e203      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	4b70      	ldr	r3, [pc, #448]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03c      	beq.n	80016ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	4a67      	ldr	r2, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fa64 	bl	8000b54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fa60 	bl	8000b54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1de      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	4b5e      	ldr	r3, [pc, #376]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ef      	beq.n	8001690 <HAL_RCC_OscConfig+0x3ec>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa47 	bl	8000b54 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fa43 	bl	8000b54 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1c1      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ef      	bne.n	80016ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a6 	beq.w	8001844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016fc:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d118      	bne.n	8001762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001730:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a3a      	ldr	r2, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173c:	f7ff fa0a 	bl	8000b54 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff fa06 	bl	8000b54 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e184      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x4d8>
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	4a2a      	ldr	r2, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177a:	e024      	b.n	80017c6 <HAL_RCC_OscConfig+0x522>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d110      	bne.n	80017a6 <HAL_RCC_OscConfig+0x502>
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a4:	e00f      	b.n	80017c6 <HAL_RCC_OscConfig+0x522>
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f9c1 	bl	8000b54 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f9bd 	bl	8000b54 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e139      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0ed      	beq.n	80017d6 <HAL_RCC_OscConfig+0x532>
 80017fa:	e01a      	b.n	8001832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff f9aa 	bl	8000b54 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001802:	e00f      	b.n	8001824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff f9a6 	bl	8000b54 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d906      	bls.n	8001824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e122      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	4b90      	ldr	r3, [pc, #576]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e8      	bne.n	8001804 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	4a8a      	ldr	r2, [pc, #552]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8108 	beq.w	8001a5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b02      	cmp	r3, #2
 8001854:	f040 80d0 	bne.w	80019f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001858:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d130      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	3b01      	subs	r3, #1
 8001878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d127      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d11f      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001898:	2a07      	cmp	r2, #7
 800189a:	bf14      	ite	ne
 800189c:	2201      	movne	r2, #1
 800189e:	2200      	moveq	r2, #0
 80018a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d113      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d06e      	beq.n	80019ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d069      	beq.n	80019a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e0:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018fc:	f7ff f92a 	bl	8000b54 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f926 	bl	8000b54 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0a4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001922:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x7c8>)
 8001928:	4013      	ands	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001932:	3a01      	subs	r2, #1
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193c:	0212      	lsls	r2, r2, #8
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	3a01      	subs	r2, #1
 8001948:	0552      	lsls	r2, r2, #21
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	3a01      	subs	r2, #1
 8001954:	0652      	lsls	r2, r2, #25
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800195c:	0912      	lsrs	r2, r2, #4
 800195e:	0452      	lsls	r2, r2, #17
 8001960:	430a      	orrs	r2, r1
 8001962:	4941      	ldr	r1, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001980:	f7ff f8e8 	bl	8000b54 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f8e4 	bl	8000b54 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e062      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	e05a      	b.n	8001a5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e059      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d152      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d0:	f7ff f8c0 	bl	8000b54 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f8bc 	bl	8000b54 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e03a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x734>
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d02d      	beq.n	8001a5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a1c:	f023 0303 	bic.w	r3, r3, #3
 8001a20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f88f 	bl	8000b54 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f88b 	bl	8000b54 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e009      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x7c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x796>
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	f99d808c 	.word	0xf99d808c

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4961      	ldr	r1, [pc, #388]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b0      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d04c      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d121      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e09e      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e092      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e086      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07e      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 0203 	bic.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	493f      	ldr	r1, [pc, #252]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2a:	f7ff f813 	bl	8000b54 <HAL_GetTick>
 8001b2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f80f 	bl	8000b54 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e066      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 020c 	and.w	r2, r3, #12
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1eb      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	492c      	ldr	r1, [pc, #176]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d210      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4924      	ldr	r1, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e036      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4918      	ldr	r1, [pc, #96]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4910      	ldr	r1, [pc, #64]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be6:	f000 f825 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_ClockConfig+0x1b4>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490c      	ldr	r1, [pc, #48]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe ff52 	bl	8000ab4 <HAL_InitTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c14:	7afb      	ldrb	r3, [r7, #11]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080036c0 	.word	0x080036c0
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d121      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11e      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c90:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e004      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d134      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0xa6>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8001cd8:	e005      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	e002      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	617b      	str	r3, [r7, #20]
      break;
 8001cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	fb02 f203 	mul.w	r2, r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	0e5b      	lsrs	r3, r3, #25
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080036d8 	.word	0x080036d8
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4904      	ldr	r1, [pc, #16]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	080036d0 	.word	0x080036d0

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d94:	f7ff ffda 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0adb      	lsrs	r3, r3, #11
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	080036d0 	.word	0x080036d0

08001dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd4:	f7ff fa02 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001dd8:	6178      	str	r0, [r7, #20]
 8001dda:	e014      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff f9f2 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0c:	d10b      	bne.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d919      	bls.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2ba0      	cmp	r3, #160	; 0xa0
 8001e18:	d902      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e013      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e010      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d902      	bls.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e00a      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b80      	cmp	r3, #128	; 0x80
 8001e36:	d102      	bne.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e004      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b70      	cmp	r3, #112	; 0x70
 8001e42:	d101      	bne.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	4909      	ldr	r1, [pc, #36]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d041      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ea2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eb2:	d81e      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec0:	4b86      	ldr	r3, [pc, #536]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a85      	ldr	r2, [pc, #532]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ecc:	e015      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fabb 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ede:	e00c      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fba6 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef0:	e003      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef6:	e000      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f00:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0e:	4973      	ldr	r1, [pc, #460]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f16:	e001      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a61      	ldr	r2, [pc, #388]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fa73 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fb5e 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f90:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9e:	494f      	ldr	r1, [pc, #316]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a0 	beq.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a40      	ldr	r2, [pc, #256]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe0:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fdaa 	bl	8000b54 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002002:	e009      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe fda6 	bl	8000b54 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d902      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	74fb      	strb	r3, [r7, #19]
        break;
 8002016:	e005      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d15c      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01f      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a20      	ldr	r2, [pc, #128]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fd65 	bl	8000b54 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00b      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fd61 	bl	8000b54 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d902      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	74fb      	strb	r3, [r7, #19]
            break;
 80020a4:	e006      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ec      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ca:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d2:	e009      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a9d      	ldr	r2, [pc, #628]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4b98      	ldr	r3, [pc, #608]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	4994      	ldr	r1, [pc, #592]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 020c 	bic.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	498c      	ldr	r1, [pc, #560]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214a:	4b87      	ldr	r3, [pc, #540]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4983      	ldr	r1, [pc, #524]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	497b      	ldr	r1, [pc, #492]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	4972      	ldr	r1, [pc, #456]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	496a      	ldr	r1, [pc, #424]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d2:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	4961      	ldr	r1, [pc, #388]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021f4:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	4959      	ldr	r1, [pc, #356]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002224:	4950      	ldr	r1, [pc, #320]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	4948      	ldr	r1, [pc, #288]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	493f      	ldr	r1, [pc, #252]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d028      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228a:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800229a:	d106      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
 80022a8:	e011      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b2:	d10c      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f8c8 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	491f      	ldr	r1, [pc, #124]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f8:	d106      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002304:	60d3      	str	r3, [r2, #12]
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f899 	bl	8002450 <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002356:	d109      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e014      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f867 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02f      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023aa:	4928      	ldr	r1, [pc, #160]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f844 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d014      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
 80023d6:	e011      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3320      	adds	r3, #32
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f925 	bl	8002638 <RCCEx_PLLSAI2_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002416:	490d      	ldr	r1, [pc, #52]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243a:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002442:	7cbb      	ldrb	r3, [r7, #18]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d018      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
       ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002482:	4b6c      	ldr	r3, [pc, #432]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
       ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d047      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d018      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x86>
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d825      	bhi.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0x62>
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d009      	beq.n	80024c4 <RCCEx_PLLSAI1_Config+0x74>
 80024b0:	e020      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024b2:	4b60      	ldr	r3, [pc, #384]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c2:	e01a      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e013      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024f2:	e006      	b.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e004      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002502:	bf00      	nop
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	430b      	orrs	r3, r1
 8002520:	4944      	ldr	r1, [pc, #272]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d17d      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe fb0c 	bl	8000b54 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002540:	f7fe fb08 	bl	8000b54 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
        break;
 8002552:	e005      	b.n	8002560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ef      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d160      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0912      	lsrs	r2, r2, #4
 8002584:	0452      	lsls	r2, r2, #17
 8002586:	430a      	orrs	r2, r1
 8002588:	492a      	ldr	r1, [pc, #168]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
 800258e:	e027      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d112      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800259e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	0211      	lsls	r1, r2, #8
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6912      	ldr	r2, [r2, #16]
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	430a      	orrs	r2, r1
 80025b4:	491f      	ldr	r1, [pc, #124]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
 80025ba:	e011      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6952      	ldr	r2, [r2, #20]
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0652      	lsls	r2, r2, #25
 80025d8:	430a      	orrs	r2, r1
 80025da:	4916      	ldr	r1, [pc, #88]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fab2 	bl	8000b54 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe faae 	bl	8000b54 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
          break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	4904      	ldr	r1, [pc, #16]	; (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
       ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
       ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d047      	beq.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e044      	b.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d018      	beq.n	80026be <RCCEx_PLLSAI2_Config+0x86>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d825      	bhi.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d002      	beq.n	800269a <RCCEx_PLLSAI2_Config+0x62>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d009      	beq.n	80026ac <RCCEx_PLLSAI2_Config+0x74>
 8002698:	e020      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11d      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e01a      	b.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e013      	b.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026da:	e006      	b.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e004      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f2:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	430b      	orrs	r3, r1
 8002708:	4939      	ldr	r1, [pc, #228]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d167      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fa18 	bl	8000b54 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002728:	f7fe fa14 	bl	8000b54 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
        break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d14a      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	0912      	lsrs	r2, r2, #4
 800276c:	0452      	lsls	r2, r2, #17
 800276e:	430a      	orrs	r2, r1
 8002770:	491f      	ldr	r1, [pc, #124]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	614b      	str	r3, [r1, #20]
 8002776:	e011      	b.n	800279c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6912      	ldr	r2, [r2, #16]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	3a01      	subs	r2, #1
 8002792:	0652      	lsls	r2, r2, #25
 8002794:	430a      	orrs	r2, r1
 8002796:	4916      	ldr	r1, [pc, #88]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe f9d4 	bl	8000b54 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b0:	f7fe f9d0 	bl	8000b54 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
          break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e049      	b.n	800289a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f808 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fa14 	bl	8002c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <HAL_TIM_Base_Stop+0x38>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	f240 4344 	movw	r3, #1092	; 0x444
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <HAL_TIM_Base_Stop+0x38>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e04f      	b.n	80029a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01d      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d018      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <HAL_TIM_Base_Start_IT+0xcc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00e      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIM_Base_Start_IT+0x76>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d115      	bne.n	8002992 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_TIM_Base_Start_IT+0xdc>)
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d015      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0xb4>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d011      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	e008      	b.n	80029a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e000      	b.n	80029a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40013400 	.word	0x40013400
 80029c8:	40014000 	.word	0x40014000
 80029cc:	00010007 	.word	0x00010007

080029d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0202 	mvn.w	r2, #2
 80029fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f905 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f8f7 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f908 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0204 	mvn.w	r2, #4
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2202      	movs	r2, #2
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8db 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8cd 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8de 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0208 	mvn.w	r2, #8
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8b1 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8a3 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8b4 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f887 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f879 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f88a 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0201 	mvn.w	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fe0a 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d107      	bne.n	8002b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f914 	bl	8002da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8e:	d10e      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f907 	bl	8002dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d10e      	bne.n	8002bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d107      	bne.n	8002bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f838 	bl	8002c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d10e      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f06f 0220 	mvn.w	r2, #32
 8002bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8c7 	bl	8002d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d00f      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3d      	ldr	r2, [pc, #244]	; (8002d78 <TIM_Base_SetConfig+0x118>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3c      	ldr	r2, [pc, #240]	; (8002d7c <TIM_Base_SetConfig+0x11c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3b      	ldr	r2, [pc, #236]	; (8002d80 <TIM_Base_SetConfig+0x120>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d01b      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <TIM_Base_SetConfig+0x118>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <TIM_Base_SetConfig+0x11c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <TIM_Base_SetConfig+0x120>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <TIM_Base_SetConfig+0x128>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <TIM_Base_SetConfig+0x12c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <TIM_Base_SetConfig+0x130>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0xf8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <TIM_Base_SetConfig+0x128>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <TIM_Base_SetConfig+0x12c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <TIM_Base_SetConfig+0x130>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	615a      	str	r2, [r3, #20]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e040      	b.n	8002e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd42 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f82c 	bl	8002e6c <UART_SetConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e022      	b.n	8002e64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 faaa 	bl	8003380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fb31 	bl	80034c4 <UART_CheckIdleState>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4bad      	ldr	r3, [pc, #692]	; (800314c <UART_SetConfig+0x2e0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4aa2      	ldr	r2, [pc, #648]	; (8003150 <UART_SetConfig+0x2e4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a99      	ldr	r2, [pc, #612]	; (8003154 <UART_SetConfig+0x2e8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d121      	bne.n	8002f36 <UART_SetConfig+0xca>
 8002ef2:	4b99      	ldr	r3, [pc, #612]	; (8003158 <UART_SetConfig+0x2ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d817      	bhi.n	8002f30 <UART_SetConfig+0xc4>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <UART_SetConfig+0x9c>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f25 	.word	0x08002f25
 8002f10:	08002f1f 	.word	0x08002f1f
 8002f14:	08002f2b 	.word	0x08002f2b
 8002f18:	2301      	movs	r3, #1
 8002f1a:	76fb      	strb	r3, [r7, #27]
 8002f1c:	e0e7      	b.n	80030ee <UART_SetConfig+0x282>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	76fb      	strb	r3, [r7, #27]
 8002f22:	e0e4      	b.n	80030ee <UART_SetConfig+0x282>
 8002f24:	2304      	movs	r3, #4
 8002f26:	76fb      	strb	r3, [r7, #27]
 8002f28:	e0e1      	b.n	80030ee <UART_SetConfig+0x282>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	76fb      	strb	r3, [r7, #27]
 8002f2e:	e0de      	b.n	80030ee <UART_SetConfig+0x282>
 8002f30:	2310      	movs	r3, #16
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e0db      	b.n	80030ee <UART_SetConfig+0x282>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a88      	ldr	r2, [pc, #544]	; (800315c <UART_SetConfig+0x2f0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d132      	bne.n	8002fa6 <UART_SetConfig+0x13a>
 8002f40:	4b85      	ldr	r3, [pc, #532]	; (8003158 <UART_SetConfig+0x2ec>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d828      	bhi.n	8002fa0 <UART_SetConfig+0x134>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0xe8>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	08002fa1 	.word	0x08002fa1
 8002f5c:	08002fa1 	.word	0x08002fa1
 8002f60:	08002fa1 	.word	0x08002fa1
 8002f64:	08002f95 	.word	0x08002f95
 8002f68:	08002fa1 	.word	0x08002fa1
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fa1 	.word	0x08002fa1
 8002f74:	08002f8f 	.word	0x08002f8f
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa1 	.word	0x08002fa1
 8002f84:	08002f9b 	.word	0x08002f9b
 8002f88:	2300      	movs	r3, #0
 8002f8a:	76fb      	strb	r3, [r7, #27]
 8002f8c:	e0af      	b.n	80030ee <UART_SetConfig+0x282>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	76fb      	strb	r3, [r7, #27]
 8002f92:	e0ac      	b.n	80030ee <UART_SetConfig+0x282>
 8002f94:	2304      	movs	r3, #4
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e0a9      	b.n	80030ee <UART_SetConfig+0x282>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e0a6      	b.n	80030ee <UART_SetConfig+0x282>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e0a3      	b.n	80030ee <UART_SetConfig+0x282>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6d      	ldr	r2, [pc, #436]	; (8003160 <UART_SetConfig+0x2f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d120      	bne.n	8002ff2 <UART_SetConfig+0x186>
 8002fb0:	4b69      	ldr	r3, [pc, #420]	; (8003158 <UART_SetConfig+0x2ec>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fba:	2b30      	cmp	r3, #48	; 0x30
 8002fbc:	d013      	beq.n	8002fe6 <UART_SetConfig+0x17a>
 8002fbe:	2b30      	cmp	r3, #48	; 0x30
 8002fc0:	d814      	bhi.n	8002fec <UART_SetConfig+0x180>
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d009      	beq.n	8002fda <UART_SetConfig+0x16e>
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d810      	bhi.n	8002fec <UART_SetConfig+0x180>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <UART_SetConfig+0x168>
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d006      	beq.n	8002fe0 <UART_SetConfig+0x174>
 8002fd2:	e00b      	b.n	8002fec <UART_SetConfig+0x180>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	76fb      	strb	r3, [r7, #27]
 8002fd8:	e089      	b.n	80030ee <UART_SetConfig+0x282>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	76fb      	strb	r3, [r7, #27]
 8002fde:	e086      	b.n	80030ee <UART_SetConfig+0x282>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	76fb      	strb	r3, [r7, #27]
 8002fe4:	e083      	b.n	80030ee <UART_SetConfig+0x282>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	76fb      	strb	r3, [r7, #27]
 8002fea:	e080      	b.n	80030ee <UART_SetConfig+0x282>
 8002fec:	2310      	movs	r3, #16
 8002fee:	76fb      	strb	r3, [r7, #27]
 8002ff0:	e07d      	b.n	80030ee <UART_SetConfig+0x282>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5b      	ldr	r2, [pc, #364]	; (8003164 <UART_SetConfig+0x2f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d120      	bne.n	800303e <UART_SetConfig+0x1d2>
 8002ffc:	4b56      	ldr	r3, [pc, #344]	; (8003158 <UART_SetConfig+0x2ec>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003006:	2bc0      	cmp	r3, #192	; 0xc0
 8003008:	d013      	beq.n	8003032 <UART_SetConfig+0x1c6>
 800300a:	2bc0      	cmp	r3, #192	; 0xc0
 800300c:	d814      	bhi.n	8003038 <UART_SetConfig+0x1cc>
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d009      	beq.n	8003026 <UART_SetConfig+0x1ba>
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d810      	bhi.n	8003038 <UART_SetConfig+0x1cc>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <UART_SetConfig+0x1b4>
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d006      	beq.n	800302c <UART_SetConfig+0x1c0>
 800301e:	e00b      	b.n	8003038 <UART_SetConfig+0x1cc>
 8003020:	2300      	movs	r3, #0
 8003022:	76fb      	strb	r3, [r7, #27]
 8003024:	e063      	b.n	80030ee <UART_SetConfig+0x282>
 8003026:	2302      	movs	r3, #2
 8003028:	76fb      	strb	r3, [r7, #27]
 800302a:	e060      	b.n	80030ee <UART_SetConfig+0x282>
 800302c:	2304      	movs	r3, #4
 800302e:	76fb      	strb	r3, [r7, #27]
 8003030:	e05d      	b.n	80030ee <UART_SetConfig+0x282>
 8003032:	2308      	movs	r3, #8
 8003034:	76fb      	strb	r3, [r7, #27]
 8003036:	e05a      	b.n	80030ee <UART_SetConfig+0x282>
 8003038:	2310      	movs	r3, #16
 800303a:	76fb      	strb	r3, [r7, #27]
 800303c:	e057      	b.n	80030ee <UART_SetConfig+0x282>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a49      	ldr	r2, [pc, #292]	; (8003168 <UART_SetConfig+0x2fc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d125      	bne.n	8003094 <UART_SetConfig+0x228>
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <UART_SetConfig+0x2ec>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003056:	d017      	beq.n	8003088 <UART_SetConfig+0x21c>
 8003058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800305c:	d817      	bhi.n	800308e <UART_SetConfig+0x222>
 800305e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003062:	d00b      	beq.n	800307c <UART_SetConfig+0x210>
 8003064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003068:	d811      	bhi.n	800308e <UART_SetConfig+0x222>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <UART_SetConfig+0x20a>
 800306e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003072:	d006      	beq.n	8003082 <UART_SetConfig+0x216>
 8003074:	e00b      	b.n	800308e <UART_SetConfig+0x222>
 8003076:	2300      	movs	r3, #0
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e038      	b.n	80030ee <UART_SetConfig+0x282>
 800307c:	2302      	movs	r3, #2
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e035      	b.n	80030ee <UART_SetConfig+0x282>
 8003082:	2304      	movs	r3, #4
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e032      	b.n	80030ee <UART_SetConfig+0x282>
 8003088:	2308      	movs	r3, #8
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	e02f      	b.n	80030ee <UART_SetConfig+0x282>
 800308e:	2310      	movs	r3, #16
 8003090:	76fb      	strb	r3, [r7, #27]
 8003092:	e02c      	b.n	80030ee <UART_SetConfig+0x282>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <UART_SetConfig+0x2e4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d125      	bne.n	80030ea <UART_SetConfig+0x27e>
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <UART_SetConfig+0x2ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ac:	d017      	beq.n	80030de <UART_SetConfig+0x272>
 80030ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b2:	d817      	bhi.n	80030e4 <UART_SetConfig+0x278>
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d00b      	beq.n	80030d2 <UART_SetConfig+0x266>
 80030ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030be:	d811      	bhi.n	80030e4 <UART_SetConfig+0x278>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <UART_SetConfig+0x260>
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d006      	beq.n	80030d8 <UART_SetConfig+0x26c>
 80030ca:	e00b      	b.n	80030e4 <UART_SetConfig+0x278>
 80030cc:	2300      	movs	r3, #0
 80030ce:	76fb      	strb	r3, [r7, #27]
 80030d0:	e00d      	b.n	80030ee <UART_SetConfig+0x282>
 80030d2:	2302      	movs	r3, #2
 80030d4:	76fb      	strb	r3, [r7, #27]
 80030d6:	e00a      	b.n	80030ee <UART_SetConfig+0x282>
 80030d8:	2304      	movs	r3, #4
 80030da:	76fb      	strb	r3, [r7, #27]
 80030dc:	e007      	b.n	80030ee <UART_SetConfig+0x282>
 80030de:	2308      	movs	r3, #8
 80030e0:	76fb      	strb	r3, [r7, #27]
 80030e2:	e004      	b.n	80030ee <UART_SetConfig+0x282>
 80030e4:	2310      	movs	r3, #16
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e001      	b.n	80030ee <UART_SetConfig+0x282>
 80030ea:	2310      	movs	r3, #16
 80030ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a17      	ldr	r2, [pc, #92]	; (8003150 <UART_SetConfig+0x2e4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f040 8087 	bne.w	8003208 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030fa:	7efb      	ldrb	r3, [r7, #27]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d837      	bhi.n	8003170 <UART_SetConfig+0x304>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x29c>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003171 	.word	0x08003171
 8003110:	08003135 	.word	0x08003135
 8003114:	08003171 	.word	0x08003171
 8003118:	0800313b 	.word	0x0800313b
 800311c:	08003171 	.word	0x08003171
 8003120:	08003171 	.word	0x08003171
 8003124:	08003171 	.word	0x08003171
 8003128:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fe1a 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003130:	6178      	str	r0, [r7, #20]
        break;
 8003132:	e022      	b.n	800317a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <UART_SetConfig+0x300>)
 8003136:	617b      	str	r3, [r7, #20]
        break;
 8003138:	e01f      	b.n	800317a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe fd7b 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 800313e:	6178      	str	r0, [r7, #20]
        break;
 8003140:	e01b      	b.n	800317a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	617b      	str	r3, [r7, #20]
        break;
 8003148:	e017      	b.n	800317a <UART_SetConfig+0x30e>
 800314a:	bf00      	nop
 800314c:	efff69f3 	.word	0xefff69f3
 8003150:	40008000 	.word	0x40008000
 8003154:	40013800 	.word	0x40013800
 8003158:	40021000 	.word	0x40021000
 800315c:	40004400 	.word	0x40004400
 8003160:	40004800 	.word	0x40004800
 8003164:	40004c00 	.word	0x40004c00
 8003168:	40005000 	.word	0x40005000
 800316c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	76bb      	strb	r3, [r7, #26]
        break;
 8003178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80f1 	beq.w	8003364 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	429a      	cmp	r2, r3
 8003190:	d305      	bcc.n	800319e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	429a      	cmp	r2, r3
 800319c:	d902      	bls.n	80031a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	76bb      	strb	r3, [r7, #26]
 80031a2:	e0df      	b.n	8003364 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	020b      	lsls	r3, r1, #8
 80031b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031ba:	0202      	lsls	r2, r0, #8
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	6849      	ldr	r1, [r1, #4]
 80031c0:	0849      	lsrs	r1, r1, #1
 80031c2:	4608      	mov	r0, r1
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	1814      	adds	r4, r2, r0
 80031ca:	eb43 0501 	adc.w	r5, r3, r1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fc fff4 	bl	80001c8 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4613      	mov	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ee:	d308      	bcc.n	8003202 <UART_SetConfig+0x396>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f6:	d204      	bcs.n	8003202 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e0b0      	b.n	8003364 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	76bb      	strb	r3, [r7, #26]
 8003206:	e0ad      	b.n	8003364 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	d15c      	bne.n	80032cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003212:	7efb      	ldrb	r3, [r7, #27]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d828      	bhi.n	800326a <UART_SetConfig+0x3fe>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <UART_SetConfig+0x3b4>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003245 	.word	0x08003245
 8003224:	0800324d 	.word	0x0800324d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800326b 	.word	0x0800326b
 8003230:	0800325b 	.word	0x0800325b
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7fe fd8e 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003248:	6178      	str	r0, [r7, #20]
        break;
 800324a:	e013      	b.n	8003274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7fe fda0 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003250:	6178      	str	r0, [r7, #20]
        break;
 8003252:	e00f      	b.n	8003274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b49      	ldr	r3, [pc, #292]	; (800337c <UART_SetConfig+0x510>)
 8003256:	617b      	str	r3, [r7, #20]
        break;
 8003258:	e00c      	b.n	8003274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe fceb 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 800325e:	6178      	str	r0, [r7, #20]
        break;
 8003260:	e008      	b.n	8003274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	617b      	str	r3, [r7, #20]
        break;
 8003268:	e004      	b.n	8003274 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	76bb      	strb	r3, [r7, #26]
        break;
 8003272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d074      	beq.n	8003364 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005a      	lsls	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	b29b      	uxth	r3, r3
 8003290:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d916      	bls.n	80032c6 <UART_SetConfig+0x45a>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d212      	bcs.n	80032c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f023 030f 	bic.w	r3, r3, #15
 80032a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	89fa      	ldrh	r2, [r7, #14]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e04e      	b.n	8003364 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	76bb      	strb	r3, [r7, #26]
 80032ca:	e04b      	b.n	8003364 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032cc:	7efb      	ldrb	r3, [r7, #27]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d827      	bhi.n	8003322 <UART_SetConfig+0x4b6>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x46c>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	08003305 	.word	0x08003305
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003323 	.word	0x08003323
 80032e8:	08003313 	.word	0x08003313
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003323 	.word	0x08003323
 80032f4:	08003323 	.word	0x08003323
 80032f8:	0800331b 	.word	0x0800331b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe fd32 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003300:	6178      	str	r0, [r7, #20]
        break;
 8003302:	e013      	b.n	800332c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7fe fd44 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003308:	6178      	str	r0, [r7, #20]
        break;
 800330a:	e00f      	b.n	800332c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <UART_SetConfig+0x510>)
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e00c      	b.n	800332c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fc8f 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8003316:	6178      	str	r0, [r7, #20]
        break;
 8003318:	e008      	b.n	800332c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	617b      	str	r3, [r7, #20]
        break;
 8003320:	e004      	b.n	800332c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	76bb      	strb	r3, [r7, #26]
        break;
 800332a:	bf00      	nop
    }

    if (pclk != 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d018      	beq.n	8003364 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085a      	lsrs	r2, r3, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	441a      	add	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d908      	bls.n	8003360 <UART_SetConfig+0x4f4>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d204      	bcs.n	8003360 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	e001      	b.n	8003364 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003370:	7ebb      	ldrb	r3, [r7, #26]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	bf00      	nop
 800337c:	00f42400 	.word	0x00f42400

08003380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01a      	beq.n	8003496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347e:	d10a      	bne.n	8003496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d4:	f7fd fb3e 	bl	8000b54 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d10e      	bne.n	8003506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f82d 	bl	8003556 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e023      	b.n	800354e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d10e      	bne.n	8003532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f817 	bl	8003556 <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e00d      	b.n	800354e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	e05e      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356e:	d05a      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003570:	f7fd faf0 	bl	8000b54 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <UART_WaitOnFlagUntilTimeout+0x30>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11b      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003594:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e043      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02c      	beq.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035da:	d124      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e00f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d091      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <__libc_init_array>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4d0d      	ldr	r5, [pc, #52]	; (8003688 <__libc_init_array+0x38>)
 8003654:	4c0d      	ldr	r4, [pc, #52]	; (800368c <__libc_init_array+0x3c>)
 8003656:	1b64      	subs	r4, r4, r5
 8003658:	10a4      	asrs	r4, r4, #2
 800365a:	2600      	movs	r6, #0
 800365c:	42a6      	cmp	r6, r4
 800365e:	d109      	bne.n	8003674 <__libc_init_array+0x24>
 8003660:	4d0b      	ldr	r5, [pc, #44]	; (8003690 <__libc_init_array+0x40>)
 8003662:	4c0c      	ldr	r4, [pc, #48]	; (8003694 <__libc_init_array+0x44>)
 8003664:	f000 f820 	bl	80036a8 <_init>
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	2600      	movs	r6, #0
 800366e:	42a6      	cmp	r6, r4
 8003670:	d105      	bne.n	800367e <__libc_init_array+0x2e>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	f855 3b04 	ldr.w	r3, [r5], #4
 8003678:	4798      	blx	r3
 800367a:	3601      	adds	r6, #1
 800367c:	e7ee      	b.n	800365c <__libc_init_array+0xc>
 800367e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003682:	4798      	blx	r3
 8003684:	3601      	adds	r6, #1
 8003686:	e7f2      	b.n	800366e <__libc_init_array+0x1e>
 8003688:	08003710 	.word	0x08003710
 800368c:	08003710 	.word	0x08003710
 8003690:	08003710 	.word	0x08003710
 8003694:	08003714 	.word	0x08003714

08003698 <memset>:
 8003698:	4402      	add	r2, r0
 800369a:	4603      	mov	r3, r0
 800369c:	4293      	cmp	r3, r2
 800369e:	d100      	bne.n	80036a2 <memset+0xa>
 80036a0:	4770      	bx	lr
 80036a2:	f803 1b01 	strb.w	r1, [r3], #1
 80036a6:	e7f9      	b.n	800369c <memset+0x4>

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
